<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:Fluent="clr-namespace:Fluent" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:options="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" xmlns:system="clr-namespace:System;assembly=mscorlib" mc:Ignorable="options d" xmlns:Converters="clr-namespace:Fluent.Converters" xmlns:FluentHelpers="clr-namespace:Fluent.Helpers">
  <system:String x:Key="Fluent.Ribbon.AppTheme">BaseLight</system:String>
  <Color x:Key="BlackColor">#FF000000</Color>
  <Color x:Key="WhiteColor">#FFFFFFFF</Color>
  <Color x:Key="Gray1">#FF333333</Color>
  <Color x:Key="Gray2">#FF7F7F7F</Color>
  <Color x:Key="Gray3">#FF9D9D9D</Color>
  <Color x:Key="Gray4">#FFA59F93</Color>
  <Color x:Key="Gray5">#FFB9B9B9</Color>
  <Color x:Key="Gray6">#FFCCCCCC</Color>
  <Color x:Key="Gray7">#FFD8D8D9</Color>
  <Color x:Key="Gray8">#FFE0E0E0</Color>
  <Color x:Key="Gray9">#5EC9C9C9</Color>
  <Color x:Key="Gray10">#FFF7F7F7</Color>
  <Color x:Key="Gray11">#FFF7F7F7</Color>
  <Color x:Key="SelectionColor">#4B02A3FF</Color>
  <Color x:Key="SelectionBorderColor">#4B0A7FED</Color>
  <Color x:Key="TransparentWhiteColor">#00FFFFFF</Color>
  <Color x:Key="Fluent.Ribbon.Colors.HighTransparentWhiteColor">#17FFFFFF</Color>
  <SolidColorBrush x:Key="WindowBackground" options:Freeze="True" Color="White" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.MenuItem.Background" options:Freeze="True" Color="Transparent" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.Background" options:Freeze="True" Color="#FFFCF1C2" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.BorderBrush" options:Freeze="True" Color="#FFF29536" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.RibbonContextualTabGroup.Background.OpacityMask" options:Freeze="True" Color="#14000000" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.RibbonTabControl.TabsGrid.Background" options:Freeze="True" Color="Transparent" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.RibbonTabItem.MouseOver.Background" options:Freeze="True" Color="Transparent" />
  <LinearGradientBrush x:Key="Fluent.Ribbon.Brushes.RibbonTabItem.Contextual.Background.OpacityMask" StartPoint="0.5,0" EndPoint="0.5,1">
    <GradientStop Offset="0" Color="#16000000" />
    <GradientStop Offset="1" Color="#16000000" />
  </LinearGradientBrush>
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.WindowCommands.CloseButton.MouseOver.Background" options:Freeze="True" Color="#E81123" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.WindowCommands.CloseButton.Pressed.Background" options:Freeze="True" Color="#A92C38" />
  <ControlTemplate x:Key="ControlFocusEmptyTemplate" TargetType="{x:Type Control}">
    <Rectangle Stroke="Transparent">
      <Rectangle.Fill>
        <SolidColorBrush />
      </Rectangle.Fill>
    </Rectangle>
  </ControlTemplate>
  <Converters:ApplicationMenuRightScrollViewerExtractorConverter x:Key="ApplicationMenuRightScrollViewerExtractorConverter" />
  <BooleanToVisibilityConverter x:Key="boolToVisibilityConverter" />
  <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter" />
  <ControlTemplate x:Key="TwoLineLabelControlTemplate" TargetType="{x:Type Fluent:TwoLineLabel}">
    <StackPanel x:Name="stackPanel" HorizontalAlignment="Center" VerticalAlignment="Center" Orientation="Vertical">
      <AccessText x:Name="PART_TextRun" HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center" TextWrapping="Wrap" />
      <StackPanel x:Name="stackPanel1" HorizontalAlignment="Center" VerticalAlignment="Center" Orientation="Horizontal">
        <AccessText x:Name="PART_TextRun2" HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center" TextWrapping="Wrap" />
        <Border x:Name="border" Width="5" Height="Auto" Margin="0" HorizontalAlignment="Center">
          <Path x:Name="path" Width="5" Height="3" Margin="0,2,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L5,0 2.5,3z" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" StrokeThickness="0" />
        </Border>
      </StackPanel>
    </StackPanel>
    <ControlTemplate.Triggers>
      <Trigger Property="HasTwoLines" Value="False">
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="stackPanel" Property="HorizontalAlignment" Value="Left" />
        <Setter TargetName="border" Property="Margin" Value="0" />
        <Setter TargetName="stackPanel" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="border" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="stackPanel1" Property="Margin" Value="3,0,0,0" />
        <Setter TargetName="stackPanel1" Property="VerticalAlignment" Value="Center" />
      </Trigger>
      <Trigger Property="HasGlyph" Value="False">
        <Setter TargetName="path" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="border" Property="Width" Value="0.1" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="RibbonTitleBarControlTemplate" TargetType="{x:Type Fluent:RibbonTitleBar}">
    <Grid VerticalAlignment="Stretch">
      <ContentPresenter x:Name="PART_QuickAccessToolbarHolder" ContentSource="QuickAccessToolBar" IsHitTestVisible="True" VerticalAlignment="Center" Margin="5,6,0,0" />
      <ContentPresenter x:Name="PART_HeaderHolder" ContentSource="Header" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" IsHitTestVisible="False" />
      <Fluent:RibbonContextualGroupsContainer x:Name="PART_ItemsContainer" IsItemsHost="True" />
    </Grid>
    <ControlTemplate.Triggers>
      <DataTrigger Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="Maximized">
        <Setter TargetName="PART_QuickAccessToolbarHolder" Property="Margin" Value="5,2,0,0" />
      </DataTrigger>
      <Trigger Property="IsCollapsed" Value="True">
        <Setter TargetName="PART_QuickAccessToolbarHolder" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ItemsContainer" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="HideContextTabs" Value="True">
        <Setter TargetName="PART_ItemsContainer" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_QuickAccessToolbarHolder" Property="Visibility" Value="Collapsed" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="BackstageTabItemControlTemplate" TargetType="{x:Type Fluent:BackstageTabItem}">
    <Grid Background="Transparent">
      <Border x:Name="selectedBorder" Margin="0" Background="{TemplateBinding Fluent:RibbonProperties.IsSelectedBackground}" Visibility="Collapsed" />
      <Border x:Name="hoverBorder" Margin="0,0,0,0" Background="{TemplateBinding Fluent:RibbonProperties.MouseOverBackground}" Visibility="Collapsed" />
      <ContentControl x:Name="PART_Header" Margin="25,0,15,0" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{TemplateBinding Header}" Foreground="{TemplateBinding Foreground}">
        <ContentControl.Resources>
          <Style TargetType="TextBlock">
            <Setter Property="TextWrapping" Value="NoWrap" />
            <Setter Property="TextTrimming" Value="CharacterEllipsis" />
          </Style>
        </ContentControl.Resources>
      </ContentControl>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="hoverBorder" Property="Visibility" Value="Hidden" />
        <Setter TargetName="PART_Header" Property="Opacity" Value="0.5" />
      </Trigger>
      <Trigger Property="Selector.IsSelected" Value="True">
        <Setter TargetName="selectedBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="hoverBorder" Property="Visibility" Value="Visible" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="BackstageButtonControlTemplate" TargetType="{x:Type Fluent:Button}">
    <Grid Background="Transparent">
      <Border x:Name="border" Background="{TemplateBinding Background}" Visibility="Collapsed" />
      <StackPanel Margin="25,0,15,0" HorizontalAlignment="Left" VerticalAlignment="Center" Orientation="Horizontal">
        <TextBlock x:Name="controlLabel" HorizontalAlignment="Left" VerticalAlignment="Center" Text="{TemplateBinding Header}" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" />
      </StackPanel>
    </Grid>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="BackstageBackButtonTemplate" TargetType="Button">
    <Grid x:Name="ContentGrid" Fluent:FrameworkHelper.UseLayoutRounding="False" Background="Transparent">
      <ContentControl Margin="{TemplateBinding Padding}" HorizontalAlignment="Left">
        <Grid>
          <Path x:Name="arrowpath" Width="16" Height="12" Data="F1 M 36,22L 36,26L 19.75,26L 27,33L 20.5,33L 11,24L 20.5,15L 27,15L 19.75,22L 36,22 Z " Fill="{TemplateBinding Foreground}" Stretch="Uniform" />
          <Ellipse x:Name="backellipse" Width="34" Height="34" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" />
          <Path Width="Auto" Margin="0" HorizontalAlignment="Stretch" Data="M0,0 C0,35 0,35 0,35 C0,35 35,35 35,35 L35,0 z" Fill="Transparent" Stretch="None" />
        </Grid>
      </ContentControl>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="ContentGrid" Property="Background" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="arrowpath" Property="Opacity" Value="0.5" />
        <Setter TargetName="backellipse" Property="Opacity" Value="0.5" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="IsTabStop" Value="false" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border BorderThickness="0" Background="Transparent" CornerRadius="6,6,0,0" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="Fluent.Ribbon.ColorGallery.ListBox.Template.Row0" TargetType="{x:Type ListBox}">
    <Border HorizontalAlignment="Stretch" Background="{TemplateBinding Background}">
      <UniformGrid HorizontalAlignment="Left" Columns="{Binding Columns, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:ColorGallery}}}" IsItemsHost="True" />
    </Border>
  </ControlTemplate>
  <ControlTemplate x:Key="Fluent.Ribbon.ColorGallery.ListBox.Template.Row1" TargetType="{x:Type ListBox}">
    <Border HorizontalAlignment="Stretch" Background="{TemplateBinding Background}">
      <UniformGrid HorizontalAlignment="Left" Columns="{Binding Columns, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:ColorGallery}}}" IsItemsHost="True" Rows="1" />
    </Border>
  </ControlTemplate>
  <Fluent:ColorGradientItemTemplateSelector x:Key="ColorGradientItemTemplateSelect" />
  <Style x:Key="SeparatorTabItemStyle" TargetType="Fluent:SeparatorTabItem">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Fluent:SeparatorTabItem">
          <ContentPresenter ContentSource="Header" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="SliderButtonStyle" TargetType="{x:Type RepeatButton}">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="IsTabStop" Value="false" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border Background="Transparent" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="SliderRepeatButtonControlTemplate" TargetType="{x:Type RepeatButton}">
    <Grid>
      <ContentPresenter Width="14" Height="14" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" />
    </Grid>
  </ControlTemplate>
  <BitmapImage x:Key="MenuCutIcon" options:Freeze="True" x:Shared="False" UriSource="/Fluent;component/Themes/Images/Cut.png" />
  <BitmapImage x:Key="MenuCopyIcon" options:Freeze="True" x:Shared="False" UriSource="/Fluent;component/Themes/Images/Copy.png" />
  <BitmapImage x:Key="MenuPasteIcon" options:Freeze="True" x:Shared="False" UriSource="/Fluent;component/Themes/Images/Paste.png" />
  <BitmapImage x:Key="MoreColorsIcon" options:Freeze="True" UriSource="/Fluent;component/Themes/Images/MoreColors.png" />
  <BitmapImage x:Key="ScreenTipHelpImage" options:Freeze="True" UriSource="/Fluent;component/Themes/Images/Help.png" />
  <BitmapImage x:Key="MenuCheckedImage" options:Freeze="True" UriSource="/Fluent;Component/Themes/Images/Checked.png" />
  <BitmapImage x:Key="ScreenTipWarningImage" options:Freeze="True" UriSource="/Fluent;Component/Themes/Images/Warning.png" />
  <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
  <Fluent:IconConverter x:Key="IconConvert" />
  <ControlTemplate x:Key="RibbonWindowControlTemplate" TargetType="{x:Type Fluent:RibbonWindow}">
    <Grid LayoutTransform="{Binding LayoutTransform, RelativeSource={RelativeSource TemplatedParent}}" RenderTransform="{Binding RenderTransform, RelativeSource={RelativeSource TemplatedParent}}">
      <AdornerDecorator x:Name="Adorner" Margin="0">
        <Grid Background="{TemplateBinding Background}" Margin="0" x:Name="grd">
          <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
          </Grid.RowDefinitions>
          <DockPanel x:Name="pnlTitlebar" Grid.Row="0" Height="33" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{TemplateBinding TitleBackground}" LastChildFill="True" Margin="5,0,0,0">
            <Image x:Name="PART_Icon" Width="16" Height="16" Margin="4,1,0,0" DockPanel.Dock="Left" SnapsToDevicePixels="True" WindowChrome.IsHitTestVisibleInChrome="True" Source="{TemplateBinding Icon,&#xD;&#xA;                                       Converter={StaticResource IconConvert}}" Visibility="{TemplateBinding IsIconVisible,&#xD;&#xA;                                           Converter={StaticResource BooleanToVisibilityConverter}}" />
            <ContentPresenter x:Name="PART_WindowCommands" Grid.Row="0" HorizontalAlignment="Right" Panel.ZIndex="1" Margin="0,1,0,0" Content="{TemplateBinding WindowCommands}" DockPanel.Dock="Right" />
            <Fluent:RibbonTitleBar x:Name="PART_RibbonTitleBar" Margin="0,0,0,0" Height="33" Foreground="{TemplateBinding TitleForeground}" Header="{TemplateBinding Title}" IsCollapsed="{TemplateBinding IsCollapsed}" />
          </DockPanel>
          <ContentPresenter x:Name="PART_ContentPresenter" Grid.Row="1" />
        </Grid>
      </AdornerDecorator>
      <!--<Border
        x:Name="PART_Border"
        HorizontalAlignment="Stretch"
        VerticalAlignment="Stretch"
        Background="{x:Null}"
        BorderBrush="{TemplateBinding BorderBrush}"
        BorderThickness="{TemplateBinding BorderThickness}"
        CornerRadius="6"
        Margin="0"
        UseLayoutRounding="True" />-->
      <ResizeGrip x:Name="WindowResizeGrip" HorizontalAlignment="Right" VerticalAlignment="Bottom" IsTabStop="false" Visibility="Collapsed" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsActive" Value="False">
        <Setter TargetName="PART_WindowCommands" Property="Opacity" Value="0.5" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="ResizeMode" Value="CanResizeWithGrip" />
          <Condition Property="WindowState" Value="Normal" />
        </MultiTrigger.Conditions>
        <!--<Setter TargetName="PART_Border" Property="Visibility" Value="Visible" />-->
        <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="WindowState" Value="Maximized">
        <Setter TargetName="Adorner" Property="Margin" Value="8,0,8,8" />
        <Setter TargetName="PART_WindowCommands" Property="Margin" Value="0,6,0,0" />
        <Setter TargetName="PART_Icon" Property="Margin" Value="0,5,0,0" />
        <Setter TargetName="PART_RibbonTitleBar" Property="Margin" Value="0,6,0,0" />
        <!--<Setter TargetName="PART_QuickAccessToolbarHolder" Property="Margin" Value="0,6,0,0" />-->
        <!--<Setter TargetName="PART_Border" Property="Visibility" Value="Collapsed" />-->
        <!--<Setter Property="BorderThickness" Value="0"/>-->
        <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Collapsed" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <SolidColorBrush x:Key="WhiteBrush" options:Freeze="True" Color="{StaticResource WhiteColor}" />
  <SolidColorBrush x:Key="BlackBrush" options:Freeze="True" Color="{StaticResource BlackColor}" />
  <SolidColorBrush x:Key="GrayBrush1" options:Freeze="True" Color="{StaticResource Gray1}" />
  <SolidColorBrush x:Key="GrayBrush2" options:Freeze="True" Color="{StaticResource Gray2}" />
  <SolidColorBrush x:Key="GrayBrush3" options:Freeze="True" Color="{StaticResource Gray3}" />
  <SolidColorBrush x:Key="GrayBrush4" options:Freeze="True" Color="{StaticResource Gray4}" />
  <SolidColorBrush x:Key="GrayBrush5" options:Freeze="True" Color="{StaticResource Gray5}" />
  <SolidColorBrush x:Key="GrayBrush6" options:Freeze="True" Color="{StaticResource Gray6}" />
  <SolidColorBrush x:Key="GrayBrush7" options:Freeze="True" Color="{StaticResource Gray7}" />
  <SolidColorBrush x:Key="GrayBrush8" options:Freeze="True" Color="{StaticResource Gray8}" />
  <SolidColorBrush x:Key="GrayBrush9" options:Freeze="True" Color="{StaticResource Gray9}" />
  <SolidColorBrush x:Key="GrayBrush10" options:Freeze="True" Color="{StaticResource Gray10}" />
  <SolidColorBrush x:Key="GrayBrush11" options:Freeze="True" Color="{StaticResource Gray11}" />
  <SolidColorBrush x:Key="SelectionBrush" options:Freeze="True" Color="{StaticResource SelectionColor}" />
  <SolidColorBrush x:Key="SelectionBorderBrush" options:Freeze="True" Color="{StaticResource SelectionBorderColor}" />
  <SolidColorBrush x:Key="TransparentWhiteBrush" options:Freeze="True" Color="{StaticResource TransparentWhiteColor}" />
  <SolidColorBrush x:Key="HighTransparentWhiteBrush" options:Freeze="True" Color="{StaticResource Fluent.Ribbon.Colors.HighTransparentWhiteColor}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.LabelTextBrush" options:Freeze="True" Color="{StaticResource BlackColor}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.Control.BorderBrush" options:Freeze="True" Color="{StaticResource Gray6}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.Control.Disabled.BorderBrush" options:Freeze="True" Color="{StaticResource Gray5}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.CheckBox.BorderBrush" options:Freeze="True" Color="{StaticResource Gray3}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.CheckBox.Background" options:Freeze="True" Color="{StaticResource Gray10}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.CheckBox.MouseOver.Stroke" options:Freeze="True" Color="{StaticResource Gray1}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.CheckBox.Pressed.Stroke" options:Freeze="True" Color="{StaticResource BlackColor}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.ColorGallery.Background" options:Freeze="True" Color="{StaticResource WhiteColor}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.ColorGallery.Item.BorderBrush" options:Freeze="True" Color="{StaticResource Gray8}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.DropDown.BackgroundBrush" options:Freeze="True" Color="{StaticResource WhiteColor}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.DropDown.BorderBrush" options:Freeze="True" Color="{StaticResource Gray5}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush" options:Freeze="True" Color="{StaticResource Gray7}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.DropDown.Resize.BackgoundBrush" options:Freeze="True" Color="{StaticResource Gray8}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.Gallery.Header.Background" options:Freeze="True" Color="{StaticResource Gray3}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.GalleryGroupContainer.Header.Background" options:Freeze="True" Color="{StaticResource Gray8}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.KeyTip.Background" options:Freeze="True" Color="{StaticResource Gray1}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.KeyTip.BorderBrush" options:Freeze="True" Color="{StaticResource Gray2}" />
  <LinearGradientBrush x:Key="Fluent.Ribbon.MenuItem.SubMenu.Arrow.Fill" StartPoint="0.055,0.128" EndPoint="0.945,0.872">
    <GradientStop Offset="1" Color="{StaticResource Gray2}" />
    <GradientStop Color="{StaticResource Gray3}" />
  </LinearGradientBrush>
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.Ribbon.Background" options:Freeze="True" Color="{StaticResource WhiteColor}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.RibbonGroupBox.Collapsed.BorderBrush" options:Freeze="True" Color="{StaticResource Gray6}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.RibbonGroupBox.Collapsed.MouseOver.Background" options:Freeze="True" Color="{StaticResource Gray10}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.RibbonGroupBox.DropDownOpen.Background" options:Freeze="True" Color="{StaticResource Gray8}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.RibbonGroupBox.Header.Foreground" options:Freeze="True" Color="{StaticResource Gray2}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.RibbonTabControl.Background" options:Freeze="True" Color="{StaticResource WhiteColor}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.RibbonTabControl.Foreground" options:Freeze="True" Color="{StaticResource BlackColor}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.RibbonTabControl.Content.Background" options:Freeze="True" Color="{StaticResource WhiteColor}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.RibbonTabControl.Content.Foreground" options:Freeze="True" Color="{StaticResource BlackColor}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.RibbonTabControl.TabsGrid.Foreground" options:Freeze="True" Color="{StaticResource BlackColor}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.RibbonTabItem.Foreground" options:Freeze="True" Color="{StaticResource BlackColor}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.RibbonTabItem.BorderBrush" options:Freeze="True" Color="{StaticResource Gray8}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.RibbonTabItem.Active.Background" options:Freeze="True" Color="{StaticResource WhiteColor}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.RibbonTabItem.Selected.Foreground" options:Freeze="True" Color="{StaticResource Gray1}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.Separator.BorderBrush" options:Freeze="True" Color="{StaticResource Gray8}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.Separator.Background" options:Freeze="True" Color="{StaticResource Gray8}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.GroupSeparator.Background" options:Freeze="True" Color="{StaticResource Gray8}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.ScreenTip.BorderBrush" options:Freeze="True" Color="{StaticResource Gray7}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.ScreenTip.Background" options:Freeze="True" Color="{StaticResource WhiteColor}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.ScrollButton.Default.BorderBrush" options:Freeze="True" Color="{StaticResource Gray4}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.ScrollButton.Default.Background" options:Freeze="True" Color="{StaticResource WhiteColor}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.ScrollBar.Background" options:Freeze="True" Color="{StaticResource WhiteColor}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.ScrollThumb.Default.BorderBrush" options:Freeze="True" Color="{StaticResource Gray4}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.ScrollThumb.Default.Background" options:Freeze="True" Color="{StaticResource WhiteColor}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.ScrollViewer.Button.BorderBrush" options:Freeze="True" Color="{StaticResource Gray2}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.ScrollViewer.Button.Background" options:Freeze="True" Color="{StaticResource Gray8}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.TextBox.BorderBrush" options:Freeze="True" Color="{StaticResource Gray6}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.TextBox.Background" options:Freeze="True" Color="{StaticResource WhiteColor}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.TextBox.MouseOver.Background" options:Freeze="True" Color="{StaticResource WhiteColor}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.TextBox.MouseOver.BorderBrush" options:Freeze="True" Color="{StaticResource Gray5}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.TextBox.Disabled.Background" options:Freeze="True" Color="{StaticResource Gray10}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.TextBox.Disabled.BorderBrush" options:Freeze="True" Color="{StaticResource Gray8}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.WindowCommands.CaptionButton.Foreground" options:Freeze="True" Color="{StaticResource BlackColor}" />
  <SolidColorBrush x:Key="Fluent.Ribbon.Brushes.WindowCommands.CaptionButton.Background" options:Freeze="True" Color="{StaticResource TransparentWhiteColor}" />
  <Style x:Key="CaptionCloseButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.WindowCommands.CaptionButton.Background}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.WindowCommands.CaptionButton.Foreground}" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="Padding" Value="1" />
    <Setter Property="Width" Value="46" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid Background="{TemplateBinding Background}">
            <ContentPresenter x:Name="contentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="contentPresenter" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
              <Setter TargetName="contentPresenter" Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.WhiteBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.WindowCommands.CloseButton.MouseOver.Background}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.WindowCommands.CloseButton.Pressed.Background}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="CaptionButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.WindowCommands.CaptionButton.Background}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.WindowCommands.CaptionButton.Foreground}" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="Padding" Value="1" />
    <Setter Property="Width" Value="46" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid Background="{TemplateBinding Background}">
            <ContentPresenter x:Name="contentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="contentPresenter" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
              <Setter TargetName="contentPresenter" Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.WhiteBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.WindowCommands.CaptionButton.MouseOver.Background}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.WindowCommands.CaptionButton.Pressed.Background}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="FluentButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.WindowCommands.CaptionButton.Background}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.WindowCommands.CaptionButton.Foreground}" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="Padding" Value="1" />
    <Setter Property="Width" Value="46" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid Background="{TemplateBinding Background}">
            <Border VerticalAlignment="Stretch" BorderThickness="1" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}">
              <ContentPresenter x:Name="contentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Center" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="contentPresenter" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
              <Setter TargetName="contentPresenter" Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.WhiteBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.WindowCommands.CaptionButton.MouseOver.Background}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.WindowCommands.CaptionButton.Pressed.Background}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="WindowCommandsControlTemplate" TargetType="{x:Type Button}">
    <Grid Background="{TemplateBinding Background}">
      <ContentPresenter x:Name="contentPresenter" Margin="11,1,11,1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Opacity="0.75" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
      <Rectangle x:Name="border" Width="0" Height="15" Margin="10,0,0,0" HorizontalAlignment="Right" VerticalAlignment="Stretch" Fill="{TemplateBinding Foreground}" IsHitTestVisible="False" Opacity="0.25" SnapsToDevicePixels="True" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="contentPresenter" Property="Opacity" Value="1" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="False">
        <Setter TargetName="contentPresenter" Property="Opacity" Value=".5" />
      </Trigger>
      <Trigger Property="IsKeyboardFocused" Value="True" />
      <Trigger Property="ToggleButton.IsChecked" Value="True" />
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.DarkIdealForegroundDisabledBrush}" />
      </Trigger>
      <DataTrigger Binding="{Binding RelativeSource={RelativeSource PreviousData}}" Value="{x:Null}">
        <Setter TargetName="border" Property="Rectangle.Width" Value="1" />
      </DataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ControlStyleEmptyFocus" TargetType="{x:Type Control}">
    <Setter Property="Template" Value="{DynamicResource ControlFocusEmptyTemplate}" />
  </Style>
  <ControlTemplate x:Key="BackstageToggleButtonControlTemplate" TargetType="{x:Type Fluent:Backstage}">
    <Border x:Name="border2" Height="Auto" MinWidth="60" Margin="0,0,0,0" Background="{TemplateBinding Background}">
      <Grid>
        <Rectangle x:Name="rectangle" />
        <ContentPresenter x:Name="contentPresenter" Margin="10,0,10,0" HorizontalAlignment="Center" VerticalAlignment="Center" ContentSource="Header" />
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="rectangle" Property="Fill" Value="{DynamicResource HighTransparentWhiteBrush}" />
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="border2" Property="Opacity" Value="0.5" />
        <Setter TargetName="contentPresenter" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="IsOpen" Value="True">
        <Setter TargetName="rectangle" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="border2" Property="IsMouseOver" Value="True" />
          <Condition Property="IsOpen" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="rectangle" Property="Visibility" Value="Collapsed" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="RibbonBackstageStyle" TargetType="{x:Type Fluent:Backstage}">
    <Setter Property="Template" Value="{DynamicResource BackstageToggleButtonControlTemplate}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Fluent:FrameworkHelper.UseLayoutRounding" Value="True" />
    <Setter Property="Header" Value="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.BackstageButtonText, Mode=OneWay}" />
    <Setter Property="Fluent:KeyTip.Keys" Value="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.BackstageButtonKeyTip, Mode=OneWay}" />
    <Setter Property="HideAnimationDuration" Value="0:0:0.3" />
    <Setter Property="HideContextTabsOnOpen" Value="True" />
    <Setter Property="IsOpenAnimationEnabled" Value="{DynamicResource {x:Static SystemParameters.ClientAreaAnimationKey}}" />
    <Setter Property="Fluent:RibbonProperties.AppTheme" Value="{DynamicResource Fluent.Ribbon.AppTheme}" />
    <Style.Triggers>
      <Trigger Property="Fluent:RibbonProperties.AppTheme" Value="BaseLight">
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.AccentBaseColorBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.IdealForegroundColorBrush}" />
      </Trigger>
      <Trigger Property="Fluent:RibbonProperties.AppTheme" Value="BaseDark">
        <Setter Property="Background" Value="{DynamicResource WhiteBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
      </Trigger>
      <Trigger Property="IsOpenAnimationEnabled" Value="False">
        <Setter Property="HideAnimationDuration" Value="0" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="RibbonTabItemControlTemplate" TargetType="{x:Type Fluent:RibbonTabItem}">
    <Grid x:Name="grid" Height="Auto" Background="{TemplateBinding Background}">
      <Border x:Name="border3" Grid.ColumnSpan="2" Margin="0,0,0,1">
        <Border x:Name="border5" Margin="0" Background="{Binding Group.Background, RelativeSource={RelativeSource TemplatedParent}, FallbackValue=Transparent}" BorderThickness="0" OpacityMask="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Contextual.Background.OpacityMask}" />
      </Border>
      <Grid x:Name="selectedGrid" Grid.ColumnSpan="1" Margin="0" Visibility="Collapsed">
        <Rectangle x:Name="rectangle" Height="1" Margin="0" VerticalAlignment="Bottom" Fill="{TemplateBinding ActiveTabBackground}" StrokeThickness="0" />
        <Rectangle x:Name="rectangle1" Height="1.2" Margin="1.8,0" VerticalAlignment="Bottom" Fill="{TemplateBinding ActiveTabBackground}" StrokeThickness="0" />
        <Rectangle x:Name="rectangle2" Height="2" Margin="2,0" VerticalAlignment="Bottom" Fill="{TemplateBinding ActiveTabBackground}" StrokeThickness="0" />
        <Border x:Name="border" Margin="1,0,1,2" VerticalAlignment="Stretch" Background="{TemplateBinding ActiveTabBackground}" BorderBrush="{TemplateBinding ActiveTabBorderBrush}" BorderThickness="1,1,1,0">
          <Border x:Name="border_Copy3" Margin="0" VerticalAlignment="Stretch" BorderBrush="{TemplateBinding ActiveTabBackground}" BorderThickness="1,1,1,0" CornerRadius="2,2,0,0" />
        </Border>
        <Border x:Name="border1" Width="2" Height="2" Margin="0" HorizontalAlignment="Left" VerticalAlignment="Bottom" BorderBrush="{TemplateBinding ActiveTabBorderBrush}" BorderThickness="0,0,1,1" />
        <Border x:Name="border2" Width="2" Height="2" Margin="0" HorizontalAlignment="Right" VerticalAlignment="Bottom" BorderBrush="{TemplateBinding ActiveTabBorderBrush}" BorderThickness="1,0,0,1" />
        <Border x:Name="bottomBorder" Height="1" Margin="0,0,0,-1" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" BorderBrush="{TemplateBinding ActiveTabBackground}" BorderThickness="0,1" />
      </Grid>
      <Border x:Name="PART_ContentContainer" Grid.ColumnSpan="1" Margin="6,2,4,0" Padding="15,0,0,0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
        <ContentControl Height="Auto" Margin="5,1,5,4" HorizontalAlignment="Center" VerticalAlignment="Center" AutomationProperties.AutomationId="{TemplateBinding Name}" AutomationProperties.Name="{TemplateBinding Header}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" />
      </Border>
      <Grid x:Name="separatorGrid" Grid.Column="1" Width="1" Margin="0" HorizontalAlignment="Right" Visibility="Collapsed">
        <Rectangle x:Name="separatorRectangle1" Width="1" Margin="0" Fill="{TemplateBinding BorderBrush}" Stroke="{TemplateBinding BorderBrush}" />
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="PART_ContentContainer" Property="Opacity" Value="0.5" />
      </Trigger>
      <Trigger Property="Selector.IsSelected" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Foreground}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="HasRightGroupBorder" Value="False" />
          <Condition Property="HasLeftGroupBorder" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border5" Property="Margin" Value="2,0,0,0" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="HasLeftGroupBorder" Value="False" />
          <Condition Property="HasRightGroupBorder" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border5" Property="Margin" Value="0,0,2,0" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="HasLeftGroupBorder" Value="False" />
          <Condition Property="HasRightGroupBorder" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border5" Property="Margin" Value="0,0,0,0" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="HasLeftGroupBorder" Value="True" />
          <Condition Property="HasRightGroupBorder" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border5" Property="Margin" Value="2,0,2,0" />
      </MultiTrigger>
      <Trigger Property="Group" Value="{x:Null}">
        <Setter TargetName="border3" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="separatorGrid" Property="Margin" Value="-1,0,0,1" />
        <Setter TargetName="border_Copy3" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Selector.IsSelected" Value="True" />
          <Condition Property="IsMinimized" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="selectedGrid" Property="Visibility" Value="Visible" />
        <Setter Property="Foreground" Value="{Binding Group.Foreground, RelativeSource={RelativeSource Self}}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Selector.IsSelected" Value="True" />
          <Condition Property="IsMinimized" Value="False" />
          <Condition Property="Group" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="selectedGrid" Property="Visibility" Value="Visible" />
        <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Selected.Foreground}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.MouseOver.Background}" />
        <Setter Property="Foreground" Value="{Binding Group.Foreground, RelativeSource={RelativeSource Self}}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="Group" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.MouseOver.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Selected.Foreground}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="Selector.IsSelected" Value="False" />
          <Condition Property="IsMinimized" Value="False" />
          <Condition Property="Group" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.MouseOver.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Selected.Foreground}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Selector.IsSelected" Value="True" />
          <Condition Property="IsMinimized" Value="True" />
          <Condition Property="IsOpen" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="selectedGrid" Property="Visibility" Value="Visible" />
        <Setter TargetName="grid" Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{Binding Group.Foreground, RelativeSource={RelativeSource Self}}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Selector.IsSelected" Value="True" />
          <Condition Property="IsMinimized" Value="True" />
          <Condition Property="IsOpen" Value="True" />
          <Condition Property="Group" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="selectedGrid" Property="Visibility" Value="Visible" />
        <Setter TargetName="grid" Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Selected.Foreground}" />
      </MultiTrigger>
      <Trigger Property="IsSeparatorVisible" Value="True">
        <Setter TargetName="separatorGrid" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_ContentContainer" Property="Margin" Value="6,2,6,0" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="RibbonTabItemStyle" TargetType="{x:Type Fluent:RibbonTabItem}">
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="Height" Value="Auto" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="IsMinimized" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:RibbonTabControl}}, Path=IsMinimized, Mode=OneWay, FallbackValue=False}" />
    <Setter Property="IsOpen" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:RibbonTabControl}}, Path=IsDropDownOpen, Mode=OneWay, FallbackValue=True}" />
    <Setter Property="Template" Value="{DynamicResource RibbonTabItemControlTemplate}" />
    <Setter Property="Indent" Value="12" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Selected.Foreground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.BorderBrush}" />
    <Setter Property="ActiveTabBackground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Active.Background}" />
    <Setter Property="ActiveTabBorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.BorderBrush}" />
    <Setter Property="Fluent:RibbonProperties.MouseOverBackground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.MouseOver.Background}" />
    <Setter Property="HeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock HorizontalAlignment="Left" VerticalAlignment="Center" Text="{Binding}" TextTrimming="None" TextWrapping="NoWrap" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Fluent:RibbonProperties.AppTheme" Value="{DynamicResource Fluent.Ribbon.AppTheme}" />
    <Style.Triggers>
      <Trigger Property="Group" Value="{x:Null}">
        <Setter Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.BorderBrush}" />
      </Trigger>
      <Trigger Property="Fluent:RibbonProperties.AppTheme" Value="BaseLight">
        <Setter Property="Fluent:RibbonProperties.MouseOverForeground" Value="{DynamicResource Fluent.Ribbon.Brushes.HighlightBrush}" />
      </Trigger>
      <Trigger Property="Fluent:RibbonProperties.AppTheme" Value="BaseDark">
        <Setter Property="Fluent:RibbonProperties.MouseOverForeground" Value="{DynamicResource GrayBrush8}" />
      </Trigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsContextual, RelativeSource={RelativeSource Self}}" Value="True" />
          <Condition Binding="{Binding Group.Visibility, RelativeSource={RelativeSource Self}}" Value="Collapsed" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Visibility" Value="Collapsed" />
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="RibbonTabControlToggleButtonControlTemplate" TargetType="{x:Type Fluent:ToggleButton}">
    <Border x:Name="border" Width="22" Height="22" HorizontalAlignment="Left" VerticalAlignment="Stretch" Background="Transparent" BorderBrush="Transparent" BorderThickness="1">
      <Border.ToolTip>
        <Fluent:ScreenTip x:Name="screenTip" Title="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.MinimizeButtonScreenTipTitle, Mode=OneWay}" Text="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.MinimizeButtonScreenTipText, Mode=OneWay}" />
      </Border.ToolTip>
      <Grid>
        <Image x:Name="iconImage" Width="Auto" Height="Auto" Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" Source="/Fluent;Component/Themes/Images/RibbonCollapse.png" Stretch="None" />
        <Image x:Name="iconImageChecked" Width="Auto" Height="Auto" Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" Source="/Fluent;Component/Themes/Images/RibbonExpand.png" Stretch="None" Visibility="Collapsed" />
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="iconImage" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="iconImageChecked" Property="Visibility" Value="Visible" />
        <Setter TargetName="screenTip" Property="Title" Value="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.ExpandButtonScreenTipTitle, Mode=OneWay}" />
        <Setter TargetName="screenTip" Property="Text" Value="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.ExpandButtonScreenTipText, Mode=OneWay}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsPressed" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="RibbonTabControlToggleButtonStyle" TargetType="{x:Type Fluent:ToggleButton}">
    <Setter Property="Template" Value="{DynamicResource RibbonTabControlToggleButtonControlTemplate}" />
    <Setter Property="Height" Value="22" />
    <Setter Property="Width" Value="22" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="CanAddToQuickAccessToolBar" Value="False" />
  </Style>
  <Style x:Key="GroupBoxSeparator" TargetType="Separator">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Separator.Background}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Separator">
          <Border Width="1" Height="55" Margin="2,5,2,10" HorizontalAlignment="Center" VerticalAlignment="Center" Background="{TemplateBinding Background}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="DialogLauncherButtonControlTemplate" TargetType="{x:Type Fluent:Button}">
    <Border x:Name="outerBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="1,0,0,0">
      <Image x:Name="image" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True" Source="pack://application:,,,/Fluent;Component\Themes\Images\DialogLauncher.png" Stretch="None" />
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="FlowDirection" Value="RightToLeft">
        <Setter TargetName="image" Property="RenderTransform">
          <Setter.Value>
            <ScaleTransform ScaleX="-1" />
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="outerBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
        <Setter TargetName="outerBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsPressed" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="outerBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="outerBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ToolTipStyle" TargetType="{x:Type ToolTip}">
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.ScreenTip.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.ScreenTip.BorderBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToolTip}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="5" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="5" />
            </Grid.RowDefinitions>
            <Border Grid.RowSpan="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
              <ContentPresenter Margin="4,4,4,4" />
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="ScreenTipControlTemplate" TargetType="{x:Type Fluent:ScreenTip}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="5" />
      </Grid.ColumnDefinitions>
      <Grid.RowDefinitions>
        <RowDefinition Height="*" />
        <RowDefinition Height="5" />
      </Grid.RowDefinitions>
      <Border Grid.RowSpan="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
        <Grid>
          <StackPanel x:Name="screenTipPanel">
            <TextBlock x:Name="title" Margin="7,8,7,10" FontWeight="Bold" Text="{TemplateBinding Property=Title}" TextWrapping="Wrap" />
            <Grid x:Name="imageAndTextSection">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <Image x:Name="image" MaxHeight="48" Margin="7,5,3,7" HorizontalAlignment="Left" VerticalAlignment="Top" Source="{TemplateBinding Property=Image}" />
              <TextBlock Grid.Column="1" Margin="8,0,8,6" Text="{TemplateBinding Property=Text}" TextWrapping="Wrap" />
            </Grid>
            <Border x:Name="separator" Width="Auto" Height="2" Margin="5" HorizontalAlignment="Stretch" Background="{DynamicResource GrayBrush6}" BorderThickness="0,0,0,1" IsEnabled="{Binding Path=(IsEnabled), RelativeSource={RelativeSource FindAncestor, AncestorType=Control, AncestorLevel=2}}" Visibility="{Binding ElementName=disableReasonSection, Path=Visibility}" />
            <Grid x:Name="disableReasonSection">
              <Image Width="16" Height="16" Margin="5,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Source="{DynamicResource ScreenTipWarningImage}" />
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <TextBlock x:Name="disableReasonHeader" x:Uid="disableReasonHeader" Grid.Row="0" Margin="28,0,5,2" HorizontalAlignment="Stretch" FontWeight="Bold" Text="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.ScreenTipDisableReasonHeader, Mode=OneWay}" TextWrapping="Wrap" />
                <TextBlock x:Name="disableReasonText" Grid.Row="1" Margin="28,0,5,6" HorizontalAlignment="Stretch" Text="{TemplateBinding Property=DisableReason}" TextWrapping="Wrap" />
                <TextBlock x:Name="helpText" Grid.Row="2" Grid.RowSpan="1" Margin="28,0,5,6" HorizontalAlignment="Stretch" Text="{Binding Text, ElementName=textBlock, Mode=Default}" TextWrapping="Wrap" />
              </Grid>
            </Grid>
            <Border x:Name="separator2" Width="Auto" Height="2" Margin="5" HorizontalAlignment="Stretch" Background="{DynamicResource GrayBrush6}" BorderThickness="0,0,0,1" Visibility="{TemplateBinding Property=HelpLabelVisibility}" />
            <Grid x:Name="helpSection" Visibility="{TemplateBinding Property=HelpLabelVisibility}">
              <Image Width="16" Height="16" Margin="5,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Source="{DynamicResource ScreenTipHelpImage}" />
              <TextBlock x:Name="textBlock" x:Uid="HelpText" Margin="28,0,6,6" HorizontalAlignment="Stretch" FontWeight="Bold" Text="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.ScreenTipF1LabelHeader, Mode=OneWay}" TextWrapping="Wrap" />
              <ContentControl x:Name="helpTopic" Content="{TemplateBinding Property=HelpTopic}" Visibility="Collapsed" />
            </Grid>
          </StackPanel>
        </Grid>
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger SourceName="separator" Property="IsEnabled" Value="False">
        <Setter TargetName="disableReasonSection" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger SourceName="separator" Property="IsEnabled" Value="True">
        <Setter TargetName="disableReasonSection" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="helpTopic" Property="Content" Value="{x:Null}" />
          <Condition SourceName="disableReasonText" Property="Text" Value="" />
        </MultiTrigger.Conditions>
        <Setter TargetName="separator" Property="Visibility" Value="Collapsed" />
      </MultiTrigger>
      <Trigger SourceName="disableReasonText" Property="Text" Value="">
        <Setter TargetName="disableReasonSection" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger SourceName="helpTopic" Property="Content" Value="{x:Null}">
        <Setter TargetName="helpText" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="helpSection" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="separator2" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger SourceName="disableReasonSection" Property="Visibility" Value="Visible">
        <Setter TargetName="helpText" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Text" Value="" />
          <Condition Property="Image" Value="{x:Null}" />
        </MultiTrigger.Conditions>
        <Setter TargetName="imageAndTextSection" Property="Visibility" Value="Collapsed" />
      </MultiTrigger>
      <Trigger Property="Image" Value="{x:Null}">
        <Setter TargetName="image" Property="Visibility" Value="Collapsed" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ScreenTipStyle" TargetType="{x:Type Fluent:ScreenTip}">
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.ScreenTip.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.ScreenTip.BorderBrush}" />
    <Setter Property="Width" Value="205" />
    <Setter Property="Template" Value="{DynamicResource ScreenTipControlTemplate}" />
  </Style>
  <Style x:Key="TwoLineLabelStyle" TargetType="{x:Type Fluent:TwoLineLabel}">
    <Setter Property="Template" Value="{DynamicResource TwoLineLabelControlTemplate}" />
  </Style>
  <ControlTemplate x:Key="RibbonToggleButtonControlTemplate" TargetType="{x:Type Fluent:ToggleButton}">
    <Border x:Name="border" Height="Auto" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Background="Transparent" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}">
      <Grid Height="Auto">
        <StackPanel x:Name="stackPanel" Width="Auto" Orientation="Vertical" d:LayoutOverrides="Width, Height">
          <ContentPresenter x:Name="iconImage" Width="32" Height="32" Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" SnapsToDevicePixels="True" />
          <Fluent:TwoLineLabel x:Name="controlLabel" Margin="2,-3,2,1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Style="{DynamicResource TwoLineLabelStyle}" Text="{TemplateBinding Header}" />
        </StackPanel>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="controlLabel" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
        <Setter TargetName="iconImage" Property="Width" Value="16" />
        <Setter TargetName="iconImage" Property="Height" Value="16" />
        <Setter TargetName="iconImage" Property="Margin" Value="1,0,2,0" />
        <Setter TargetName="iconImage" Property="Content" Value="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" />
        <Setter TargetName="controlLabel" Property="Margin" Value="2,-2,2,2" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="stackPanel" Property="Width" Value="Auto" />
        <Setter TargetName="iconImage" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
        <Setter TargetName="controlLabel" Property="Margin" Value="2,2,2,2" />
        <Setter TargetName="border" Property="VerticalAlignment" Value="Stretch" />
        <Setter TargetName="iconImage" Property="Width" Value="16" />
        <Setter TargetName="iconImage" Property="Height" Value="16" />
        <Setter TargetName="iconImage" Property="Margin" Value="1,0,2,0" />
        <Setter TargetName="controlLabel" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="iconImage" Property="Content" Value="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" />
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.Checked.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsPressed" Value="False" />
          <Condition Property="IsChecked" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsPressed" Value="False" />
          <Condition Property="IsChecked" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.CheckedMouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.ToggleButton.CheckedMouseOver.BorderBrush}" />
      </MultiTrigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="DropDownButtonStyle" TargetType="Button">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0" />
                  <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                  <VisualTransition GeneratedDuration="0:0:0.1" To="Pressed" />
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Border.Background).&#xD;&#xA;                    (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                      <SplineColorKeyFrame KeyTime="0" Value="#F2FFFFFF" />
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Border.Background).&#xD;&#xA;                    (GradientBrush.GradientStops)[2].(GradientStop.Color)">
                      <SplineColorKeyFrame KeyTime="0" Value="#CCFFFFFF" />
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimation Duration="0" To="#FF448DCA" Storyboard.TargetProperty="(Border.Background).&#xD;&#xA;                            (SolidColorBrush.Color)" Storyboard.TargetName="Background" />
                    <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Border.Background).&#xD;&#xA;                    (GradientBrush.GradientStops)[3].(GradientStop.Color)">
                      <SplineColorKeyFrame KeyTime="0" Value="#7FFFFFFF" />
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="Background" Storyboard.TargetProperty="(Border.Background).&#xD;&#xA;                      (SolidColorBrush.Color)">
                      <SplineColorKeyFrame KeyTime="0" Value="#FF448DCA" />
                    </ColorAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Highlight">
                      <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Border.Background).&#xD;&#xA;                    (GradientBrush.GradientStops)[0].(GradientStop.Color)">
                      <SplineColorKeyFrame KeyTime="0" Value="#F4FFFFFF" />
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Border.Background).&#xD;&#xA;                    (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                      <SplineColorKeyFrame KeyTime="0" Value="#EAFFFFFF" />
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Border.Background).&#xD;&#xA;                    (GradientBrush.GradientStops)[2].(GradientStop.Color)">
                      <SplineColorKeyFrame KeyTime="0" Value="#C6FFFFFF" />
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames BeginTime="0" Duration="00:00:00.001" Storyboard.TargetName="BackgroundGradient" Storyboard.TargetProperty="(Border.Background).&#xD;&#xA;                    (GradientBrush.GradientStops)[3].(GradientStop.Color)">
                      <SplineColorKeyFrame KeyTime="0" Value="#6BFFFFFF" />
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid Background="#11FFFFFF" FlowDirection="LeftToRight" HorizontalAlignment="Center" Height="18" Margin="0" VerticalAlignment="Center" Width="19">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="20*" />
                <ColumnDefinition Width="20*" />
                <ColumnDefinition Width="20*" />
                <ColumnDefinition Width="20*" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="23*" />
                <RowDefinition Height="19*" />
                <RowDefinition Height="19*" />
                <RowDefinition Height="19*" />
              </Grid.RowDefinitions>
              <Border x:Name="Highlight" BorderThickness="1" Grid.ColumnSpan="4" CornerRadius="0,0,1,1" Margin="-1" Opacity="1" Grid.Row="0" Grid.RowSpan="4">
                <Border.BorderBrush>
                  <SolidColorBrush Color="{DynamicResource ControlPressedColor}" />
                </Border.BorderBrush>
              </Border>
              <Border x:Name="Background" BorderBrush="#FFFFFFFF" BorderThickness="1" Grid.ColumnSpan="4" CornerRadius=".5" Margin="0,-1,0,0" Opacity="1" Grid.Row="1" Grid.RowSpan="3">
                <Border.Background>
                  <SolidColorBrush Color="{DynamicResource ControlDarkColor}" />
                </Border.Background>
              </Border>
              <Border x:Name="BackgroundGradient" BorderBrush="#BF000000" BorderThickness="1" Grid.ColumnSpan="4" CornerRadius=".5" Margin="0,-1,0,0" Opacity="1" Grid.Row="1" Grid.RowSpan="3">
                <Border.Background>
                  <LinearGradientBrush EndPoint=".7,1" StartPoint=".7,0">
                    <GradientStop Color="#FFFFFFFF" Offset="0" />
                    <GradientStop Color="#F9FFFFFF" Offset="0.375" />
                    <GradientStop Color="#E5FFFFFF" Offset="0.625" />
                    <GradientStop Color="#C6FFFFFF" Offset="1" />
                  </LinearGradientBrush>
                </Border.Background>
              </Border>
              <Rectangle Grid.ColumnSpan="4" Grid.RowSpan="1" StrokeThickness="1">
                <Rectangle.Fill>
                  <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                    <GradientStop Color="{DynamicResource HeaderTopColor}" />
                    <GradientStop Color="{DynamicResource ControlMediumColor}" Offset="1" />
                  </LinearGradientBrush>
                </Rectangle.Fill>
                <Rectangle.Stroke>
                  <LinearGradientBrush EndPoint="0.48,-1" StartPoint="0.48,1.25">
                    <GradientStop Color="#FF494949" />
                    <GradientStop Color="#FF9F9F9F" Offset="1" />
                  </LinearGradientBrush>
                </Rectangle.Stroke>
              </Rectangle>
              <Path Fill="#FF2F2F2F" Grid.Row="1" Grid.Column="0" Grid.RowSpan="3" Grid.ColumnSpan="4" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5" Margin="4,3,4,3" Stretch="Fill" Data="M11.426758,8.4305077 L11.749023,8.4305077 &#xD;&#xA;                    L11.749023,16.331387 L10.674805,16.331387 &#xD;&#xA;                    L10.674805,10.299648 L9.0742188,11.298672&#xD;&#xA;                    L9.0742188,10.294277 C9.4788408,10.090176 &#xD;&#xA;                    9.9094238,9.8090878 10.365967,9.4510155 &#xD;&#xA;                    C10.82251,9.0929432 11.176106,8.7527733 &#xD;&#xA;                    11.426758,8.4305077 z M14.65086,8.4305077 &#xD;&#xA;                    L18.566387,8.4305077 L18.566387,9.3435936 &#xD;&#xA;                    L15.671368,9.3435936 L15.671368,11.255703 &#xD;&#xA;                    C15.936341,11.058764 16.27293,10.960293 &#xD;&#xA;                    16.681133,10.960293 C17.411602,10.960293 &#xD;&#xA;                    17.969301,11.178717 18.354229,11.615566 &#xD;&#xA;                    C18.739157,12.052416 18.931622,12.673672&#xD;&#xA;                    18.931622,13.479336 C18.931622,15.452317 &#xD;&#xA;                    18.052553,16.438808 16.294415,16.438808&#xD;&#xA;                    C15.560365,16.438808 14.951641,16.234707 &#xD;&#xA;                    14.468243,15.826504 L14.881817,14.929531&#xD;&#xA;                    C15.368796,15.326992 15.837872,15.525723 &#xD;&#xA;                    16.289043,15.525723 C17.298809,15.525723 &#xD;&#xA;                    17.803692,14.895514 17.803692,13.635098 &#xD;&#xA;                    C17.803692,12.460618 17.305971,11.873379 &#xD;&#xA;                    16.310528,11.873379 C15.83071,11.873379 &#xD;&#xA;                    15.399232,12.079271 15.016094,12.491055&#xD;&#xA;                    L14.65086,12.238613 z" />
              <Ellipse Grid.ColumnSpan="4" Fill="#FFFFFFFF" HorizontalAlignment="Center" Height="3" StrokeThickness="0" VerticalAlignment="Center" Width="3" />
              <Border x:Name="DisabledVisual" BorderBrush="#B2FFFFFF" BorderThickness="1" Grid.ColumnSpan="4" CornerRadius="0,0,.5,.5" Opacity="0" Grid.Row="0" Grid.RowSpan="4" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="InnerButtonControlTemplate" TargetType="{x:Type Fluent:ToggleButton}">
    <Border x:Name="border" Height="Auto" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Background="Transparent" BorderBrush="Transparent" BorderThickness="0" SnapsToDevicePixels="False">
      <Grid Height="Auto">
        <Rectangle x:Name="rectangle" StrokeThickness="0" Visibility="Collapsed" />
        <StackPanel x:Name="stackPanel" Width="Auto" HorizontalAlignment="Stretch" Orientation="Vertical" SnapsToDevicePixels="True" d:LayoutOverrides="Width, Height">
          <ContentPresenter x:Name="iconImage" Width="32" Height="32" Margin="0,1,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding LargeIcon}" SnapsToDevicePixels="True" />
          <Fluent:TwoLineLabel x:Name="controlLabel" Margin="2,0,2,2" HorizontalAlignment="Stretch" VerticalAlignment="Center" Style="{DynamicResource TwoLineLabelStyle}" Text="{TemplateBinding Header}" Visibility="Collapsed" />
        </StackPanel>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsPressed" Value="False" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="controlLabel" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
        <Setter TargetName="iconImage" Property="Width" Value="16" />
        <Setter TargetName="iconImage" Property="Height" Value="16" />
        <Setter TargetName="iconImage" Property="Margin" Value="1,0,2,0" />
        <Setter TargetName="iconImage" Property="Content" Value="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="controlLabel" Property="Margin" Value="2,0,2,1" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="stackPanel" Property="Width" Value="Auto" />
        <Setter TargetName="iconImage" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
        <Setter TargetName="controlLabel" Property="Margin" Value="2,0,-1,1" />
        <Setter TargetName="border" Property="VerticalAlignment" Value="Stretch" />
        <Setter TargetName="iconImage" Property="Width" Value="16" />
        <Setter TargetName="iconImage" Property="Height" Value="16" />
        <Setter TargetName="iconImage" Property="Margin" Value="1,0,2,0" />
        <Setter TargetName="iconImage" Property="Content" Value="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="controlLabel" Property="Visibility" Value="Visible" />
        <Setter TargetName="controlLabel" Property="VerticalAlignment" Value="Center" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="CheckBoxControlTemplate" TargetType="{x:Type Fluent:CheckBox}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="16" />
        <ColumnDefinition Width="*" />
      </Grid.ColumnDefinitions>
      <Grid HorizontalAlignment="Left" VerticalAlignment="Center">
        <Border x:Name="border" Width="13" Height="13" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
          <Grid>
            <Path x:Name="CheckIcon" Width="7.5" Height="6.9" HorizontalAlignment="Center" VerticalAlignment="Center" Fluent:FrameworkHelper.UseLayoutRounding="False" Data="M48.4375,110.4375 L51.4995,112.812 L56.3745,107.24883" Opacity="0" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.HighlightBrush}" StrokeEndLineCap="Triangle" StrokeStartLineCap="Triangle" StrokeThickness="1.5" />
            <Rectangle x:Name="IndeterminateIcon" Width="7" Height="7" Fill="{DynamicResource GrayBrush2}" Opacity="0" />
            <Rectangle x:Name="DisabledVisualElement" Fill="{DynamicResource WhiteBrush}" Opacity="0" RadiusX="1" RadiusY="1" />
          </Grid>
        </Border>
      </Grid>
      <ContentControl Grid.Column="1" Margin="2,0,0,0" Foreground="{TemplateBinding Foreground}" IsTabStop="False">
        <ContentPresenter x:Name="contentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding ContentTemplate}" RecognizesAccessKey="True" />
      </ContentControl>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="CheckIcon" Property="Stroke" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.MouseOver.Stroke}" />
        <Setter TargetName="IndeterminateIcon" Property="Fill" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.MouseOver.Stroke}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
        <Setter TargetName="CheckIcon" Property="Stroke" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.Pressed.Stroke}" />
        <Setter TargetName="IndeterminateIcon" Property="Fill" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.Pressed.Stroke}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="contentPresenter" Property="Opacity" Value=".55" />
        <Setter TargetName="DisabledVisualElement" Property="Opacity" Value=".55" />
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="CheckIcon" Property="Opacity" Value="1" />
      </Trigger>
      <Trigger Property="IsChecked" Value="{x:Null}">
        <Setter TargetName="IndeterminateIcon" Property="Opacity" Value="1" />
      </Trigger>
      <Trigger Property="FlowDirection" Value="RightToLeft">
        <Setter TargetName="CheckIcon" Property="LayoutTransform">
          <Setter.Value>
            <ScaleTransform ScaleX="-1" />
          </Setter.Value>
        </Setter>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="RibbonCheckBoxStyle" TargetType="{x:Type Fluent:CheckBox}">
    <Setter Property="ToolTipService.ShowDuration" Value="30000" />
    <Setter Property="Template" Value="{DynamicResource CheckBoxControlTemplate}" />
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.Background}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.BorderBrush}" />
    <Setter Property="Margin" Value="2,2,2,2" />
  </Style>
  <Style x:Key="{x:Type Fluent:RadioButton}" TargetType="{x:Type Fluent:RadioButton}">
    <Setter Property="ToolTipService.ShowDuration" Value="30000" />
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.CheckBox.BorderBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="FocusVisualStyle">
      <Setter.Value>
        <Style>
          <Setter Property="Control.Template">
            <Setter.Value>
              <ControlTemplate>
                <Rectangle Margin="1" SnapsToDevicePixels="true" Stroke="{DynamicResource BlackBrush}" StrokeDashArray="1 2" StrokeThickness="1" />
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:RadioButton}">
          <BulletDecorator x:Name="bulletDecorator" Height="22" Background="Transparent" SnapsToDevicePixels="true">
            <BulletDecorator.Bullet>
              <Grid Width="12" Height="12" Margin="4,4,0,0" HorizontalAlignment="Left" VerticalAlignment="Center">
                <Rectangle Margin="-6,0" Fill="{DynamicResource TransparentWhiteBrush}" />
                <Ellipse x:Name="normal" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
                <Ellipse x:Name="Checked1" Margin="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{DynamicResource Fluent.Ribbon.Brushes.HighlightBrush}" Opacity="0" />
              </Grid>
            </BulletDecorator.Bullet>
            <TextBlock Margin="8,3,4,0" Text="{TemplateBinding Header}" />
          </BulletDecorator>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="normal" Property="Stroke" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="normal" Property="Stroke" Value="{DynamicResource Fluent.Ribbon.Brushes.HighlightBrush}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Checked1" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="bulletDecorator" Property="Opacity" Value="0.3" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="GalleryGroupContainerTemplate" TargetType="{x:Type Fluent:GalleryGroupContainer}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
        <RowDefinition />
      </Grid.RowDefinitions>
      <Grid x:Name="headerGrid" Grid.Row="0" Height="21" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.GalleryGroupContainer.Header.Background}">
        <TextBlock Margin="7,0" HorizontalAlignment="Left" VerticalAlignment="Center" FontWeight="Bold" Text="{TemplateBinding Header}" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" />
      </Grid>
      <ItemsPresenter Grid.Row="1" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsHeadered" Value="False">
        <Setter TargetName="headerGrid" Property="Visibility" Value="Collapsed" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="GalleryGroupContainerStyle" TargetType="{x:Type Fluent:GalleryGroupContainer}">
    <Setter Property="Template" Value="{DynamicResource GalleryGroupContainerTemplate}" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <WrapPanel HorizontalAlignment="Left" IsItemsHost="True" ItemHeight="{Binding ItemHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:GalleryGroupContainer}}}" ItemWidth="{Binding ItemWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:GalleryGroupContainer}}}" Orientation="{Binding Orientation, RelativeSource={RelativeSource Self}}" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <StackPanel IsItemsHost="True" Orientation="{Binding Orientation, RelativeSource={RelativeSource Self}}" />
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="ScrollButtonControlTemplate" TargetType="{x:Type RepeatButton}">
    <Border Background="{DynamicResource Fluent.Ribbon.Brushes.ScrollViewer.Button.Background}">
      <Border x:Name="OuterBorder" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.ScrollViewer.Button.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.ScrollViewer.Button.BorderBrush}" BorderThickness="1">
        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
      </Border>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsKeyboardFocusWithin" Value="True">
        <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ScrollButtonStyle" TargetType="{x:Type RepeatButton}">
    <Setter Property="Template" Value="{DynamicResource ScrollButtonControlTemplate}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" />
  </Style>
  <Style x:Key="RibbonScrollViewer" TargetType="{x:Type ScrollViewer}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid x:Name="Grid" Background="{TemplateBinding Background}" IsHitTestVisible="True">
            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Margin="{TemplateBinding Padding}" CanContentScroll="{TemplateBinding CanContentScroll}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" IsHitTestVisible="True" />
            <RepeatButton Width="13" Height="Auto" HorizontalAlignment="Left" VerticalAlignment="Stretch" Command="{x:Static ScrollBar.LineLeftCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Focusable="false" Style="{DynamicResource ScrollButtonStyle}">
              <RepeatButton.Visibility>
                <MultiBinding Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="0" FallbackValue="Visibility.Collapsed">
                  <Binding Path="ComputedHorizontalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="HorizontalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="ExtentWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="ViewportWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                </MultiBinding>
              </RepeatButton.Visibility>
              <Path Width="3" Height="5" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L1,1 1,-1z" Fill="{DynamicResource BlackBrush}" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="0" />
            </RepeatButton>
            <RepeatButton Width="13" Height="Auto" HorizontalAlignment="Right" VerticalAlignment="Stretch" Command="{x:Static ScrollBar.LineRightCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Focusable="false" Style="{DynamicResource ScrollButtonStyle}">
              <RepeatButton.Visibility>
                <MultiBinding Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="100" FallbackValue="Visibility.Collapsed">
                  <Binding Path="ComputedHorizontalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="HorizontalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="ExtentWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="ViewportWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                </MultiBinding>
              </RepeatButton.Visibility>
              <Path Width="3" Height="5" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M1,0L0,1 0,-1z" Fill="{DynamicResource BlackBrush}" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="0" />
            </RepeatButton>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="CanContentScroll" Value="True" />
    <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="VerticalScrollBarVisibility" Value="Disabled" />
    <Setter Property="Focusable" Value="False" />
  </Style>
  <Style x:Key="RibbonTabScrollViewer" TargetType="{x:Type ScrollViewer}">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid x:Name="Grid" Background="{TemplateBinding Background}" IsHitTestVisible="True">
            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Margin="{TemplateBinding Padding}" CanContentScroll="{TemplateBinding CanContentScroll}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" IsHitTestVisible="True" />
            <RepeatButton Width="13" Height="Auto" Margin="0" HorizontalAlignment="Left" VerticalAlignment="Stretch" Command="{x:Static ScrollBar.LineLeftCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Focusable="false" Style="{DynamicResource ScrollButtonStyle}">
              <RepeatButton.Visibility>
                <MultiBinding Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="0" FallbackValue="Visibility.Collapsed">
                  <Binding Path="ComputedHorizontalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="HorizontalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="ExtentWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="ViewportWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                </MultiBinding>
              </RepeatButton.Visibility>
              <Path Width="3" Height="5" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L1,1 1,-1z" Fill="{DynamicResource BlackBrush}" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="0" />
            </RepeatButton>
            <RepeatButton Width="13" Height="Auto" Margin="0" HorizontalAlignment="Right" VerticalAlignment="Stretch" Command="{x:Static ScrollBar.LineRightCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Focusable="false" Style="{DynamicResource ScrollButtonStyle}">
              <RepeatButton.Visibility>
                <MultiBinding Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="100" FallbackValue="Visibility.Collapsed">
                  <Binding Path="ComputedHorizontalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="HorizontalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="ExtentWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                  <Binding Path="ViewportWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                </MultiBinding>
              </RepeatButton.Visibility>
              <Path Width="3" Height="5" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M1,0L0,1 0,-1z" Fill="{DynamicResource BlackBrush}" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="0" />
            </RepeatButton>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="CanContentScroll" Value="True" />
    <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="VerticalScrollBarVisibility" Value="Disabled" />
    <Setter Property="Focusable" Value="False" />
  </Style>
  <ControlTemplate x:Key="MenuScrollViewerControlTemplate" TargetType="{x:Type ScrollViewer}">
    <Grid x:Name="Grid" Background="{TemplateBinding Background}" IsHitTestVisible="True">
      <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Margin="{TemplateBinding Padding}" CanContentScroll="{TemplateBinding CanContentScroll}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" IsHitTestVisible="True" />
      <RepeatButton Width="Auto" Height="12" HorizontalAlignment="Stretch" VerticalAlignment="Top" ClickMode="Hover" Command="{x:Static ScrollBar.LineUpCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Focusable="false" Style="{DynamicResource ScrollButtonStyle}">
        <RepeatButton.Visibility>
          <MultiBinding Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="0" FallbackValue="Visibility.Collapsed">
            <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
            <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
            <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}" />
            <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}" />
          </MultiBinding>
        </RepeatButton.Visibility>
        <Path Width="5" Height="3" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L1,-1 2,0z" Fill="{DynamicResource BlackBrush}" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="0" />
      </RepeatButton>
      <RepeatButton Width="Auto" Height="12" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" ClickMode="Hover" Command="{x:Static ScrollBar.LineDownCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Focusable="false" Style="{DynamicResource ScrollButtonStyle}">
        <RepeatButton.Visibility>
          <MultiBinding Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="100" FallbackValue="Visibility.Collapsed">
            <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
            <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
            <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}" />
            <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}" />
          </MultiBinding>
        </RepeatButton.Visibility>
        <Path Width="5" Height="3" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L1,1 2,0z" Fill="{DynamicResource BlackBrush}" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="0" />
      </RepeatButton>
    </Grid>
  </ControlTemplate>
  <ControlTemplate x:Key="RibbonContextualTabGroupControlTemplate" TargetType="{x:Type Fluent:RibbonContextualTabGroup}">
    <Border x:Name="rootBorder" Width="Auto" Margin="1,0,1,0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderThickness="1,0,1,0" Visibility="{TemplateBinding InnerVisibility}">
      <Border Height="Auto" VerticalAlignment="Stretch" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0">
        <Grid Height="Auto" Margin="0" VerticalAlignment="Stretch">
          <Rectangle Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{TemplateBinding Background}" OpacityMask="{DynamicResource Fluent.Ribbon.Brushes.RibbonContextualTabGroup.Background.OpacityMask}" />
          <Rectangle Width="Auto" Height="4" HorizontalAlignment="Stretch" VerticalAlignment="Top" Fill="{TemplateBinding BorderBrush}" />
          <Grid Margin="0,4,0,0">
            <TextBlock Margin="6,0" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Header}" TextTrimming="CharacterEllipsis" />
          </Grid>
        </Grid>
      </Border>
    </Border>
  </ControlTemplate>
  <Style x:Key="RibbonTitleBarStyle" TargetType="{x:Type Fluent:RibbonTitleBar}">
    <Setter Property="Template" Value="{DynamicResource RibbonTitleBarControlTemplate}" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="{Binding}" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="KeyTipStyle" TargetType="{x:Type Fluent:KeyTip}">
    <Setter Property="Foreground" Value="{DynamicResource WhiteBrush}" />
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.KeyTip.Background}" />
    <Setter Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.KeyTip.BorderBrush}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:KeyTip}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <TextBlock Margin="4,-1,4,1" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Content}" TextWrapping="Wrap" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="0.5" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="ResizeBothThumbControlTemplate" TargetType="{x:Type Thumb}">
    <Grid Background="Transparent">
      <Rectangle Width="2" Height="2" Margin="0,0,2,1" HorizontalAlignment="Right" VerticalAlignment="Bottom" Fill="{DynamicResource WhiteBrush}" StrokeThickness="0" />
      <Rectangle Width="2" Height="2" Margin="0,0,2,5" HorizontalAlignment="Right" VerticalAlignment="Bottom" Fill="{DynamicResource WhiteBrush}" StrokeThickness="0" />
      <Rectangle Width="2" Height="2" Margin="0,0,6,1" HorizontalAlignment="Right" VerticalAlignment="Bottom" Fill="{DynamicResource WhiteBrush}" StrokeThickness="0" />
      <Rectangle Width="2" Height="2" Margin="0,0,3,2" HorizontalAlignment="Right" VerticalAlignment="Bottom" Fill="{DynamicResource BlackBrush}" StrokeThickness="0" />
      <Rectangle Width="2" Height="2" Margin="0,0,3,6" HorizontalAlignment="Right" VerticalAlignment="Bottom" Fill="{DynamicResource BlackBrush}" StrokeThickness="0" />
      <Rectangle Width="2" Height="2" Margin="0,0,7,2" HorizontalAlignment="Right" VerticalAlignment="Bottom" Fill="{DynamicResource BlackBrush}" StrokeThickness="0" />
    </Grid>
  </ControlTemplate>
  <ControlTemplate x:Key="ResizeVerticalThumbControlTemplate" TargetType="{x:Type Thumb}">
    <Grid Background="Transparent">
      <StackPanel Margin="0,1,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" Orientation="Horizontal" d:LayoutOverrides="Height">
        <Grid Width="Auto" Height="Auto" Margin="1,0,0,0" HorizontalAlignment="Left">
          <Rectangle Width="2" Height="2" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource WhiteBrush}" StrokeThickness="0" />
          <Rectangle Width="2" Height="2" Margin="0,0,1,1" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource BlackBrush}" StrokeThickness="0" />
        </Grid>
        <Grid Width="Auto" Height="Auto" Margin="1,0,0,0" HorizontalAlignment="Left">
          <Rectangle Width="2" Height="2" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource WhiteBrush}" StrokeThickness="0" />
          <Rectangle Width="2" Height="2" Margin="0,0,1,1" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource BlackBrush}" StrokeThickness="0" />
        </Grid>
        <Grid Width="Auto" Height="Auto" Margin="1,0,0,0" HorizontalAlignment="Left">
          <Rectangle Width="2" Height="2" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource WhiteBrush}" StrokeThickness="0" />
          <Rectangle Width="2" Height="2" Margin="0,0,1,1" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource BlackBrush}" StrokeThickness="0" />
        </Grid>
        <Grid Width="Auto" Height="Auto" Margin="1,0,0,0" HorizontalAlignment="Left">
          <Rectangle Width="2" Height="2" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource WhiteBrush}" StrokeThickness="0" />
          <Rectangle Width="2" Height="2" Margin="0,0,1,1" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource BlackBrush}" StrokeThickness="0" />
        </Grid>
      </StackPanel>
    </Grid>
  </ControlTemplate>
  <ControlTemplate x:Key="MenuSeparatorControlTemplate" TargetType="{x:Type Separator}">
    <Grid Height="Auto">
      <Path Height="1" Margin="32,1,3,2" VerticalAlignment="Center" Data="M0,0L1,0" Fill="{x:Null}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" StrokeDashArray="2 2" />
    </Grid>
  </ControlTemplate>
  <ControlTemplate x:Key="MenuGroupSeparatorControlTemplate" TargetType="{x:Type Fluent:GroupSeparatorMenuItem}">
    <Grid Height="Auto" Background="{DynamicResource Fluent.Ribbon.Brushes.GroupSeparator.Background}">
      <TextBlock Margin="7,0" HorizontalAlignment="Left" VerticalAlignment="Center" FontWeight="Bold" Text="{TemplateBinding Header}" TextWrapping="Wrap" d:LayoutOverrides="Width, Height" />
    </Grid>
  </ControlTemplate>
  <Style x:Key="GalleryDropDownButtonStyle" TargetType="{x:Type Fluent:DropDownButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:DropDownButton}">
          <Grid>
            <Border x:Name="PART_ButtonBorder" Background="Transparent">
              <Fluent:TwoLineLabel x:Name="twoLineLabel" Margin="6,-2,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Foreground="{DynamicResource WhiteBrush}" HasGlyph="True" HasTwoLines="False" Text="{Binding Header, RelativeSource={RelativeSource TemplatedParent}}" />
            </Border>
            <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0,0,-4,0" VerticalAlignment="Top" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
              <Grid Name="DropDown" Margin="0" VerticalAlignment="Top" SnapsToDevicePixels="True">
                <Border x:Name="PART_DropDownBorder" Grid.ColumnSpan="1" MinWidth="{TemplateBinding ActualWidth}" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" CornerRadius="1" SnapsToDevicePixels="True" d:LayoutOverrides="Width, Height">
                  <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                    <Border Width="Auto" Height="Auto" VerticalAlignment="Top" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" CornerRadius="1" />
                    <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                      <Rectangle Grid.RowSpan="2" Width="1" Height="Auto" Margin="24,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Stretch" Fill="{x:Null}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" Visibility="Visible" />
                      <ScrollViewer MaxHeight="{TemplateBinding MaxDropDownHeight}" Margin="1" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Auto" SnapsToDevicePixels="True">
                        <StackPanel x:Name="PART_MenuPanel" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" Orientation="Vertical" />
                      </ScrollViewer>
                    </Grid>
                  </Grid>
                </Border>
              </Grid>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="twoLineLabel" Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.ExtremeHighlightBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="GalleryItemControlTemplate" TargetType="{x:Type Fluent:GalleryItem}">
    <Grid Background="Transparent">
      <Border x:Name="hoverBorder" Background="{DynamicResource Fluent.Ribbon.Brushes.GalleryItem.MouseOver}" Visibility="Collapsed" d:LayoutOverrides="Width, Height" />
      <Border x:Name="selectedBorder" Background="{DynamicResource Fluent.Ribbon.Brushes.GalleryItem.Selected}" Visibility="Collapsed" d:LayoutOverrides="Width, Height" />
      <ContentPresenter x:Name="contentPresenter" Margin="1" Opacity="1" />
      <Border x:Name="pressedBorder" Background="{DynamicResource Fluent.Ribbon.Brushes.GalleryItem.Pressed}" Visibility="Collapsed" d:LayoutOverrides="Width, Height" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="contentPresenter" Property="Opacity" Value="0.5" />
      </Trigger>
      <Trigger Property="IsSelected" Value="True">
        <Setter TargetName="selectedBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="hoverBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="pressedBorder" Property="Visibility" Value="Visible" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="GalleryItemStyle" TargetType="{x:Type Fluent:GalleryItem}">
    <Setter Property="Template" Value="{DynamicResource GalleryItemControlTemplate}" />
  </Style>
  <ControlTemplate x:Key="ComboBoxItemTemplate" TargetType="{x:Type ComboBoxItem}">
    <Grid Background="Transparent">
      <Grid Margin="0,0.5" Background="{TemplateBinding Background}">
        <Border x:Name="ItemBackground" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" IsHitTestVisible="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        <ContentPresenter x:Name="contentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextElement.Foreground="{TemplateBinding Foreground}" />
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsSelected" Value="True">
        <Setter TargetName="ItemBackground" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="ItemBackground" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="contentPresenter" Property="Opacity" Value="0.5" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
    <Setter Property="Padding" Value="3" />
    <Setter Property="Template" Value="{DynamicResource ComboBoxItemTemplate}" />
  </Style>
  <ControlTemplate x:Key="InRibbonGalleryToggleButtonControlTemplate" TargetType="{x:Type Fluent:ToggleButton}">
    <Border x:Name="border" Height="Auto" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Background="Transparent" BorderBrush="Transparent" BorderThickness="1">
      <Grid Height="Auto">
        <StackPanel x:Name="stackPanel" Width="Auto" Orientation="Vertical">
          <ContentPresenter x:Name="iconImage" Width="32" Height="32" Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" SnapsToDevicePixels="True" />
          <Fluent:TwoLineLabel x:Name="controlLabel" Margin="2,-2,2,2" HorizontalAlignment="Center" VerticalAlignment="Stretch" HasGlyph="True" Style="{DynamicResource TwoLineLabelStyle}" Text="{TemplateBinding Header}" />
        </StackPanel>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="iconImage" Property="Content" Value="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" />
        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
        <Setter TargetName="controlLabel" Property="Text" Value="" />
        <Setter TargetName="iconImage" Property="Width" Value="16" />
        <Setter TargetName="iconImage" Property="Height" Value="16" />
        <Setter TargetName="iconImage" Property="Margin" Value="1,2,0,2" />
        <Setter TargetName="controlLabel" Property="Margin" Value="-2,0,2,2" />
        <Setter TargetName="controlLabel" Property="Width" Value="10" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="iconImage" Property="Content" Value="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" />
        <Setter TargetName="stackPanel" Property="Width" Value="Auto" />
        <Setter TargetName="iconImage" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
        <Setter TargetName="controlLabel" Property="Margin" Value="2,-2,2,2" />
        <Setter TargetName="border" Property="VerticalAlignment" Value="Stretch" />
        <Setter TargetName="iconImage" Property="Width" Value="16" />
        <Setter TargetName="iconImage" Property="Height" Value="16" />
        <Setter TargetName="iconImage" Property="Margin" Value="1,2,2,2" />
        <Setter TargetName="controlLabel" Property="VerticalAlignment" Value="Top" />
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsChecked" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="InRibbonGalleryButton" TargetType="{x:Type Fluent:ToggleButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:ToggleButton}">
          <Border x:Name="border" Background="{DynamicResource WhiteBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="1,1,1,1">
            <Grid x:Name="grid">
              <Path Width="7" Height="1" Margin="0,6,0,0" HorizontalAlignment="Center" VerticalAlignment="Top" Data="M0,0L1,0" Fill="{DynamicResource WhiteBrush}" Stretch="Fill" Stroke="{DynamicResource BlackBrush}" />
              <Path Width="5" Height="3" Margin="0,8,0,0" HorizontalAlignment="Center" VerticalAlignment="Top" Data="M0,0L1,1 2,0z" Fill="{DynamicResource BlackBrush}" Stretch="Fill" Stroke="{DynamicResource BlackBrush}" StrokeThickness="0" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="grid" Property="Opacity" Value="0.5" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="IsPressed" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
            </MultiTrigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="InRibbonGalleryRepeatButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border x:Name="border" Background="{DynamicResource WhiteBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="1">
            <ContentPresenter x:Name="contentPresenter" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="contentPresenter" Property="Opacity" Value="0.5" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="IsPressed" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
            </MultiTrigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="BackstageTabItemStyle" TargetType="{x:Type Fluent:BackstageTabItem}">
    <Setter Property="Template" Value="{DynamicResource BackstageTabItemControlTemplate}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" />
    <Setter Property="Height" Value="38" />
    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:BackstageTabControl}}}" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="Fluent:RibbonProperties.AppTheme" Value="{DynamicResource Fluent.Ribbon.AppTheme}" />
    <Style.Triggers>
      <Trigger Property="Fluent:RibbonProperties.AppTheme" Value="BaseLight">
        <Setter Property="Fluent:RibbonProperties.MouseOverBackground">
          <Setter.Value>
            <SolidColorBrush Opacity="0.2" Color="{DynamicResource BlackColor}" />
          </Setter.Value>
        </Setter>
        <Setter Property="Fluent:RibbonProperties.IsSelectedBackground">
          <Setter.Value>
            <SolidColorBrush Opacity="0.2" Color="{DynamicResource WhiteColor}" />
          </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.IdealForegroundColorBrush}" />
      </Trigger>
      <Trigger Property="Fluent:RibbonProperties.AppTheme" Value="BaseDark">
        <Setter Property="Fluent:RibbonProperties.MouseOverBackground" Value="{DynamicResource Fluent.Ribbon.Brushes.AccentBaseColorBrush}" />
        <Setter Property="Fluent:RibbonProperties.IsSelectedBackground" Value="{DynamicResource Fluent.Ribbon.Brushes.AccentColorBrush80}" />
        <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="ButtonBackstageControlTemplate" TargetType="{x:Type Fluent:Button}">
    <Grid x:Name="grid">
      <Border x:Name="border" Margin="0" Background="Transparent" BorderBrush="{DynamicResource GrayBrush6}" BorderThickness="1">
        <StackPanel x:Name="stackPanel" Margin="2">
          <ContentPresenter x:Name="iconImage" Width="32" Height="32" Margin="9,9,9,0" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" SnapsToDevicePixels="True" />
          <Fluent:TwoLineLabel x:Name="twoLineLabel" Margin="7,7,7,5" VerticalAlignment="Center" Text="{TemplateBinding Header}" />
        </StackPanel>
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="twoLineLabel" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="iconImage" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="stackPanel" Property="HorizontalAlignment" Value="Center" />
        <Setter TargetName="stackPanel" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="twoLineLabel" Property="Margin" Value="2" />
        <Setter TargetName="grid" Property="Width" Value="Auto" />
        <Setter TargetName="grid" Property="Height" Value="Auto" />
        <Setter TargetName="twoLineLabel" Property="HorizontalAlignment" Value="Center" />
        <Setter TargetName="twoLineLabel" Property="HasTwoLines" Value="False" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="stackPanel" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="twoLineLabel" Property="Margin" Value="7,0" />
        <Setter TargetName="iconImage" Property="Margin" Value="9,2,9,0" />
        <Setter TargetName="grid" Property="Width" Value="Auto" />
        <Setter TargetName="grid" Property="Height" Value="Auto" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Control.Disabled.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ToggleButtonBackstageControlTemplate" TargetType="{x:Type Fluent:ToggleButton}">
    <Border x:Name="border" Margin="0" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" BorderBrush="{DynamicResource GrayBrush6}" BorderThickness="1">
      <StackPanel x:Name="stackPanel">
        <ContentPresenter x:Name="iconImage" Width="32" Height="32" Margin="9,9,9,0" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" SnapsToDevicePixels="True" />
        <Fluent:TwoLineLabel x:Name="twoLineLabel" Margin="7,7,7,5" VerticalAlignment="Center" Text="{TemplateBinding Header}" />
      </StackPanel>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="twoLineLabel" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="iconImage" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="stackPanel" Property="HorizontalAlignment" Value="Center" />
        <Setter TargetName="stackPanel" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="twoLineLabel" Property="Margin" Value="2" />
        <Setter TargetName="twoLineLabel" Property="HorizontalAlignment" Value="Center" />
        <Setter TargetName="twoLineLabel" Property="HasTwoLines" Value="False" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="stackPanel" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="twoLineLabel" Property="Margin" Value="7,0" />
        <Setter TargetName="iconImage" Property="Margin" Value="9,2,9,0" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.HighlightBrush}" />
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="DropDownButtonBackstageControlTemplate" TargetType="{x:Type Fluent:DropDownButton}">
    <Grid>
      <Border x:Name="PART_ButtonBorder" Margin="0" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="1">
        <StackPanel x:Name="stackPanel" Margin="0">
          <ContentPresenter x:Name="iconImage" Width="32" Height="32" Margin="7,7,7,0" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" SnapsToDevicePixels="True" />
          <Fluent:TwoLineLabel x:Name="twoLineLabel" Margin="5,5,5,3" VerticalAlignment="Center" HasGlyph="True" Text="{TemplateBinding Header}" />
        </StackPanel>
      </Border>
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0,0,-4,0" VerticalAlignment="Top" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
        <Grid Name="DropDown" Margin="0" VerticalAlignment="Top" SnapsToDevicePixels="True">
          <Border x:Name="PART_DropDownBorder" MinWidth="{TemplateBinding ActualWidth}" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" CornerRadius="1" SnapsToDevicePixels="True">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top">
              <Border Width="Auto" Height="Auto" VerticalAlignment="Top" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" CornerRadius="1" />
              <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Rectangle Grid.RowSpan="2" Width="1" Height="Auto" Margin="24,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Stretch" Fill="{x:Null}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" Visibility="Visible" />
                <ScrollViewer MaxHeight="{TemplateBinding MaxDropDownHeight}" Margin="1" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Auto" SnapsToDevicePixels="True">
                  <StackPanel x:Name="PART_MenuPanel" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" Orientation="Vertical" />
                </ScrollViewer>
                <Border x:Name="resizeBorder" Grid.Row="1" Height="11" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgoundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0,1,0,0" CornerRadius="0,0,1,1">
                  <Grid>
                    <Thumb x:Name="PART_ResizeVerticalThumb" Width="Auto" Height="10" Margin="0,0,0,-90" HorizontalAlignment="Stretch" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                    <Thumb x:Name="PART_ResizeBothThumb" Width="10" Height="10" Margin="0,0,0,-90" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                  </Grid>
                </Border>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ResizeMode" Value="None">
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Both">
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Vertical">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="twoLineLabel" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Control.Disabled.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
      </Trigger>
      <Trigger Property="IsDropDownOpen" Value="True">
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ComboBoxItemBackstageControlTemplate" TargetType="{x:Type ComboBoxItem}">
    <Grid HorizontalAlignment="Stretch" Background="Transparent">
      <Border x:Name="hoverBorder" Background="Transparent">
        <ContentPresenter x:Name="contentPresenter" Margin="1" Opacity="1" />
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="contentPresenter" Property="Opacity" Value="0.5" />
      </Trigger>
      <Trigger Property="IsSelected" Value="True">
        <Setter TargetName="hoverBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="hoverBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="MetroComboBoxItemBackstageStyle" TargetType="{x:Type ComboBoxItem}">
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="MinHeight" Value="40" />
    <Setter Property="Template" Value="{DynamicResource ComboBoxItemBackstageControlTemplate}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" />
  </Style>
  <Style x:Key="InnerBackstageSeparatorTabItemStyle" TargetType="{x:Type Fluent:SeparatorTabItem}">
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.AccentBaseColorBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:SeparatorTabItem}">
          <Grid Margin="0,0,10,0">
            <TextBlock Margin="0,5" VerticalAlignment="Center" FontFamily="Segoe UI Light, Lucida Sans Unicode, Verdana" FontSize="17" Text="{TemplateBinding Header}" TextWrapping="Wrap" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="InnerBackstageTabControlItem" TargetType="{x:Type TabItem}">
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.IdealForegroundColorBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
          <Grid Margin="0,3" Background="Transparent">
            <Border x:Name="border" Margin="0" Background="Transparent" BorderBrush="Transparent" BorderThickness="1">
              <ContentPresenter Margin="5,5,50,5" ContentSource="Header" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Selector.IsSelected" Value="True">
              <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="Selector.IsSelected" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="InnerBackstageTabControlStyle" TargetType="{x:Type TabControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabControl}">
          <ControlTemplate.Resources>
            <Style BasedOn="{StaticResource InnerBackstageSeparatorTabItemStyle}" TargetType="{x:Type Fluent:SeparatorTabItem}" />
            <Style BasedOn="{StaticResource InnerBackstageTabControlItem}" TargetType="{x:Type TabItem}" />
          </ControlTemplate.Resources>
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Border Margin="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{DynamicResource GrayBrush7}" BorderThickness="0,0,1,0" />
            <StackPanel Grid.Column="0" Margin="0" HorizontalAlignment="Left" VerticalAlignment="Top" IsItemsHost="True" />
            <ContentPresenter x:Name="PART_SelectedContentHost" Grid.Column="1" Margin="0" VerticalAlignment="Stretch" ContentSource="SelectedContent" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="BackstageButtonStyle" TargetType="{x:Type Fluent:Button}">
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" />
    <Setter Property="Height" Value="38" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="Template" Value="{DynamicResource BackstageButtonControlTemplate}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.IdealForegroundColorBrush}" />
    <Setter Property="Fluent:RibbonProperties.AppTheme" Value="{DynamicResource Fluent.Ribbon.AppTheme}" />
    <Style.Triggers>
      <Trigger Property="Fluent:RibbonProperties.AppTheme" Value="BaseLight">
        <Setter Property="Background">
          <Setter.Value>
            <SolidColorBrush Opacity="0.2" Color="{DynamicResource BlackColor}" />
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="Fluent:RibbonProperties.AppTheme" Value="BaseDark">
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.AccentBaseColorBrush}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="BackstageBackButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Height" Value="48" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Template" Value="{DynamicResource BackstageBackButtonTemplate}" />
    <Setter Property="Fluent:RibbonProperties.AppTheme" Value="{DynamicResource Fluent.Ribbon.AppTheme}" />
    <Style.Triggers>
      <Trigger Property="Fluent:RibbonProperties.AppTheme" Value="BaseLight">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteBrush}" />
      </Trigger>
      <Trigger Property="Fluent:RibbonProperties.AppTheme" Value="BaseDark">
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.AccentBaseColorBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="BackstageSeparatorTabItemStyle" TargetType="{x:Type Fluent:SeparatorTabItem}">
    <Setter Property="Margin" Value="25,10,20,10" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:SeparatorTabItem}">
          <StackPanel>
            <TextBlock x:Name="header" Margin="10,5" VerticalAlignment="Center" FontSize="14" FontWeight="SemiBold" Foreground="{DynamicResource Fluent.Ribbon.Brushes.IdealForegroundColorBrush}" Text="{TemplateBinding Header}" TextWrapping="Wrap" Visibility="Visible" />
            <Line Height="1" MinWidth="75" Stretch="Uniform" Stroke="{DynamicResource HighTransparentWhiteBrush}" X2="1" />
          </StackPanel>
          <ControlTemplate.Triggers>
            <Trigger Property="HasHeader" Value="False">
              <Setter TargetName="header" Property="Visibility" Value="Collapsed" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RibbonStartScreenStyle" BasedOn="{StaticResource RibbonBackstageStyle}" TargetType="{x:Type Fluent:StartScreen}">
    <Setter Property="Template" Value="{x:Null}" />
    <Setter Property="HideAnimationDuration" Value="0" />
    <Setter Property="HideContextTabsOnOpen" Value="True" />
    <Setter Property="IsOpenAnimationEnabled" Value="False" />
    <Setter Property="Fluent:KeyTip.Keys" Value="{x:Null}" />
  </Style>
  <Style x:Key="RibbonSeparatorStyle" TargetType="{x:Type Separator}">
    <Setter Property="Margin" Value="4,0,4,0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Separator">
          <Rectangle Width="1" VerticalAlignment="Stretch" Stroke="{DynamicResource Fluent.Ribbon.Brushes.GroupSeparator.Background}" StrokeThickness="1" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RibbonToolBarStyle" TargetType="{x:Type Fluent:RibbonToolBar}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="SeparatorStyle">
      <Setter.Value>
        <Style BasedOn="{StaticResource RibbonSeparatorStyle}" TargetType="{x:Type Separator}">
          <Setter Property="Margin" Value="4" />
        </Style>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="RibbonToolBarControlGroupTemplate" TargetType="{x:Type Fluent:RibbonToolBarControlGroup}">
    <StackPanel Orientation="Horizontal">
      <Separator x:Name="separatorLeft" Style="{DynamicResource RibbonSeparatorStyle}" Visibility="Collapsed" />
      <StackPanel IsItemsHost="true" Orientation="Horizontal" />
      <Separator x:Name="separatorRight" Style="{DynamicResource RibbonSeparatorStyle}" Visibility="Collapsed" />
    </StackPanel>
    <ControlTemplate.Triggers>
      <Trigger Property="IsLastInRow" Value="False">
        <Setter TargetName="separatorRight" Property="Visibility" Value="Visible" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="{x:Type Fluent:StatusBar}" TargetType="{x:Type Fluent:StatusBar}">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Height" Value="Auto" />
    <Setter Property="Margin" Value="0,0,0,-1" />
    <Setter Property="MinHeight" Value="23" />
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.AccentBaseColorBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:StatusBar}">
          <ControlTemplate.Resources>
            <Style x:Key="{x:Static StatusBar.SeparatorStyleKey}" TargetType="{x:Type Separator}">
              <Setter Property="OverridesDefaultStyle" Value="True" />
              <Setter Property="SnapsToDevicePixels" Value="True" />
              <Setter Property="Template">
                <Setter.Value>
                  <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Width="10" Background="Transparent" BorderBrush="Transparent" />
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
          </ControlTemplate.Resources>
          <Border Height="Auto" Background="{TemplateBinding Background}" BorderThickness="0">
            <ItemsPresenter x:Name="itemsPresenter" Height="Auto" />
          </Border>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding ResizeMode, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Value="CanResizeWithGrip">
              <Setter TargetName="itemsPresenter" Property="Margin" Value="0,0,16,0" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <Fluent:StatusBarPanel Height="Auto" Margin="10,0,10,0" VerticalAlignment="Stretch" IsItemsHost="True" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="RibbonStatusBarItemStyle" TargetType="{x:Type Fluent:StatusBarItem}">
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.IdealForegroundColorBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:StatusBarItem}">
          <ContentPresenter Margin="{TemplateBinding Padding}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.IdealForegroundDisabledBrush}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="RibbonStatusBarContextMenuItemControlTemplate" TargetType="{x:Type Fluent:StatusBarMenuItem}">
    <Grid Width="Auto" Height="Auto" Background="Transparent">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="25" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Border x:Name="border" Grid.Column="0" Grid.ColumnSpan="3" Width="Auto" Margin="0" HorizontalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" Visibility="Collapsed" />
      <TextBlock x:Name="textBlock" Grid.Column="1" Width="Auto" Height="Auto" Margin="5,3,3,3" VerticalAlignment="Center" Text="{Binding StatusBarItem.Title, RelativeSource={RelativeSource TemplatedParent}}" TextTrimming="CharacterEllipsis" />
      <Image x:Name="image" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True" Source="{DynamicResource MenuCheckedImage}" Stretch="None" Visibility="Collapsed" />
      <Image x:Name="iconImage" Width="Auto" Margin="3,2,2,2" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True" Source="{TemplateBinding Icon}" />
      <TextBlock Grid.Column="3" Width="Auto" Height="Auto" Margin="9,3,3,3" VerticalAlignment="Center" Text="{Binding StatusBarItem.Value, RelativeSource={RelativeSource TemplatedParent}}" TextTrimming="CharacterEllipsis" />
      <Path x:Name="path" Grid.Column="3" Width="4" Height="6" Margin="1,0,4,0" HorizontalAlignment="Right" Data="M0,0L1,1 0,2z" Fill="{DynamicResource Fluent.Ribbon.MenuItem.SubMenu.Arrow.Fill}" Stretch="Fill" Stroke="{x:Null}" />
    </Grid>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Icon" Value="{x:Null}" />
          <Condition Property="IsChecked" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="image" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="HasItems" Value="False">
        <Setter TargetName="path" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsHighlighted" Value="True" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Visibility" Value="Visible" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border Name="Border" Margin="0" Background="{DynamicResource Fluent.Ribbon.Brushes.ScrollButton.Default.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.ScrollButton.Default.BorderBrush}" BorderThickness="0">
            <Path x:Name="path" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Fill="{TemplateBinding Foreground}" />
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="IsPressed" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.BorderBrush}" />
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Background}" />
            </MultiTrigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="path" Property="Opacity" Value="0.5" />
              <Setter TargetName="Border" Property="Background" Value="Transparent" />
              <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="IsTabStop" Value="false" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border x:Name="border" Background="{DynamicResource Fluent.Ribbon.Brushes.ScrollThumb.Default.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.ScrollThumb.Default.BorderBrush}" BorderThickness="0" />
          <ControlTemplate.Triggers>
            <Trigger Property="IsDragging" Value="True">
              <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="VerticalScrollBarLineButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border Name="Border" Margin="0" Background="Transparent" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.ScrollButton.Default.BorderBrush}" BorderThickness="0" CornerRadius="6,6,0,0">
            <Path x:Name="path" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Fill="{TemplateBinding Foreground}" />
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="IsPressed" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
              <Setter TargetName="Border" Property="Background" Value="Transparent" />
            </MultiTrigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
              <Setter TargetName="Border" Property="Background" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="path" Property="Opacity" Value="0.5" />
              <Setter TargetName="Border" Property="Background" Value="Transparent" />
              <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="VerticalScrollBarLineButtonDown" TargetType="{x:Type RepeatButton}">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border Name="Border" Margin="0" Background="Transparent" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.ScrollButton.Default.BorderBrush}" BorderThickness="0" CornerRadius="0,0,6,6">
            <Path x:Name="path" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Fill="{TemplateBinding Foreground}" />
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="IsPressed" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
              <Setter TargetName="Border" Property="Background" Value="Transparent" />
            </MultiTrigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
              <Setter TargetName="Border" Property="Background" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="path" Property="Opacity" Value="0.5" />
              <Setter TargetName="Border" Property="Background" Value="Transparent" />
              <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="VerticalScrollBarThumb" TargetType="{x:Type Thumb}">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="IsTabStop" Value="false" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border x:Name="border" Margin="1,0,1,0" Background="#C6727171" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.ScrollThumb.Default.BorderBrush}" BorderThickness="0" CornerRadius="5" />
          <ControlTemplate.Triggers>
            <Trigger Property="IsDragging" Value="True">
              <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="border" Property="Background" Value="#C6727171" />
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
    <Grid Margin="3,0,3,0">
      <Grid.RowDefinitions>
        <RowDefinition MaxHeight="18" />
        <RowDefinition Height="0.00001*" />
        <RowDefinition MaxHeight="18" />
      </Grid.RowDefinitions>
      <Border x:Name="PART_Background" Grid.RowSpan="3" Background="Transparent" CornerRadius="6" />
      <RepeatButton x:Name="repeatButton" Grid.Row="0" Height="17" Margin="1,1,1,0" VerticalAlignment="Top" Background="{DynamicResource WhiteBrush}" Command="ScrollBar.LineUpCommand" Content="M 0 4 L 8 4 L 4 0 Z" Style="{DynamicResource VerticalScrollBarLineButton}" Visibility="Hidden" />
      <Track Name="PART_Track" Grid.Row="1" Margin="4,0,0,0" IsDirectionReversed="true" ViewportSize="{TemplateBinding ViewportSize}">
        <Track.Resources>
          <!--
            Set the Thumb's minimum height to 50.
            The Thumb's minimum height is half the
            value of VerticalScrollBarButtonHeightKey.
          -->
          <system:Double x:Key="{x:Static SystemParameters.VerticalScrollBarButtonHeightKey}">
            36
          </system:Double>
        </Track.Resources>
        <Track.DecreaseRepeatButton>
          <RepeatButton Command="ScrollBar.PageUpCommand" Style="{DynamicResource ScrollBarPageButton}" />
        </Track.DecreaseRepeatButton>
        <Track.Thumb>
          <Thumb Margin="1,0,1,0" RenderTransformOrigin="0.5,0.5" Style="{DynamicResource VerticalScrollBarThumb}" />
        </Track.Thumb>
        <Track.IncreaseRepeatButton>
          <RepeatButton Command="ScrollBar.PageDownCommand" Style="{DynamicResource ScrollBarPageButton}" />
        </Track.IncreaseRepeatButton>
      </Track>
      <RepeatButton x:Name="repeatButton1" Grid.Row="3" Height="17" Margin="1,0,1,1" Background="{DynamicResource WhiteBrush}" Command="ScrollBar.LineDownCommand" Content="M 0 0 L 4 4 L 8 0 Z" Style="{DynamicResource VerticalScrollBarLineButtonDown}" Visibility="Hidden" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="repeatButton" Property="Visibility" Value="Visible" />
        <Setter TargetName="repeatButton1" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_Background" Property="Background" Value="#4E434141" />
        <Setter TargetName="PART_Track" Property="Margin" Value="0" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition MaxWidth="18" />
        <ColumnDefinition Width="0.00001*" />
        <ColumnDefinition MaxWidth="18" />
      </Grid.ColumnDefinitions>
      <Border Grid.ColumnSpan="3" Margin="0" Background="{DynamicResource Fluent.Ribbon.Brushes.ScrollBar.Background}" CornerRadius="0" />
      <RepeatButton x:Name="repeatButton" Grid.Column="0" Width="17" Margin="1,1,0,1" Background="{DynamicResource WhiteBrush}" Command="ScrollBar.LineLeftCommand" Content="M 4 0 L 4 8 L 0 4 Z" Style="{DynamicResource ScrollBarLineButton}" />
      <Track Name="PART_Track" Grid.Column="1" Margin="0,1,0,1" IsDirectionReversed="False" ViewportSize="{TemplateBinding ViewportSize}">
        <Track.Resources>
          <!--
            Set the Thumb's minimum height to 50.
            The Thumb's minimum height is half the
            value of VerticalScrollBarButtonHeightKey.
          -->
          <system:Double x:Key="{x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}">
            36
          </system:Double>
        </Track.Resources>
        <Track.DecreaseRepeatButton>
          <RepeatButton Command="ScrollBar.PageLeftCommand" Style="{DynamicResource ScrollBarPageButton}" />
        </Track.DecreaseRepeatButton>
        <Track.Thumb>
          <Thumb Margin="0,0,0,0" Style="{DynamicResource ScrollBarThumb}" />
        </Track.Thumb>
        <Track.IncreaseRepeatButton>
          <RepeatButton Command="ScrollBar.PageRightCommand" Style="{DynamicResource ScrollBarPageButton}" />
        </Track.IncreaseRepeatButton>
      </Track>
      <RepeatButton x:Name="repeatButton1" Grid.Column="3" Width="17" Margin="0,1,1,1" Background="{DynamicResource WhiteBrush}" Command="ScrollBar.LineRightCommand" Content="M 0 0 L 4 4 L 0 8 Z" Style="{DynamicResource ScrollBarLineButton}" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="repeatButton" Property="Background" Value="{x:Null}" />
        <Setter TargetName="repeatButton1" Property="Background" Value="{x:Null}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style TargetType="ScrollBar">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
    <Setter Property="Background" Value="Transparent" />
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Horizontal">
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Template" Value="{DynamicResource HorizontalScrollBar}" />
        <Setter Property="Height" Value="17" />
      </Trigger>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Template" Value="{DynamicResource VerticalScrollBar}" />
        <Setter Property="Width" Value="12" />
      </Trigger>
      <!--<MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Orientation" Value="Vertical" />
          <Condition Property="IsMouseOver" Value="True" />
        </MultiTrigger.Conditions>
        <MultiTrigger.Setters>
          <Setter Property="Width" Value="12" />
        </MultiTrigger.Setters>
      </MultiTrigger>-->
    </Style.Triggers>
  </Style>
  <Style x:Key="ScrollBarWhite" TargetType="ScrollBar">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Horizontal">
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Template" Value="{DynamicResource HorizontalScrollBar}" />
        <Setter Property="Height" Value="17" />
      </Trigger>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Template" Value="{DynamicResource VerticalScrollBar}" />
        <Setter Property="Width" Value="17" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type Fluent:TextBox}">
    <Setter Property="CaretBrush" Value="{DynamicResource BlackBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:TextBox}">
          <Border Width="Auto" Height="22" Background="Transparent">
            <Grid Width="Auto" Height="Auto" Background="Transparent">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
              </Grid.ColumnDefinitions>
              <StackPanel x:Name="stackPanel" Grid.ColumnSpan="1" Margin="0,0,4,0" HorizontalAlignment="Left" Orientation="Horizontal">
                <ContentPresenter x:Name="iconImage" Width="16" Height="16" Margin="3,0,0,0" VerticalAlignment="Center" Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" />
                <TextBlock x:Name="textBlock" Margin="5,0,0,0" VerticalAlignment="Center" Text="{TemplateBinding Header}" TextWrapping="Wrap" />
              </StackPanel>
              <Border x:Name="PART_ContentBorder" Grid.Column="1" Grid.ColumnSpan="1" Width="{TemplateBinding InputWidth}" Height="Auto" HorizontalAlignment="Right" Background="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Background}" BorderBrush="{DynamicResource GrayBrush2}" BorderThickness="1,1,1,1">
                <ScrollViewer x:Name="PART_ContentHost" Margin="0" />
              </Border>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
              <Setter TargetName="iconImage" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="InputWidth" Value="NaN">
              <Setter TargetName="PART_ContentBorder" Property="HorizontalAlignment" Value="Stretch" />
            </Trigger>
            <Trigger Property="Size" Value="Middle">
              <Setter TargetName="textBlock" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="Size" Value="Small">
              <Setter TargetName="stackPanel" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="PART_ContentBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.Background}" />
              <Setter TargetName="PART_ContentBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.BorderBrush}" />
              <Setter TargetName="PART_ContentHost" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.Background}" />
              <Setter TargetName="iconImage" Property="Opacity" Value="0.5" />
              <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
              <Setter TargetName="iconImage" Property="Effect">
                <Setter.Value>
                  <Fluent:GrayscaleEffect />
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="PART_ContentBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.BorderBrush}" />
              <Setter TargetName="PART_ContentHost" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
              <Setter TargetName="PART_ContentBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
              <Setter TargetName="PART_ContentBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.BorderBrush}" />
              <Setter TargetName="PART_ContentHost" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
              <Setter TargetName="PART_ContentBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" />
  </Style>
  <ControlTemplate x:Key="SpinnerButtonControlTemplate" TargetType="{x:Type RepeatButton}">
    <Border x:Name="border" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Transparent" BorderBrush="Transparent" BorderThickness="1">
      <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" />
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="False" />
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="contentPresenter" Property="Opacity" Value="0.5" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsPressed" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="SpinnerButtonStyle" TargetType="{x:Type RepeatButton}">
    <Setter Property="Template" Value="{DynamicResource SpinnerButtonControlTemplate}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
  </Style>
  <Style x:Key="SpinnerStyle" TargetType="{x:Type Fluent:Spinner}">
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:Spinner}">
          <Grid Width="Auto" Height="22" Background="Transparent">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <StackPanel x:Name="stackPanel" Grid.ColumnSpan="1" Margin="0,0,3,0" HorizontalAlignment="Left" Orientation="Horizontal">
              <ContentPresenter x:Name="iconImage" Width="16" Height="16" Margin="4,0,0,0" VerticalAlignment="Center" Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" />
              <TextBlock x:Name="textBlock" Margin="5,0,4,0" VerticalAlignment="Center" Text="{TemplateBinding Header}" TextWrapping="Wrap" />
            </StackPanel>
            <Border x:Name="PART_ContentBorder" Grid.Column="1" Grid.ColumnSpan="1" Width="{TemplateBinding InputWidth}" Height="22" HorizontalAlignment="Right" Background="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.TextBox.BorderBrush}" BorderThickness="1">
              <Grid Grid.Column="1" Grid.ColumnSpan="1">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="17" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <TextBox x:Name="PART_TextBox" Grid.RowSpan="2" Grid.Column="0" Margin="0" Padding="2,0,2,0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Background="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Background}" BorderThickness="0" Foreground="{TemplateBinding Foreground}" />
                <Path x:Name="path" Grid.RowSpan="2" Grid.Column="1" Width="1" Margin="0,-1,0,-1" HorizontalAlignment="Left" Data="M0,0L0,1" Fill="{DynamicResource BlackBrush}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.BorderBrush}" StrokeThickness="1" Visibility="Collapsed" />
                <Path x:Name="path1" Grid.RowSpan="1" Grid.Column="1" Width="Auto" Height="1" Margin="0,0,-1,0" HorizontalAlignment="Left" VerticalAlignment="Bottom" Data="M0,0L1,0" Fill="{DynamicResource BlackBrush}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.BorderBrush}" StrokeThickness="1" Visibility="Collapsed" />
                <RepeatButton x:Name="PART_ButtonUp" Grid.Row="0" Grid.Column="1" HorizontalAlignment="Stretch" RenderTransformOrigin="0,0.5" Style="{DynamicResource SpinnerButtonStyle}">
                  <Path Width="5" Height="3" Margin="1,2,0,1" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L1,-1 2,0" Fill="{DynamicResource BlackBrush}" RenderOptions.EdgeMode="Aliased" Stretch="Fill" Stroke="{DynamicResource BlackBrush}" StrokeThickness="0" />
                </RepeatButton>
                <RepeatButton x:Name="PART_ButtonDown" Grid.Row="1" Grid.Column="1" Style="{DynamicResource SpinnerButtonStyle}">
                  <Path Width="5" Height="3" Margin="1,-1,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L1,1 2,0" Fill="{DynamicResource BlackBrush}" RenderOptions.EdgeMode="Aliased" Stretch="Fill" Stroke="{DynamicResource BlackBrush}" StrokeThickness="0" />
                </RepeatButton>
              </Grid>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
              <Setter TargetName="iconImage" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="InputWidth" Value="NaN">
              <Setter TargetName="PART_ContentBorder" Property="HorizontalAlignment" Value="Stretch" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="PART_TextBox" Property="IsEnabled" Value="False" />
              <Setter TargetName="PART_ContentBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.Background}" />
              <Setter TargetName="PART_ContentBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.BorderBrush}" />
              <Setter TargetName="PART_TextBox" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.Background}" />
              <Setter TargetName="iconImage" Property="Opacity" Value="0.5" />
              <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
              <Setter TargetName="iconImage" Property="Effect">
                <Setter.Value>
                  <Fluent:GrayscaleEffect />
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="Size" Value="Middle">
              <Setter TargetName="textBlock" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="PART_ContentBorder" Property="HorizontalAlignment" Value="Stretch" />
            </Trigger>
            <Trigger Property="Size" Value="Small">
              <Setter TargetName="stackPanel" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="PART_ContentBorder" Property="HorizontalAlignment" Value="Stretch" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="path" Property="Visibility" Value="Visible" />
              <Setter TargetName="path1" Property="Visibility" Value="Visible" />
              <Setter TargetName="PART_ContentBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.BorderBrush}" />
              <Setter TargetName="PART_ContentBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
              <Setter TargetName="PART_TextBox" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="RibbonComboButtonControlTemplate" TargetType="{x:Type Fluent:ToggleButton}">
    <Border x:Name="border" Height="Auto" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Background="{DynamicResource WhiteBrush}" BorderBrush="{DynamicResource GrayBrush2}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0">
      <Grid Height="Auto" HorizontalAlignment="Right">
        <Rectangle x:Name="rectangle" Fill="{DynamicResource WhiteBrush}" StrokeThickness="0" Visibility="Collapsed" />
        <Path x:Name="path" Width="5" Height="3" Margin="3,0,3,0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L1,1 2,0z" Fill="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" IsHitTestVisible="False" Stretch="Fill" />
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="path" Property="Opacity" Value="0.5" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsPressed" Value="False" />
          <Condition Property="IsChecked" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="rectangle" Property="Fill" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
        <Setter TargetName="rectangle" Property="Visibility" Value="Visible" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="Fluent.Ribbon.ColorGallery.ListBox.ItemContainerStyle" TargetType="{x:Type ListBoxItem}">
    <Setter Property="Padding" Value="{Binding Padding, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBox}}, FallbackValue='2,0,2,0'}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <Grid Background="Transparent">
            <ContentPresenter Width="{Binding ChipWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:ColorGallery}}, FallbackValue=13}" Height="{Binding ChipHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:ColorGallery}}, FallbackValue=13}" Margin="{TemplateBinding Padding}" />
            <Border x:Name="outerBorder" Margin="{TemplateBinding Padding}" BorderThickness="1">
              <Border x:Name="innerBorder" BorderThickness="1" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="outerBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.DarkExtremeHighlightBrush}" />
              <Setter TargetName="innerBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.DarkExtremeHighlightBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="outerBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.DarkExtremeHighlightBrush}" />
              <Setter TargetName="innerBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.ExtremeHighlightBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Content">
        <Trigger.Value>
          <Color />
        </Trigger.Value>
        <Setter Property="Opacity" Value="0" />
        <Setter Property="IsHitTestVisible" Value="False" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <DataTemplate x:Key="Fluent.Ribbon.ColorGallery.ListBox.ItemTemplate">
    <Rectangle Fill="{Binding Converter={x:Static Converters:StaticConverters.ColorToSolidColorBrushValueConverter}}" Stroke="{DynamicResource Fluent.Ribbon.Brushes.ColorGallery.Item.BorderBrush}" />
  </DataTemplate>
  <Style x:Key="ColorGalleryListBox" TargetType="{x:Type ListBox}">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.ColorGallery.Background}" />
    <Setter Property="ItemTemplate" Value="{DynamicResource Fluent.Ribbon.ColorGallery.ListBox.ItemTemplate}" />
    <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.ColorGallery.ListBox.Template.Row1}" />
    <Setter Property="ItemContainerStyle" Value="{DynamicResource Fluent.Ribbon.ColorGallery.ListBox.ItemContainerStyle}" />
  </Style>
  <Style x:Key="HightlightColorGalleryListBox" TargetType="{x:Type ListBox}">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.ColorGallery.Background}" />
    <Setter Property="ItemTemplate" Value="{DynamicResource Fluent.Ribbon.ColorGallery.ListBox.ItemTemplate}" />
    <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.ColorGallery.ListBox.Template.Row0}" />
    <Setter Property="ItemContainerStyle" Value="{DynamicResource Fluent.Ribbon.ColorGallery.ListBox.ItemContainerStyle}" />
  </Style>
  <DataTemplate x:Key="GradientColorCenterDataTemplate">
    <Border Background="{Binding Converter={x:Static Converters:StaticConverters.ColorToSolidColorBrushValueConverter}}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.ColorGallery.Item.BorderBrush}" BorderThickness="1,0,1,0" />
  </DataTemplate>
  <DataTemplate x:Key="GradientColorTopDataTemplate">
    <Border Background="{Binding Converter={x:Static Converters:StaticConverters.ColorToSolidColorBrushValueConverter}}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.ColorGallery.Item.BorderBrush}" BorderThickness="1,1,1,0" />
  </DataTemplate>
  <DataTemplate x:Key="GradientColorBottomDataTemplate">
    <Border Background="{Binding Converter={x:Static Converters:StaticConverters.ColorToSolidColorBrushValueConverter}}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.ColorGallery.Item.BorderBrush}" BorderThickness="1,0,1,1" />
  </DataTemplate>
  <Style x:Key="ColorGalleryGradientListBox" TargetType="{x:Type ListBox}">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.ColorGallery.Background}" />
    <Setter Property="ItemTemplateSelector" Value="{DynamicResource ColorGradientItemTemplateSelect}" />
    <Setter Property="Template" Value="{DynamicResource Fluent.Ribbon.ColorGallery.ListBox.Template.Row0}" />
    <Setter Property="ItemContainerStyle" Value="{DynamicResource Fluent.Ribbon.ColorGallery.ListBox.ItemContainerStyle}" />
  </Style>
  <Style TargetType="{x:Type Fluent:ColorGallery}">
    <Setter Property="ChipWidth" Value="13" />
    <Setter Property="ChipHeight" Value="13" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:ColorGallery}">
          <StackPanel KeyboardNavigation.DirectionalNavigation="Contained">
            <Fluent:MenuItem x:Name="PART_AutomaticColor" Header="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.Automatic, Mode=OneWay}">
              <Fluent:MenuItem.Icon>
                <Rectangle Width="16" Height="16" Margin="-2,0,0,0" Fill="{DynamicResource BlackBrush}" Stroke="{DynamicResource Fluent.Ribbon.Brushes.ColorGallery.Item.BorderBrush}" />
              </Fluent:MenuItem.Icon>
            </Fluent:MenuItem>
            <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
              <StackPanel Margin="0,1,0,1" Background="{TemplateBinding Background}" ClipToBounds="True" KeyboardNavigation.DirectionalNavigation="Contained">
                <Fluent:GroupSeparatorMenuItem x:Name="themeColorsSeparator" Header="Theme Colors" />
                <ListBox x:Name="PART_ThemeColorsListBox" Padding="2" ItemsSource="{Binding ThemeColors, RelativeSource={RelativeSource TemplatedParent}}" KeyboardNavigation.DirectionalNavigation="Contained" Style="{DynamicResource ColorGalleryListBox}" />
                <ListBox x:Name="PART_ThemeGradientColorsListBox" Padding="2,0,2,0" ItemsSource="{Binding ThemeGradients, RelativeSource={RelativeSource TemplatedParent}}" KeyboardNavigation.DirectionalNavigation="Contained" Style="{DynamicResource ColorGalleryGradientListBox}" />
                <Fluent:GroupSeparatorMenuItem x:Name="standardColorsSeparator" Header="Standard Colors" />
                <ListBox x:Name="PART_StandardColorsListBox" Padding="2" ItemsSource="{x:Static Fluent:ColorGallery.StandardThemeColors}" KeyboardNavigation.DirectionalNavigation="Contained" Style="{DynamicResource ColorGalleryListBox}" />
                <ListBox x:Name="PART_StandardGradientColorsListBox" Padding="2,0,2,0" ItemsSource="{Binding StandardGradients, RelativeSource={RelativeSource TemplatedParent}}" KeyboardNavigation.DirectionalNavigation="Contained" Style="{DynamicResource ColorGalleryGradientListBox}" />
                <Fluent:GroupSeparatorMenuItem x:Name="recentColorsSeparator" Header="Recent Colors" />
                <ListBox x:Name="PART_RecentColorsListBox" Padding="2" ItemsSource="{x:Static Fluent:ColorGallery.RecentColors}" KeyboardNavigation.DirectionalNavigation="Contained" Style="{DynamicResource ColorGalleryListBox}" />
              </StackPanel>
            </ScrollViewer>
            <Fluent:MenuItem x:Name="PART_NoColor" Header="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.NoColor, Mode=OneWay}">
              <Fluent:MenuItem.Icon>
                <Rectangle Width="16" Height="16" Margin="-2,0,0,0" Fill="Transparent" Stroke="{DynamicResource Fluent.Ribbon.Brushes.ColorGallery.Item.BorderBrush}" />
              </Fluent:MenuItem.Icon>
            </Fluent:MenuItem>
            <Separator x:Name="separator">
              <Separator.Template>
                <ControlTemplate>
                  <Rectangle Width="Auto" Height="1" Fill="{DynamicResource Fluent.Ribbon.Brushes.Separator.Background}" />
                </ControlTemplate>
              </Separator.Template>
            </Separator>
            <Fluent:MenuItem x:Name="PART_MoreColors" Header="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.MoreColors, Mode=OneWay}" Icon="{DynamicResource MoreColorsIcon}" />
          </StackPanel>
          <ControlTemplate.Triggers>
            <Trigger Property="IsAutomaticColorButtonVisible" Value="False">
              <Setter TargetName="PART_AutomaticColor" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsNoColorButtonVisible" Value="False">
              <Setter TargetName="PART_NoColor" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsMoreColorsButtonVisible" Value="False">
              <Setter TargetName="PART_MoreColors" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="separator" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="Mode" Value="HighlightColors">
              <Setter Property="ChipWidth" Value="26" />
              <Setter Property="ChipHeight" Value="26" />
              <Setter TargetName="themeColorsSeparator" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="standardColorsSeparator" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="recentColorsSeparator" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="PART_ThemeColorsListBox" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="PART_RecentColorsListBox" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="PART_StandardGradientColorsListBox" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="PART_ThemeGradientColorsListBox" Property="Visibility" Value="Collapsed" />
              <Setter Property="Columns" Value="5" />
              <Setter TargetName="PART_StandardColorsListBox" Property="Style" Value="{DynamicResource HightlightColorGalleryListBox}" />
              <Setter TargetName="PART_StandardColorsListBox" Property="ItemsSource" Value="{x:Static Fluent:ColorGallery.HighlightColors}" />
            </Trigger>
            <Trigger Property="Mode" Value="StandardColors">
              <Setter Property="ChipWidth" Value="20" />
              <Setter Property="ChipHeight" Value="20" />
              <Setter TargetName="themeColorsSeparator" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="standardColorsSeparator" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="recentColorsSeparator" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="PART_ThemeColorsListBox" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="PART_RecentColorsListBox" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="PART_StandardColorsListBox" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="PART_ThemeGradientColorsListBox" Property="Visibility" Value="Collapsed" />
              <Setter Property="Columns" Value="5" />
              <Setter Property="StandardColorGridRows" Value="6" />
              <Setter TargetName="PART_StandardGradientColorsListBox" Property="ItemsSource" Value="{x:Static Fluent:ColorGallery.StandardColors}" />
            </Trigger>
            <DataTrigger Binding="{Binding ThemeColors.Count, RelativeSource={RelativeSource Self}}" Value="0">
              <Setter TargetName="themeColorsSeparator" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Count, Source={x:Static Fluent:ColorGallery.RecentColors}}" Value="0">
              <Setter TargetName="recentColorsSeparator" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="SliderThumbControlTemplate" TargetType="{x:Type Thumb}">
    <Grid Margin="2.5,0.5">
      <Border Name="path" Width="3" Height="11" Background="{DynamicResource BlackBrush}">
        <Border Name="hoverborder" />
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="hoverborder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
      </Trigger>
      <Trigger Property="IsDragging" Value="True">
        <Setter TargetName="hoverborder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="SliderRepeatButtonStyle" TargetType="{x:Type RepeatButton}">
    <Setter Property="Width" Value="16" />
    <Setter Property="Height" Value="16" />
    <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
    <Setter Property="Template" Value="{DynamicResource SliderRepeatButtonControlTemplate}" />
  </Style>
  <Style TargetType="{x:Type CalendarItem}">
    <Setter Property="Margin" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CalendarItem}">
          <ControlTemplate.Resources>
            <DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
              <TextBlock Foreground="{DynamicResource Fluent.Ribbon.Brushes.AccentBaseColorBrush}" FontWeight="Normal" FontSize="12" HorizontalAlignment="Center" Margin="0,5,0,5" Text="{Binding}" VerticalAlignment="Center" />
            </DataTemplate>
          </ControlTemplate.Resources>
          <Grid x:Name="PART_Root">
            <Grid.Resources>
              <SolidColorBrush x:Key="DisabledColor" Color="{DynamicResource Gray10}" />
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_DisabledVisual" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="1">
              <Border BorderBrush="#FFFFFFFF" BorderThickness="0" CornerRadius="0">
                <Grid>
                  <Grid.Resources>
                    <ControlTemplate x:Key="PreviousButtonTemplate" TargetType="{x:Type Button}">
                      <Grid Cursor="Hand">
                        <VisualStateManager.VisualStateGroups>
                          <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal" />
                            <VisualState x:Name="MouseOver">
                              <Storyboard>
                                <ColorAnimation Duration="0" To="{DynamicResource Fluent.Ribbon.Colors.AccentBaseColor}" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="path" />
                              </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Disabled">
                              <Storyboard>
                                <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="path" />
                              </Storyboard>
                            </VisualState>
                          </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle Fill="Transparent" Opacity="1" Stretch="Fill" />
                        <Grid>
                          <Path x:Name="path" Data="M288.75,232.25 L288.75,240.625 L283,236.625 z" Fill="{DynamicResource BlackBrush}" HorizontalAlignment="Left" Height="10" Margin="5,-6,0,0" Stretch="Fill" VerticalAlignment="Center" Width="6" />
                        </Grid>
                      </Grid>
                    </ControlTemplate>
                    <ControlTemplate x:Key="NextButtonTemplate" TargetType="{x:Type Button}">
                      <Grid Cursor="Hand">
                        <VisualStateManager.VisualStateGroups>
                          <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal" />
                            <VisualState x:Name="MouseOver">
                              <Storyboard>
                                <ColorAnimation Duration="0" To="{DynamicResource Fluent.Ribbon.Colors.AccentBaseColor}" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="path" />
                              </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Disabled">
                              <Storyboard>
                                <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="path" />
                              </Storyboard>
                            </VisualState>
                          </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle Fill="Transparent" Opacity="1" Stretch="Fill" />
                        <Grid>
                          <Path x:Name="path" Data="M282.875,231.875 L282.875,240.375 L288.625,236 z" Fill="{DynamicResource BlackBrush}" HorizontalAlignment="Right" Height="10" Margin="0,-6,5,0" Stretch="Fill" VerticalAlignment="Center" Width="6" />
                        </Grid>
                      </Grid>
                    </ControlTemplate>
                    <ControlTemplate x:Key="HeaderButtonTemplate" TargetType="{x:Type Button}">
                      <Grid Cursor="Hand">
                        <VisualStateManager.VisualStateGroups>
                          <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal" />
                            <VisualState x:Name="MouseOver">
                              <Storyboard>
                                <DoubleAnimation Duration="0" To=".7" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="buttonContent" />
                              </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Disabled">
                              <Storyboard>
                                <DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="buttonContent" />
                              </Storyboard>
                            </VisualState>
                          </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter x:Name="buttonContent" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" TextElement.Foreground="{DynamicResource BlackBrush}" TextElement.FontFamily="Segoe UI" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,3,1,9" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                      </Grid>
                    </ControlTemplate>
                  </Grid.Resources>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>
                  <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                  </Grid.RowDefinitions>
                  <Grid Grid.Row="0" Grid.ColumnSpan="4" Background="{DynamicResource GrayBrush8}" HorizontalAlignment="Stretch">
                    <Button x:Name="PART_PreviousButton" Grid.Column="0" Focusable="False" HorizontalAlignment="Left" Height="20" Grid.Row="0" Template="{StaticResource PreviousButtonTemplate}" Width="28" />
                    <Button x:Name="PART_HeaderButton" Grid.Column="1" FontWeight="Normal" Focusable="False" FontSize="13" HorizontalAlignment="Center" Grid.Row="0" Template="{StaticResource HeaderButtonTemplate}" VerticalAlignment="Center" />
                    <Button x:Name="PART_NextButton" Grid.Column="2" Focusable="False" HorizontalAlignment="Right" Height="20" Grid.Row="0" Template="{StaticResource NextButtonTemplate}" Width="28" />
                  </Grid>
                  <Grid x:Name="PART_MonthView" Grid.ColumnSpan="3" HorizontalAlignment="Center" Margin="6,6,6,6" Grid.Row="1" Visibility="Visible">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                  </Grid>
                  <Grid x:Name="PART_YearView" Grid.ColumnSpan="3" HorizontalAlignment="Center" Margin="6,6,7,6" Grid.Row="1" Visibility="Hidden">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                  </Grid>
                </Grid>
              </Border>
            </Border>
            <Rectangle x:Name="PART_DisabledVisual" Fill="{StaticResource DisabledColor}" Opacity="0" RadiusY="2" RadiusX="2" Stretch="Fill" Stroke="{StaticResource DisabledColor}" StrokeThickness="1" Visibility="Collapsed" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Visibility" TargetName="PART_DisabledVisual" Value="Visible" />
            </Trigger>
            <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Year">
              <Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden" />
              <Setter Property="Visibility" TargetName="PART_YearView" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding DisplayMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Calendar}}}" Value="Decade">
              <Setter Property="Visibility" TargetName="PART_MonthView" Value="Hidden" />
              <Setter Property="Visibility" TargetName="PART_YearView" Value="Visible" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="CalendarDayButtonStyle" TargetType="{x:Type CalendarDayButton}">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.AccentBaseColorBrush}" />
    <Setter Property="FontSize" Value="12" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="MinWidth" Value="15" />
    <Setter Property="MinHeight" Value="15" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CalendarDayButton">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.1" />
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" To=".5" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" To=".5" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="Opacity" To=".35" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="SelectionStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0" />
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Unselected" />
                <VisualState x:Name="Selected">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To=".75" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="CalendarButtonFocusStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0" />
                </VisualStateGroup.Transitions>
                <VisualState x:Name="CalendarButtonFocused">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FocusVisual" Storyboard.TargetProperty="Visibility" Duration="0">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="CalendarButtonUnfocused">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FocusVisual" Storyboard.TargetProperty="Visibility" Duration="0">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ActiveStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0" />
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Active" />
                <VisualState x:Name="Inactive">
                  <Storyboard>
                    <ColorAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="(ContentControl.Foreground).(GradientBrush.GradientStops)[2].(GradientStop.Color)" To="{DynamicResource Gray8}" Duration="0" />
                    <ColorAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="(ContentControl.Foreground).(GradientBrush.GradientStops)[3].(GradientStop.Color)" To="{DynamicResource Gray8}" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DayStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0" />
                </VisualStateGroup.Transitions>
                <VisualState x:Name="RegularDay" />
                <VisualState x:Name="Today">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="TodayBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="(ContentControl.Foreground).(GradientBrush.GradientStops)[1].(GradientStop.Offset)" To="1" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="(ContentControl.Foreground).(GradientBrush.GradientStops)[2].(GradientStop.Offset)" To="1" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="BlackoutDayStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0" />
                </VisualStateGroup.Transitions>
                <VisualState x:Name="NormalDay" />
                <VisualState x:Name="BlackoutDay">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="BlackoutVisual" Storyboard.TargetProperty="Opacity" To=".2" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="TodayBackground" RadiusX="1" RadiusY="1" Opacity="0" Stroke="{DynamicResource Fluent.Ribbon.Brushes.HighlightBrush}" Fill="Transparent" />
            <Rectangle x:Name="SelectedBackground" RadiusX="1" RadiusY="1" Opacity="0" Fill="{TemplateBinding Background}" />
            <Rectangle x:Name="Background" RadiusX="1" RadiusY="1" Opacity="0" Fill="{TemplateBinding Background}" />
            <ContentControl x:Name="Content" IsTabStop="False" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FontSize="{TemplateBinding FontSize}" Margin="5,1,5,1">
              <ContentControl.Foreground>
                <LinearGradientBrush>
                  <GradientStop Offset="0" Color="{DynamicResource BlackColor}" />
                  <GradientStop Offset="0" Color="{DynamicResource BlackColor}" />
                  <GradientStop Offset="0" Color="{DynamicResource Gray1}" />
                  <GradientStop Offset="1" Color="{DynamicResource Gray1}" />
                </LinearGradientBrush>
              </ContentControl.Foreground>
            </ContentControl>
            <Path x:Name="BlackoutVisual" Opacity="0" Margin="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RenderTransformOrigin="0.5,0.5" Fill="#FF000000" Stretch="Fill" Data="M8.1772461,11.029181 L10.433105,11.029181 L11.700684,12.801641 L12.973633,11.029181 L15.191895,11.029181 L12.844727,13.999395 L15.21875,17.060919 L12.962891,17.060919 L11.673828,15.256231 L10.352539,17.060919 L8.1396484,17.060919 L10.519043,14.042364 z" />
            <Rectangle x:Name="FocusVisual" Visibility="Collapsed" IsHitTestVisible="false" RadiusX="1" RadiusY="1" Stroke="Transparent" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="CalendarButton" x:Key="CalendarButtonStyle">
    <Setter Property="MinWidth" Value="40" />
    <Setter Property="MinHeight" Value="42" />
    <Setter Property="FontSize" Value="10" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="CalendarButton">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.1" />
                </VisualStateGroup.Transitions>
                <VisualState Name="Normal" />
                <VisualState Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="MouseOverBackground" Storyboard.TargetProperty="Opacity" To=".5" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState Name="Pressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" To=".5" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup Name="SelectionStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0" />
                </VisualStateGroup.Transitions>
                <VisualState Name="Unselected" />
                <VisualState Name="Selected">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To=".75" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup Name="ActiveStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0" />
                </VisualStateGroup.Transitions>
                <VisualState Name="Active" />
                <VisualState Name="Inactive">
                  <Storyboard>
                    <ColorAnimation Duration="0" Storyboard.TargetName="NormalText" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" To="{DynamicResource BlackColor}" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup Name="CalendarButtonFocusStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0" />
                </VisualStateGroup.Transitions>
                <VisualState Name="CalendarButtonFocused">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="CalendarButtonFocusVisual" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState Name="CalendarButtonUnfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="SelectedBackground" RadiusX="1" RadiusY="1" Opacity="0">
              <Rectangle.Fill>
                <SolidColorBrush Color="{DynamicResource Fluent.Ribbon.Colors.AccentBaseColor}" />
              </Rectangle.Fill>
            </Rectangle>
            <Rectangle x:Name="MouseOverBackground" RadiusX="1" RadiusY="1" Opacity="0">
              <Rectangle.Fill>
                <SolidColorBrush Color="{DynamicResource Fluent.Ribbon.Colors.AccentBaseColor}" />
              </Rectangle.Fill>
            </Rectangle>
            <Rectangle x:Name="Background" RadiusX="1" RadiusY="1" Opacity="0">
              <Rectangle.Fill>
                <SolidColorBrush Color="{DynamicResource WhiteColor}" />
              </Rectangle.Fill>
            </Rectangle>
            <ContentPresenter x:Name="NormalText" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="1,0,1,1">
              <TextElement.Foreground>
                <SolidColorBrush Color="{DynamicResource BlackColor}" />
              </TextElement.Foreground>
            </ContentPresenter>
            <Rectangle x:Name="CalendarButtonFocusVisual" Visibility="Collapsed" IsHitTestVisible="false" RadiusX="1" RadiusY="1">
              <Rectangle.Stroke>
                <SolidColorBrush Color="{DynamicResource Fluent.Ribbon.Colors.AccentBaseColor}" />
              </Rectangle.Stroke>
            </Rectangle>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" />
  </Style>
  <Style x:Key="RibbonWindowStyle" TargetType="{x:Type Fluent:RibbonWindow}">
    <!--<Setter Property="WindowChrome.WindowChrome">  
        <Setter.Value>  
            <WindowChrome GlassFrameThickness="0,214,0,0" UseAeroCaptionButtons="True" CaptionHeight="33" ResizeBorderThickness="4" CornerRadius="4"
                      NonClientFrameEdges="None" />  
        </Setter.Value>  
    </Setter>-->
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.AccentBaseColorBrush}" />
    <Setter Property="Background" Value="{DynamicResource WhiteBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
    <Setter Property="TitleBackground" Value="{Binding Background, RelativeSource={RelativeSource Self}}" />
    <Setter Property="TitleForeground" Value="{Binding Foreground, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Template" Value="{StaticResource RibbonWindowControlTemplate}" />
    <Setter Property="TitleBarHeight" Value="27" />
  </Style>
  <Style BasedOn="{StaticResource SpinnerStyle}" TargetType="{x:Type Fluent:Spinner}" />
  <Style BasedOn="{StaticResource TwoLineLabelStyle}" TargetType="{x:Type Fluent:TwoLineLabel}" />
  <Style BasedOn="{StaticResource KeyTipStyle}" TargetType="{x:Type Fluent:KeyTip}" />
  <Style BasedOn="{StaticResource ScreenTipStyle}" TargetType="{x:Type Fluent:ScreenTip}" />
  <Style BasedOn="{StaticResource ToolTipStyle}" TargetType="{x:Type ToolTip}" />
  <Style BasedOn="{StaticResource GalleryGroupContainerStyle}" TargetType="{x:Type Fluent:GalleryGroupContainer}" />
  <Style BasedOn="{StaticResource SeparatorTabItemStyle}" TargetType="{x:Type Fluent:SeparatorTabItem}" />
  <Style BasedOn="{StaticResource RibbonBackstageStyle}" TargetType="{x:Type Fluent:Backstage}" />
  <Style BasedOn="{StaticResource BackstageTabItemStyle}" TargetType="{x:Type Fluent:BackstageTabItem}" />
  <Style BasedOn="{StaticResource RibbonStartScreenStyle}" TargetType="{x:Type Fluent:StartScreen}" />
  <Style BasedOn="{StaticResource RibbonCheckBoxStyle}" TargetType="{x:Type Fluent:CheckBox}" />
  <Style BasedOn="{StaticResource GalleryItemStyle}" TargetType="{x:Type Fluent:GalleryItem}" />
  <Style BasedOn="{StaticResource RibbonTabItemStyle}" TargetType="{x:Type Fluent:RibbonTabItem}" />
  <Style BasedOn="{StaticResource RibbonToolBarStyle}" TargetType="{x:Type Fluent:RibbonToolBar}" />
  <Style BasedOn="{StaticResource RibbonWindowStyle}" TargetType="{x:Type Fluent:RibbonWindow}" />
  <Style BasedOn="{StaticResource RibbonStatusBarItemStyle}" TargetType="{x:Type Fluent:StatusBarItem}" />
  <Style BasedOn="{StaticResource RibbonTitleBarStyle}" TargetType="{x:Type Fluent:RibbonTitleBar}" />
  <ControlTemplate x:Key="RibbonButtonControlTemplate" TargetType="{x:Type Fluent:Button}">
    <Border x:Name="border" Height="Auto" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
      <StackPanel x:Name="stackPanel" Width="Auto" Orientation="Vertical" d:LayoutOverrides="Width, Height">
        <ContentPresenter x:Name="iconImage" Width="32" Height="32" Margin="3,2,3,1" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" SnapsToDevicePixels="True" />
        <Fluent:TwoLineLabel x:Name="controlLabel" Margin="2,0,2,0" HorizontalAlignment="Stretch" VerticalAlignment="Center" Style="{DynamicResource TwoLineLabelStyle}" Text="{TemplateBinding Header}" />
      </StackPanel>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="controlLabel" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
        <Setter TargetName="iconImage" Property="Width" Value="16" />
        <Setter TargetName="iconImage" Property="Height" Value="16" />
        <Setter TargetName="iconImage" Property="Margin" Value="2,0,2,0" />
        <Setter TargetName="iconImage" Property="Content" Value="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" />
        <Setter TargetName="controlLabel" Property="Margin" Value="2,0,2,0" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="stackPanel" Property="Width" Value="Auto" />
        <Setter TargetName="iconImage" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
        <Setter TargetName="controlLabel" Property="Margin" Value="2,0,2,0" />
        <Setter TargetName="border" Property="VerticalAlignment" Value="Stretch" />
        <Setter TargetName="iconImage" Property="Width" Value="16" />
        <Setter TargetName="iconImage" Property="Height" Value="16" />
        <Setter TargetName="iconImage" Property="Margin" Value="2,0,2,0" />
        <Setter TargetName="iconImage" Property="Content" Value="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" />
        <Setter TargetName="controlLabel" Property="VerticalAlignment" Value="Center" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsPressed" Value="False" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="RibbonButtonStyle" TargetType="{x:Type Fluent:Button}">
    <Setter Property="Template" Value="{DynamicResource RibbonButtonControlTemplate}" />
    <Setter Property="Height" Value="68" />
    <Setter Property="Width" Value="Auto" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="SnapsToDevicePixels" Value="False" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="CornerRadius" Value="0" />
    <Style.Triggers>
      <Trigger Property="Size" Value="Large">
        <Setter Property="Height" Value="68" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter Property="Height" Value="22" />
        <Setter Property="HorizontalAlignment" Value="Left" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter Property="Height" Value="22" />
        <Setter Property="Width" Value="22" />
        <Setter Property="HorizontalAlignment" Value="Left" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type Fluent:WindowCommands}">
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Fluent:WindowCommands">
          <ControlTemplate.Resources>
            <ResourceDictionary>
              <Style TargetType="{x:Type Button}">
                <Setter Property="Background" Value="{DynamicResource TransparentWhiteBrush}" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Padding" Value="1" />
                <Setter Property="Template" Value="{DynamicResource WindowCommandsControlTemplate}" />
              </Style>
            </ResourceDictionary>
          </ControlTemplate.Resources>
          <StackPanel Orientation="Horizontal">
            <ItemsControl Focusable="False" ItemContainerStyle="{TemplateBinding ItemContainerStyle}" ItemContainerStyleSelector="{TemplateBinding ItemContainerStyleSelector}" ItemTemplate="{TemplateBinding ItemTemplate}" ItemTemplateSelector="{TemplateBinding ItemTemplateSelector}" ItemsSource="{Binding Items, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:WindowCommands}}}">
              <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                  <StackPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
              </ItemsControl.ItemsPanel>
            </ItemsControl>
            <Button x:Name="PART_Min" Uid="{Binding Minimize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:WindowCommands}}}" Padding="0" Focusable="False" WindowChrome.IsHitTestVisibleInChrome="True" Style="{DynamicResource CaptionButtonStyle}" ToolTip="{Binding Minimize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:WindowCommands}}}">
              <Line HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True" Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" StrokeThickness="1.5" UseLayoutRounding="True" X1="0" X2="10" Y1="0" Y2="0" />
            </Button>
            <Button x:Name="PART_Max" Uid="{Binding Maximize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:WindowCommands}}}" Padding="0" Focusable="False" Style="{DynamicResource CaptionButtonStyle}" ToolTip="{Binding Maximize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:WindowCommands}}}" WindowChrome.IsHitTestVisibleInChrome="True" Visibility="{Binding WindowState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Converter={x:Static Converters:StaticConverters.EqualsToVisibilityConverter}, ConverterParameter={x:Static WindowState.Normal}}">
              <Canvas Width="12" Height="12" HorizontalAlignment="Center" VerticalAlignment="Center">
                <Path Data="M2,2 2,10 10,10 10,2 2,2Z M1,11 1,1 11,1 11,11 1,11Z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" RenderOptions.EdgeMode="Aliased" SnapsToDevicePixels="True" Stretch="Uniform" />
              </Canvas>
            </Button>
            <Button x:Name="PART_Restore" Uid="{Binding Restore, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:WindowCommands}}}" Padding="0" Focusable="False" WindowChrome.IsHitTestVisibleInChrome="True" Style="{DynamicResource CaptionButtonStyle}" ToolTip="{Binding Restore, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:WindowCommands}}}" Visibility="{Binding WindowState, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Converter={x:Static Converters:StaticConverters.EqualsToVisibilityConverter}, ConverterParameter={x:Static WindowState.Maximized}}">
              <Canvas Width="12" Height="12" HorizontalAlignment="Center" VerticalAlignment="Center">
                <Path Data="M10,9 9,9 9,3 3,3 3,2 10,2 10,9Z M8,11 1,11 1,4 8,4 8,11Z M2,1 2,3 0,3 0,12 9,12 9,10 11,10 11,1 2,1Z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" RenderOptions.EdgeMode="Aliased" SnapsToDevicePixels="True" Stretch="Uniform" />
              </Canvas>
            </Button>
            <Button x:Name="PART_Close" Uid="{Binding Close, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:WindowCommands}}}" Padding="0" Focusable="False" WindowChrome.IsHitTestVisibleInChrome="True" Style="{DynamicResource CaptionButtonStyle}" ToolTip="{Binding Close, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:WindowCommands}}}">
              <Grid>
                <Line HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True" Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" X1="0" X2="10" Y1="0" Y2="10" />
                <Line HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True" Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" X1="0" X2="10" Y1="10" Y2="0" />
              </Grid>
            </Button>
          </StackPanel>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding IsResizable, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="False">
              <Setter TargetName="PART_Min" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="PART_Max" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="PART_Restore" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ResizeMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Value="CanMinimize">
              <Setter TargetName="PART_Max" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="PART_Restore" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsMouseOver, ElementName=PART_Close}" Value="True">
              <Setter TargetName="PART_Close" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.WindowCommands.CloseButton.MouseOver.Background}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsPressed, ElementName=PART_Close}" Value="True">
              <Setter TargetName="PART_Close" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.WindowCommands.CloseButton.Pressed.Background}" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="RibbonTabControlControlTemplate" TargetType="{x:Type Fluent:RibbonTabControl}">
    <ControlTemplate.Resources>
      <Style TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ScrollViewer}">
              <Grid x:Name="Grid" Background="Transparent" IsHitTestVisible="True">
                <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Margin="{TemplateBinding Padding}" CanContentScroll="{TemplateBinding CanContentScroll}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" IsHitTestVisible="True" />
                <RepeatButton Width="13" Height="Auto" HorizontalAlignment="Left" VerticalAlignment="Stretch" Command="{x:Static ScrollBar.LineLeftCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Focusable="false" Style="{DynamicResource ScrollButtonStyle}">
                  <RepeatButton.Visibility>
                    <MultiBinding Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="0" FallbackValue="Visibility.Collapsed">
                      <Binding Path="ComputedHorizontalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                      <Binding Path="HorizontalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                      <Binding Path="ExtentWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                      <Binding Path="ViewportWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                    </MultiBinding>
                  </RepeatButton.Visibility>
                  <Path Width="3" Height="5" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L1,1 1,-1z" Fill="{DynamicResource BlackBrush}" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="0" />
                </RepeatButton>
                <RepeatButton Width="13" Height="Auto" HorizontalAlignment="Right" VerticalAlignment="Stretch" Command="{x:Static ScrollBar.LineRightCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Focusable="false" Style="{DynamicResource ScrollButtonStyle}">
                  <RepeatButton.Visibility>
                    <MultiBinding Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="100" FallbackValue="Visibility.Collapsed">
                      <Binding Path="ComputedHorizontalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                      <Binding Path="HorizontalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                      <Binding Path="ExtentWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                      <Binding Path="ViewportWidth" RelativeSource="{RelativeSource TemplatedParent}" />
                    </MultiBinding>
                  </RepeatButton.Visibility>
                  <Path Width="3" Height="5" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M1,0L0,1 0,-1z" Fill="{DynamicResource BlackBrush}" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="0" />
                </RepeatButton>
              </Grid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Setter Property="CanContentScroll" Value="True" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="VerticalScrollBarVisibility" Value="Disabled" />
        <Setter Property="PanningMode" Value="HorizontalOnly" />
      </Style>
    </ControlTemplate.Resources>
    <Grid x:Name="ContentGrid" Height="Auto" VerticalAlignment="Top" Background="{TemplateBinding Background}" KeyboardNavigation.TabNavigation="Local">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
        <RowDefinition x:Name="rowDefinition" MinHeight="{TemplateBinding ContentHeight}" MaxHeight="{TemplateBinding ContentHeight}" />
        <RowDefinition x:Name="rowDefinition1" MinHeight="{TemplateBinding ContentGapHeight}" MaxHeight="{TemplateBinding ContentGapHeight}" />
      </Grid.RowDefinitions>
      <Border x:Name="border" Grid.Row="1" Width="Auto" Margin="0,-1,0,0" HorizontalAlignment="Stretch" BorderBrush="{Binding Path=SelectedItem.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" BorderThickness="0,1" />
      <Border Grid.Row="1" Grid.RowSpan="1" Margin="1,0,1,0" HorizontalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.Content.Background}" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local" TextElement.Foreground="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.Content.Foreground}">
        <ContentControl x:Name="mainContentControl" Margin="0" Focusable="False">
          <ContentPresenter x:Name="contentPresenter" Margin="0" HorizontalAlignment="Stretch" ContentSource="SelectedContent" />
        </ContentControl>
      </Border>
      <Border Grid.Row="2" Margin="0" VerticalAlignment="Stretch" Background="{Binding Path=SelectedItem.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" />
      <Grid x:Name="TabsGrid" Grid.RowSpan="1" Width="Auto" Margin="0" HorizontalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.TabsGrid.Background}" KeyboardNavigation.TabIndex="1" TextElement.Foreground="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.TabsGrid.Foreground}">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <Fluent:WindowSteeringHelperControl Grid.ColumnSpan="4" />
        <ContentPresenter Grid.Column="0" VerticalAlignment="Stretch" ContentSource="Menu" />
        <Fluent:RibbonScrollViewer Grid.Column="1" Width="Auto" Margin="0" HorizontalAlignment="Left" HorizontalScrollBarVisibility="Auto" IsHitTestVisible="True" IsTabStop="False" Style="{DynamicResource RibbonTabScrollViewer}" VerticalScrollBarVisibility="Disabled">
          <Fluent:RibbonTabsContainer x:Name="PART_TabsContainer" Height="Auto" Margin="0" HorizontalAlignment="Stretch" IsItemsHost="True" KeyboardNavigation.TabIndex="1" />
        </Fluent:RibbonScrollViewer>
        <StackPanel x:Name="toolbarPlaceholder" Grid.Column="3" Margin="0,0,0,1" HorizontalAlignment="Right" Orientation="Horizontal">
          <Grid Width="22" Height="22">
            <Image x:Name="image" Source="/Fluent;Component/Themes/Images/RibbonPin.png" Stretch="None" Visibility="Collapsed" />
            <Fluent:ToggleButton x:Name="PART_MinimizeButton" Width="22" Height="22" Margin="0" IsChecked="{Binding Path=IsMinimized, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Size="Small" Style="{DynamicResource RibbonTabControlToggleButtonStyle}" Visibility="{TemplateBinding CanMinimize,&#xD;&#xA;                                           Converter={StaticResource boolToVisibilityConverter}}" />
          </Grid>
          <StackPanel x:Name="PART_ToolbarPanel" Orientation="Horizontal" />
        </StackPanel>
      </Grid>
      <Popup x:Name="PART_Popup" AllowsTransparency="True" HorizontalOffset="0" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Custom" PlacementTarget="{Binding Path=SelectedTabItem, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" StaysOpen="True" VerticalOffset="-10">
        <Grid>
          <Grid.RowDefinitions>
            <RowDefinition MinHeight="20" MaxHeight="20" />
            <!--  Needed for overlapping Keytips  -->
            <RowDefinition MinHeight="{TemplateBinding ContentHeight}" MaxHeight="{TemplateBinding ContentHeight}" />
            <RowDefinition MinHeight="{TemplateBinding ContentGapHeight}" MaxHeight="{TemplateBinding ContentGapHeight}" />
            <RowDefinition Height="20" />
            <!--  Needed for overlapping Keytips  -->
          </Grid.RowDefinitions>
          <Border Grid.Row="1" Grid.RowSpan="2" Margin="1,0" Background="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.Content.Background}" BorderBrush="{Binding Path=SelectedItem.BorderBrush, RelativeSource={RelativeSource TemplatedParent}}" BorderThickness="0,0,0,1" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabNavigation="Local" TextElement.Foreground="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.Content.Foreground}">
            <ContentControl x:Name="popupContentControl" Margin="0" Focusable="False" />
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMinimized" Value="True">
        <Setter TargetName="rowDefinition" Property="MinHeight" Value="0" />
        <Setter TargetName="rowDefinition1" Property="MinHeight" Value="0" />
        <!--  Switch content to popup  -->
        <Setter TargetName="mainContentControl" Property="Content" Value="{x:Null}" />
        <Setter TargetName="popupContentControl" Property="Content" Value="{Binding ElementName=contentPresenter, Mode=OneWay}" />
        <!--  Switch content to popup END  -->
        <Setter TargetName="image" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsDropDownOpen" Value="True" />
          <Condition Property="IsMinimized" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="image" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_MinimizeButton" Property="Opacity" Value="0" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="RibbonGroupBoxDropDownButtonControlTemplate" TargetType="{x:Type Fluent:RibbonGroupBox}">
    <Grid Width="22">
      <Border x:Name="PART_ButtonBorder" Height="Auto" HorizontalAlignment="Left" VerticalAlignment="Stretch" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="2" d:LayoutOverrides="Width, Height">
        <Grid Height="Auto">
          <StackPanel x:Name="stackPanel" Width="Auto" Orientation="Vertical" d:LayoutOverrides="Width, Height">
            <ContentPresenter x:Name="iconImage" Width="16" Height="16" Margin="1,1,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" SnapsToDevicePixels="True" />
            <Fluent:TwoLineLabel x:Name="controlLabel" Margin="2,-2,2,2" HorizontalAlignment="Center" VerticalAlignment="Center" Style="{DynamicResource TwoLineLabelStyle}" Text="{TemplateBinding Header}" Visibility="Collapsed" />
          </StackPanel>
        </Grid>
      </Border>
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0,0,-4,0" VerticalAlignment="Top" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
        <Grid Width="Auto" Height="Auto" Margin="0,20">
          <Border x:Name="border" Height="Auto" Background="{DynamicResource Fluent.Ribbon.Brushes.Ribbon.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.BorderBrush}" BorderThickness="1" CornerRadius="1" d:LayoutOverrides="Width">
            <Grid x:Name="PART_ParentPanel" Grid.RowSpan="2" Height="85" Margin="0,1,0,2">
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="17" />
              </Grid.RowDefinitions>
              <Grid x:Name="PART_DownGrid" Grid.Row="1" Height="17" MaxWidth="{Binding ActualWidth, ElementName=PART_UpPanel}" Margin="0,-2,2,2" VerticalAlignment="Bottom">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <TextBlock Grid.Row="1" Margin="2,0" HorizontalAlignment="Stretch" VerticalAlignment="Center" Foreground="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.Header.Foreground}" Text="{TemplateBinding Header}" TextAlignment="Center" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" />
                <Fluent:Button x:Name="PART_DialogLauncherButton" Grid.Column="1" Width="15" Height="14" Margin="0,0,1,1" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Background="Transparent" BorderBrush="Transparent" Command="{Binding LauncherCommand, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{Binding LauncherCommandParameter, RelativeSource={RelativeSource TemplatedParent}}" CommandTarget="{Binding LauncherCommandTarget, RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" Header="{TemplateBinding LauncherText}" Icon="{TemplateBinding LauncherIcon}" IsEnabled="{Binding IsLauncherEnabled, RelativeSource={RelativeSource TemplatedParent}}" IsTabStop="False" Template="{DynamicResource DialogLauncherButtonControlTemplate}" ToolTip="{Binding LauncherToolTip, RelativeSource={RelativeSource TemplatedParent}}" />
              </Grid>
              <WrapPanel x:Name="PART_UpPanel" Width="Auto" Height="Auto" Margin="2,0,4,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Stretch" IsItemsHost="True" Orientation="Vertical" />
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="State" Value="Collapsed">
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="iconImage" Property="Content" Value="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" />
        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
        <Setter TargetName="controlLabel" Property="Text" Value="" />
        <Setter TargetName="iconImage" Property="Width" Value="16" />
        <Setter TargetName="iconImage" Property="Height" Value="16" />
        <Setter TargetName="iconImage" Property="Margin" Value="1,0,0,0" />
        <Setter TargetName="controlLabel" Property="Margin" Value="-2,-1,2,1" />
        <Setter TargetName="controlLabel" Property="Width" Value="10" />
        <Setter TargetName="controlLabel" Property="VerticalAlignment" Value="Center" />
      </Trigger>
      <Trigger Property="IsDropDownOpen" Value="True">
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsDropDownOpen" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="RibbonToggleButtonStyle" TargetType="{x:Type Fluent:ToggleButton}">
    <Setter Property="Template" Value="{DynamicResource RibbonToggleButtonControlTemplate}" />
    <Setter Property="Height" Value="68" />
    <Setter Property="Width" Value="Auto" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Style.Triggers>
      <Trigger Property="Size" Value="Large">
        <Setter Property="Height" Value="68" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter Property="Height" Value="22" />
        <Setter Property="HorizontalAlignment" Value="Left" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter Property="Height" Value="22" />
        <Setter Property="Width" Value="22" />
        <Setter Property="HorizontalAlignment" Value="Left" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="InnerButtonStyle" TargetType="{x:Type Fluent:ToggleButton}">
    <Setter Property="Template" Value="{DynamicResource InnerButtonControlTemplate}" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Fluent:KeyTip.AutoPlacement" Value="{Binding Path=(Fluent:KeyTip.AutoPlacement), RelativeSource={RelativeSource AncestorType={x:Type Fluent:SplitButton}}}" />
    <Style.Triggers>
      <Trigger Property="Size" Value="Large">
        <Setter Property="Fluent:KeyTip.HorizontalAlignment" Value="Center" />
        <Setter Property="Fluent:KeyTip.VerticalAlignment" Value="Top" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter Property="Fluent:KeyTip.HorizontalAlignment" Value="Left" />
        <Setter Property="Fluent:KeyTip.VerticalAlignment" Value="Center" />
        <Setter Property="Fluent:KeyTip.Margin" Value="-5,0,0,0" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter Property="Fluent:KeyTip.HorizontalAlignment" Value="Left" />
        <Setter Property="Fluent:KeyTip.VerticalAlignment" Value="Center" />
        <Setter Property="Fluent:KeyTip.Margin" Value="-5,0,0,0" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MenuScrollViewer" TargetType="{x:Type ScrollViewer}">
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Template" Value="{StaticResource MenuScrollViewerControlTemplate}" />
    <Setter Property="CanContentScroll" Value="False" />
    <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="VerticalScrollBarVisibility" Value="Disabled" />
    <Setter Property="Focusable" Value="False" />
  </Style>
  <ControlTemplate x:Key="ScrollViewerControlTemplate" TargetType="{x:Type ScrollViewer}">
    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
      <Grid x:Name="Grid" Background="{TemplateBinding Background}">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
          <RowDefinition Height="*" />
          <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Rectangle x:Name="Corner" Grid.Row="1" Grid.Column="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.Row="0" Grid.Column="0" Margin="{TemplateBinding Padding}" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
        <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Row="0" Grid.Column="1" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Style="{DynamicResource ScrollBarWhite}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
        <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Row="1" Grid.Column="0" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Style="{DynamicResource ScrollBarWhite}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
      </Grid>
    </Border>
  </ControlTemplate>
  <Style x:Key="RibbonContextualTabGroupStyle" TargetType="{x:Type Fluent:RibbonContextualTabGroup}">
    <Setter Property="Template" Value="{DynamicResource RibbonContextualTabGroupControlTemplate}" />
    <Setter Property="Width" Value="Auto" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.Foreground}" />
  </Style>
  <ControlTemplate x:Key="ToolbarDropDownButtonControlTemplate" TargetType="{x:Type Fluent:DropDownButton}">
    <Grid>
      <Border x:Name="PART_ButtonBorder" Width="13" Height="22" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Transparent" BorderBrush="Transparent" BorderThickness="1">
        <Image x:Name="iconImage" Width="8" Height="8" Margin="-3,0,2,0" HorizontalAlignment="Center" VerticalAlignment="Center" Source="{TemplateBinding LargeIcon}" Stretch="None" />
      </Border>
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0,0,-4,0" VerticalAlignment="Top" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
        <Grid Name="DropDown" Margin="0" VerticalAlignment="Top" SnapsToDevicePixels="True">
          <Border x:Name="PART_DropDownBorder" MinWidth="{TemplateBinding ActualWidth}" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" SnapsToDevicePixels="True">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top">
              <Border Width="Auto" Height="Auto" VerticalAlignment="Top" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" />
              <Grid HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ScrollViewer MaxHeight="{TemplateBinding MaxDropDownHeight}" Margin="1" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Auto" SnapsToDevicePixels="True">
                  <StackPanel x:Name="PART_MenuPanel" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" Orientation="Vertical" />
                </ScrollViewer>
                <Border x:Name="resizeBorder" Grid.Row="1" Height="11" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgoundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0,1,0,0">
                  <Grid>
                    <Thumb x:Name="PART_ResizeVerticalThumb" Width="Auto" Height="10" Margin="0,0,0,-90" HorizontalAlignment="Stretch" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                    <Thumb x:Name="PART_ResizeBothThumb" Width="10" Height="10" Margin="0,0,0,-90" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                  </Grid>
                </Border>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ResizeMode" Value="None">
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Both">
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Vertical">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImage" Property="Opacity" Value="0.25" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="iconImage" Property="Source" Value="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="iconImage" Property="Width" Value="16" />
        <Setter TargetName="iconImage" Property="Height" Value="16" />
        <Setter TargetName="iconImage" Property="Margin" Value="2" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="iconImage" Property="Source" Value="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="iconImage" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="PART_ButtonBorder" Property="VerticalAlignment" Value="Stretch" />
        <Setter TargetName="iconImage" Property="Width" Value="16" />
        <Setter TargetName="iconImage" Property="Height" Value="16" />
        <Setter TargetName="iconImage" Property="Margin" Value="2" />
      </Trigger>
      <Trigger Property="IsDropDownOpen" Value="True">
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsDropDownOpen" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="MenuItemTemplate" TargetType="{x:Type MenuItem}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style x:Key="{x:Type ScrollViewer}" BasedOn="{StaticResource MenuScrollViewer}" TargetType="{x:Type ScrollViewer}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Grid Background="{TemplateBinding Background}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="25" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Border x:Name="border" Grid.Column="0" Grid.ColumnSpan="3" Width="Auto" Margin="0" HorizontalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" Visibility="Collapsed" />
      <ContentPresenter x:Name="textBlock" Grid.Column="1" Width="Auto" Height="Auto" Margin="5,3,3,3" VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" d:LayoutOverrides="Width" />
      <Image x:Name="image" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True" Source="{DynamicResource MenuCheckedImage}" Stretch="None" Visibility="Collapsed" />
      <ContentPresenter x:Name="iconImage" Width="16" Height="16" Margin="3,2,2,2" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" SnapsToDevicePixels="True" />
      <TextBlock x:Name="gestureTextBlock" Grid.Column="2" Width="Auto" Height="Auto" Margin="3,3,15,3" VerticalAlignment="Center" Text="{TemplateBinding InputGestureText}" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="InputGestureText" Value="{x:Null}">
        <Setter TargetName="gestureTextBlock" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="InputGestureText" Value="">
        <Setter TargetName="gestureTextBlock" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Icon" Value="{x:Null}" />
          <Condition Property="IsChecked" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="image" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsHighlighted" Value="True" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="image" Property="Opacity" Value="0.5" />
        <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
        <Setter TargetName="gestureTextBlock" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
        <Setter TargetName="image" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="HeaderMenuItemTemplate" TargetType="{x:Type MenuItem}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style x:Key="{x:Type ScrollViewer}" BasedOn="{StaticResource MenuScrollViewer}" TargetType="{x:Type ScrollViewer}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Grid Background="{TemplateBinding Background}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="25" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Border x:Name="border" Grid.Column="0" Grid.ColumnSpan="3" Width="Auto" Margin="0" HorizontalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" Visibility="Collapsed" />
      <ContentPresenter x:Name="textBlock" Grid.Column="1" Width="Auto" Height="Auto" Margin="5,3,3,3" VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" d:LayoutOverrides="Width" />
      <Image x:Name="image" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True" Source="{DynamicResource MenuCheckedImage}" Stretch="None" Visibility="Collapsed" />
      <ContentPresenter x:Name="iconImage" Width="16" Height="16" Margin="3,2,2,2" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" RecognizesAccessKey="True" SnapsToDevicePixels="True" />
      <Path x:Name="path" Grid.Column="3" Width="4" Height="7" Margin="1,0,9,0" HorizontalAlignment="Right" Data="M0,0L1,1 0,2z" Fill="{DynamicResource Fluent.Ribbon.MenuItem.SubMenu.Arrow.Fill}" Stretch="Fill" Stroke="{x:Null}" />
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0,0,-4,0" VerticalAlignment="Top" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsSubmenuOpen}" Placement="Right" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
        <Grid Name="DropDown" Margin="0" VerticalAlignment="Stretch" SnapsToDevicePixels="True">
          <Border x:Name="DropDownBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" SnapsToDevicePixels="True" d:LayoutOverrides="Width, Height">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
              <Border Width="Auto" Height="Auto" VerticalAlignment="Stretch" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" />
              <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Path Grid.RowSpan="2" Width="1" Height="Auto" Margin="24,0,0,0" HorizontalAlignment="Left" Data="M0,0L0,1" Fill="{x:Null}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" Visibility="Visible" />
                <ScrollViewer x:Name="PART_ScrollViewer" Margin="1" SnapsToDevicePixels="True" Style="{DynamicResource MenuScrollViewer}">
                  <StackPanel x:Name="PART_MenuPanel" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Orientation="Vertical" />
                </ScrollViewer>
                <Border x:Name="resizeBorder" Grid.Row="1" Height="11" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgoundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0,1,0,0">
                  <Grid>
                    <Thumb x:Name="PART_ResizeVerticalThumb" Width="Auto" Height="10" Margin="0,0,0,-90" HorizontalAlignment="Stretch" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                    <Thumb x:Name="PART_ResizeBothThumb" Width="10" Height="10" Margin="0,0,0,-90" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                  </Grid>
                </Border>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="Fluent:MenuItem.ResizeMode" Value="None">
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="Fluent:MenuItem.ResizeMode" Value="Both">
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="Fluent:MenuItem.ResizeMode" Value="Vertical">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Icon" Value="{x:Null}" />
          <Condition Property="IsChecked" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="image" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsHighlighted" Value="True" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="image" Property="Opacity" Value="0.5" />
        <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
        <Setter TargetName="image" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="SplitedMenuItemTemplate" TargetType="{x:Type MenuItem}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style x:Key="{x:Type ScrollViewer}" BasedOn="{StaticResource MenuScrollViewer}" TargetType="{x:Type ScrollViewer}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Grid Background="{TemplateBinding Background}">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="25" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Rectangle Grid.Column="2" Width="1" Margin="0,4,23,4" HorizontalAlignment="Right" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" />
      <Grid Grid.Column="0" Grid.ColumnSpan="3" Width="Auto" Margin="0" HorizontalAlignment="Stretch">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="0.905*" />
          <ColumnDefinition x:Name="columnDefinition" Width="23" />
        </Grid.ColumnDefinitions>
        <Border x:Name="PART_ButtonBorder" Margin="0,0,-1,0" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" Visibility="Collapsed" />
        <Border x:Name="Submenu_Border" Grid.Column="1" Width="Auto" Margin="0" HorizontalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" CornerRadius="2" Visibility="Collapsed" />
      </Grid>
      <ContentPresenter x:Name="textBlock" Grid.Column="1" Width="Auto" Height="Auto" Margin="5,3,3,3" VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" d:LayoutOverrides="Width" />
      <Image x:Name="image" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True" Source="{DynamicResource MenuCheckedImage}" Stretch="None" Visibility="Collapsed" />
      <ContentPresenter x:Name="iconImage" Width="16" Height="16" Margin="3,2,2,2" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding Icon, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}, RelativeSource={RelativeSource TemplatedParent}}" RecognizesAccessKey="True" SnapsToDevicePixels="True" />
      <Path x:Name="path" Grid.Column="3" Width="4" Height="7" Margin="1,0,9,0" HorizontalAlignment="Right" Data="M0,0L1,1 0,2z" Fill="{DynamicResource Fluent.Ribbon.MenuItem.SubMenu.Arrow.Fill}" Stretch="Fill" Stroke="{x:Null}" />
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0,0,-4,0" VerticalAlignment="Top" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsSubmenuOpen}" Placement="Right" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
        <Grid x:Name="DropDown" Margin="0" VerticalAlignment="Stretch" SnapsToDevicePixels="True">
          <Border x:Name="DropDownBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" CornerRadius="1" SnapsToDevicePixels="True" d:LayoutOverrides="Width, Height">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
              <Border Width="Auto" Height="Auto" VerticalAlignment="Stretch" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" CornerRadius="1" />
              <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Path Grid.RowSpan="2" Width="1" Height="Auto" Margin="24,0,0,0" HorizontalAlignment="Left" Data="M0,0L0,1" Fill="{x:Null}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" Visibility="Visible" />
                <ScrollViewer x:Name="PART_ScrollViewer" Margin="1" SnapsToDevicePixels="True" Style="{DynamicResource MenuScrollViewer}">
                  <StackPanel x:Name="PART_MenuPanel" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Orientation="Vertical" />
                </ScrollViewer>
                <Border x:Name="resizeBorder" Grid.Row="1" Height="11" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgoundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0,1,0,0">
                  <Grid>
                    <Thumb x:Name="PART_ResizeVerticalThumb" Width="Auto" Height="10" Margin="0,0,0,-90" HorizontalAlignment="Stretch" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                    <Thumb x:Name="PART_ResizeBothThumb" Width="10" Height="10" Margin="0,0,0,-90" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                  </Grid>
                </Border>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="Fluent:MenuItem.ResizeMode" Value="None">
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="Fluent:MenuItem.ResizeMode" Value="Both">
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="Fluent:MenuItem.ResizeMode" Value="Vertical">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Icon" Value="{x:Null}" />
          <Condition Property="IsChecked" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="image" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsHighlighted" Value="True" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ButtonBorder" Property="Visibility" Value="Visible" />
        <Setter TargetName="Submenu_Border" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="IsSubmenuOpen" Value="True">
        <Setter TargetName="Submenu_Border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="image" Property="Opacity" Value="0.5" />
        <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
        <Setter TargetName="image" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="FluentDefaultSystemMenuItemStyle" TargetType="{x:Type MenuItem}">
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.MenuItem.Background}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Template" Value="{DynamicResource MenuItemTemplate}" />
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Fluent:MenuItem.IsSplited" Value="True" />
          <Condition Property="HasItems" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Template" Value="{DynamicResource SplitedMenuItemTemplate}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Fluent:MenuItem.IsSplited" Value="False" />
          <Condition Property="HasItems" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Template" Value="{DynamicResource HeaderMenuItemTemplate}" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="MenuSeparatorStyle" TargetType="{x:Type Separator}">
    <Setter Property="Template" Value="{DynamicResource MenuSeparatorControlTemplate}" />
  </Style>
  <Style x:Key="MenuGroupSeparatorStyle" TargetType="{x:Type Fluent:GroupSeparatorMenuItem}">
    <Setter Property="Template" Value="{DynamicResource MenuGroupSeparatorControlTemplate}" />
  </Style>
  <Style TargetType="{x:Type Fluent:RibbonMenu}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:RibbonMenu}">
          <ControlTemplate.Resources>
            <Style BasedOn="{StaticResource MenuSeparatorStyle}" TargetType="{x:Type Separator}" />
          </ControlTemplate.Resources>
          <Grid>
            <Rectangle Grid.RowSpan="2" Width="1" Height="Auto" Margin="24,0,0,0" HorizontalAlignment="Left" Fill="{x:Null}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" Visibility="Visible" />
            <StackPanel x:Name="menuPanel" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Continue" Orientation="Vertical" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="InRibbonGalleryToggleButtonStyle" TargetType="{x:Type Fluent:ToggleButton}">
    <Setter Property="Template" Value="{DynamicResource InRibbonGalleryToggleButtonControlTemplate}" />
    <Setter Property="Height" Value="68" />
    <Setter Property="Width" Value="Auto" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Style.Triggers>
      <Trigger Property="Size" Value="Large">
        <Setter Property="Height" Value="68" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter Property="Height" Value="22" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter Property="Height" Value="22" />
        <Setter Property="Width" Value="31" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="InRibbonGalleryControlTemplate" TargetType="{x:Type Fluent:InRibbonGallery}">
    <Grid x:Name="PART_LayoutRoot" Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top">
      <Border x:Name="border" Width="Auto" Height="60" Margin="0,0,0,0" HorizontalAlignment="Stretch" VerticalAlignment="Top" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="1,1,1,1" ClipToBounds="True" CornerRadius="0,1,1,0">
        <Grid Width="Auto" Height="Auto">
          <ScrollViewer HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Visible">
            <ScrollViewer.Resources>
              <Style TargetType="{x:Type ScrollBar}">
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                      <StackPanel Margin="0,-1,-1,0" HorizontalAlignment="Right">
                        <RepeatButton x:Name="upButton" Width="15" Height="21" Margin="0,0,0,0" Command="ScrollBar.PageUpCommand" Style="{DynamicResource InRibbonGalleryRepeatButton}">
                          <Path Width="5" Height="3" Data="M0,0 L1,-1 2,0z" Fill="{DynamicResource BlackBrush}" RenderOptions.EdgeMode="Aliased" Stretch="Fill" />
                        </RepeatButton>
                        <RepeatButton x:Name="downButton" Width="15" Height="21" Margin="0,-1,0,0" Command="ScrollBar.PageDownCommand" Style="{DynamicResource InRibbonGalleryRepeatButton}">
                          <Path Width="5" Height="3" Data="M0,0 L1,1 2,0z" Fill="{DynamicResource BlackBrush}" RenderOptions.EdgeMode="Aliased" Stretch="Fill" />
                        </RepeatButton>
                      </StackPanel>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
                <Setter Property="ContextMenu" Value="{x:Null}" />
              </Style>
            </ScrollViewer.Resources>
            <Grid>
              <ContentControl x:Name="PART_ContentPresenter" Focusable="False">
                <Fluent:GalleryPanel x:Name="PART_GalleryPanel" Background="{DynamicResource WhiteBrush}" Filter="{TemplateBinding SelectedFilterGroups}" GroupBy="{TemplateBinding GroupBy}" GroupByAdvanced="{TemplateBinding GroupByAdvanced}" IsGrouped="False" IsItemsHost="True" ItemContainerGenerator="{Binding ItemContainerGenerator, RelativeSource={RelativeSource TemplatedParent}}" ItemHeight="{TemplateBinding ItemHeight}" ItemWidth="{TemplateBinding ItemWidth}" Orientation="{TemplateBinding Orientation}" />
              </ContentControl>
              <Image x:Name="PART_FakeImage" Visibility="Collapsed" />
            </Grid>
          </ScrollViewer>
          <Fluent:ToggleButton x:Name="PART_ExpandButton" Width="15" Height="20" Margin="0,0,-1,-1" HorizontalAlignment="Right" VerticalAlignment="Bottom" CanAddToQuickAccessToolBar="False" ClickMode="Press" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsDefinitive="False" Style="{DynamicResource InRibbonGalleryButton}" />
          <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0,0,-4,0" VerticalAlignment="Top" AllowsTransparency="True" CustomPopupPlacementCallback="{x:Static FluentHelpers:PopupHelper.SimplePlacementCallback}" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Custom" PlacementTarget="{Binding ElementName=PART_LayoutRoot}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
            <Popup.Resources>
              <ResourceDictionary>
                <Style x:Key="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarWhite}" TargetType="{x:Type ScrollBar}" />
              </ResourceDictionary>
            </Popup.Resources>
            <Grid Name="DropDown" Margin="0" VerticalAlignment="Top" SnapsToDevicePixels="True">
              <Border x:Name="PART_DropDownBorder" MinWidth="{Binding ActualWidth, ElementName=PART_LayoutRoot}" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" CornerRadius="1" SnapsToDevicePixels="True">
                <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top" KeyboardNavigation.DirectionalNavigation="Cycle">
                  <Border Width="Auto" Height="Auto" VerticalAlignment="Stretch" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" CornerRadius="1" />
                  <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="*" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Rectangle Grid.RowSpan="2" Width="1" Height="Auto" Margin="24,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Stretch" Fill="{x:Null}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" Visibility="Visible" />
                    <Grid x:Name="PART_MenuPanel" MinWidth="{Binding MinWidth, ElementName=PART_DropDownBorder}" MaxHeight="{TemplateBinding MaxDropDownHeight}" VerticalAlignment="Top">
                      <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" />
                      </Grid.RowDefinitions>
                      <Border x:Name="layoutRoot" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid Width="Auto">
                          <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                          </Grid.RowDefinitions>
                          <Border x:Name="border_" Grid.Row="0" Height="13" Background="{DynamicResource Fluent.Ribbon.Brushes.Gallery.Header.Background}" BorderBrush="{x:Null}" BorderThickness="0">
                            <Fluent:DropDownButton x:Name="PART_FilterDropDownButton" Height="Auto" HorizontalAlignment="Left" VerticalAlignment="Top" Header="{TemplateBinding SelectedFilterTitle}" Style="{DynamicResource GalleryDropDownButtonStyle}" />
                          </Border>
                          <ScrollViewer x:Name="PART_ScrollViewer" Grid.Row="1" MinHeight="{Binding ActualHeight, ElementName=PART_LayoutRoot}" Margin="1" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="0,0,0,1">
                            <ContentControl x:Name="PART_PopupContentPresenter" Content="{x:Null}" />
                          </ScrollViewer>
                        </Grid>
                      </Border>
                      <ContentPresenter x:Name="menuPresenter" Grid.Row="1" VerticalAlignment="Top" ContentSource="Menu" KeyboardNavigation.DirectionalNavigation="None" />
                    </Grid>
                    <Border x:Name="resizeBorder" Grid.Row="2" Height="11" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgoundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0,1,0,0" CornerRadius="0,0,1,1">
                      <Grid>
                        <Thumb x:Name="PART_ResizeVerticalThumb" Width="Auto" Height="10" Margin="0,0,0,-90" HorizontalAlignment="Stretch" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                        <Thumb x:Name="PART_ResizeBothThumb" Width="10" Height="10" Margin="0,0,0,-90" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                      </Grid>
                    </Border>
                  </Grid>
                </Grid>
              </Border>
            </Grid>
          </Popup>
        </Grid>
      </Border>
      <Fluent:ToggleButton x:Name="PART_DropDownButton" Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" CanAddToQuickAccessToolBar="False" ClickMode="Press" Header="{Binding Path=Header, RelativeSource={RelativeSource TemplatedParent}}" Icon="{Binding Path=Icon, RelativeSource={RelativeSource TemplatedParent}}" IsDefinitive="False" LargeIcon="{Binding Path=LargeIcon, RelativeSource={RelativeSource TemplatedParent}}" Size="{Binding Path=Size, RelativeSource={RelativeSource TemplatedParent}}" SizeDefinition="{Binding Path=SizeDefinition, RelativeSource={RelativeSource TemplatedParent}}" Style="{DynamicResource InRibbonGalleryToggleButtonStyle}" Visibility="Collapsed" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="HasFilter" Value="False">
        <Setter TargetName="border_" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="PART_DropDownButton" Property="IsEnabled" Value="False" />
        <Setter TargetName="PART_ExpandButton" Property="IsEnabled" Value="False" />
      </Trigger>
      <Trigger Property="IsCollapsed" Value="True">
        <Setter TargetName="border" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_Popup" Property="Placement" Value="Bottom" />
        <Setter TargetName="PART_DropDownButton" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_LayoutRoot" Property="VerticalAlignment" Value="Top" />
        <Setter TargetName="PART_LayoutRoot" Property="HorizontalAlignment" Value="Left" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="None">
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Both">
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Vertical">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="Menu" Value="{x:Null}">
        <Setter TargetName="PART_ScrollViewer" Property="BorderThickness" Value="0" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="{x:Type Fluent:InRibbonGallery}" TargetType="{x:Type Fluent:InRibbonGallery}">
    <Style.Triggers>
      <Trigger Property="IsCollapsed" Value="True">
        <Setter Property="Margin" Value="0" />
      </Trigger>
    </Style.Triggers>
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Template" Value="{DynamicResource InRibbonGalleryControlTemplate}" />
    <Setter Property="Margin" Value="2,3,3,0" />
  </Style>
  <Style x:Key="ButtonBackstageStyle" TargetType="{x:Type Fluent:Button}">
    <Setter Property="Template" Value="{DynamicResource ButtonBackstageControlTemplate}" />
    <Setter Property="Height" Value="85" />
    <Setter Property="Width" Value="85" />
  </Style>
  <Style x:Key="ToggleButtonBackstageStyle" TargetType="{x:Type Fluent:ToggleButton}">
    <Setter Property="Template" Value="{DynamicResource ToggleButtonBackstageControlTemplate}" />
    <Setter Property="Height" Value="81" />
    <Setter Property="Width" Value="85" />
  </Style>
  <Style x:Key="DropDownButtonBackstageStyle" TargetType="{x:Type Fluent:DropDownButton}">
    <Setter Property="Template" Value="{DynamicResource DropDownButtonBackstageControlTemplate}" />
    <Setter Property="Height" Value="81" />
    <Setter Property="Width" Value="85" />
  </Style>
  <Style x:Key="RibbonToolBarControlGroupStyle" TargetType="{x:Type Fluent:RibbonToolBarControlGroup}">
    <Setter Property="Template" Value="{DynamicResource RibbonToolBarControlGroupTemplate}" />
    <Setter Property="Focusable" Value="False" />
  </Style>
  <Style TargetType="{x:Type Fluent:StatusBarMenuItem}">
    <Setter Property="Template" Value="{DynamicResource RibbonStatusBarContextMenuItemControlTemplate}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="IsCheckable" Value="True" />
    <Setter Property="IsChecked" Value="{Binding StatusBarItem.IsChecked, RelativeSource={RelativeSource Self}, Mode=TwoWay}" />
  </Style>
  <Style x:Key="RibbonComboButtonStyle" TargetType="{x:Type Fluent:ToggleButton}">
    <Setter Property="Template" Value="{DynamicResource RibbonComboButtonControlTemplate}" />
    <Setter Property="Height" Value="68" />
    <Setter Property="Width" Value="Auto" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" />
  </Style>
  <Style x:Key="SliderThumbStyle" TargetType="{x:Type Thumb}">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Height" Value="14" />
    <Setter Property="Width" Value="14" />
    <Setter Property="Template" Value="{DynamicResource SliderThumbControlTemplate}" />
  </Style>
  <ControlTemplate x:Key="ZoomSliderControlTemplate" TargetType="{x:Type Slider}">
    <Grid Width="133" Height="16">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="16" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="16" />
      </Grid.ColumnDefinitions>
      <Rectangle Grid.Column="1" Grid.ColumnSpan="1" Height="1" Margin="0,-1,0,0" VerticalAlignment="Center" Stroke="{DynamicResource BlackBrush}" />
      <!--<Rectangle Grid.ColumnSpan="1" Margin="-1,0,0,0" Stroke="{DynamicResource SliderShadowBrush}" VerticalAlignment="Center" Height="7" Grid.Column="1" Width="1" HorizontalAlignment="Center"/>-->
      <Rectangle Grid.Column="1" Grid.ColumnSpan="1" Height="1" Margin="0,1,0,0" VerticalAlignment="Center" Stroke="{DynamicResource BlackBrush}" />
      <Rectangle Grid.Column="1" Grid.ColumnSpan="1" Width="1" Height="7" Margin="0,1,0,1" HorizontalAlignment="Center" VerticalAlignment="Center" Stroke="{DynamicResource BlackBrush}" />
      <Rectangle x:Name="rectangle" Grid.Column="1" Grid.ColumnSpan="1" Margin="0" Fill="Transparent" Stroke="{x:Null}" StrokeThickness="0" />
      <Track x:Name="PART_Track" Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="1" Height="16">
        <Track.DecreaseRepeatButton>
          <RepeatButton x:Name="leftButton" Command="Slider.DecreaseLarge" Style="{DynamicResource SliderButtonStyle}" />
        </Track.DecreaseRepeatButton>
        <Track.Thumb>
          <Thumb x:Name="thumb" Style="{DynamicResource SliderThumbStyle}" />
        </Track.Thumb>
        <Track.IncreaseRepeatButton>
          <RepeatButton x:Name="rightButton" Command="Slider.IncreaseLarge" Style="{DynamicResource SliderButtonStyle}" />
        </Track.IncreaseRepeatButton>
      </Track>
      <RepeatButton x:Name="repeatButton" Command="Slider.DecreaseLarge" Style="{DynamicResource SliderRepeatButtonStyle}" d:LayoutOverrides="Width, Height">
        <Grid Margin="0" Background="Transparent" IsHitTestVisible="True">
          <Path Width="10" Height="2" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L1,0" Fill="{x:Null}" Stretch="Fill" Stroke="{DynamicResource BlackBrush}" StrokeThickness="2" />
        </Grid>
      </RepeatButton>
      <RepeatButton x:Name="repeatButton_Copy" Grid.Column="2" Command="Slider.IncreaseLarge" Style="{DynamicResource SliderRepeatButtonStyle}">
        <Grid Margin="0" Background="Transparent" IsHitTestVisible="True">
          <Path Width="2" Height="10" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L0,1" Stretch="Fill" Stroke="{DynamicResource BlackBrush}" StrokeThickness="2" />
          <Path Width="10" Height="2" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L1,0" Stretch="Fill" Stroke="{DynamicResource BlackBrush}" StrokeThickness="2" />
        </Grid>
      </RepeatButton>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger SourceName="leftButton" Property="IsMouseOver" Value="True">
        <Setter TargetName="thumb" Property="Background" Value="Red" />
      </Trigger>
      <Trigger SourceName="rightButton" Property="IsMouseOver" Value="True">
        <Setter TargetName="thumb" Property="Background" Value="Red" />
      </Trigger>
      <Trigger SourceName="thumb" Property="IsMouseOver" Value="True">
        <Setter TargetName="thumb" Property="Background" Value="Red" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style TargetType="{x:Type Calendar}">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="BorderBrush" Value="{DynamicResource GrayBrush2}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="CalendarDayButtonStyle" Value="{DynamicResource CalendarDayButtonStyle}" />
    <Setter Property="CalendarButtonStyle" Value="{DynamicResource CalendarButtonStyle}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Calendar}">
          <StackPanel x:Name="PART_Root" HorizontalAlignment="Center">
            <CalendarItem x:Name="PART_CalendarItem" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" />
          </StackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource RibbonButtonStyle}" TargetType="{x:Type Fluent:Button}" />
  <Style BasedOn="{StaticResource RibbonToggleButtonStyle}" TargetType="{x:Type Fluent:ToggleButton}" />
  <Style BasedOn="{StaticResource RibbonContextualTabGroupStyle}" TargetType="{x:Type Fluent:RibbonContextualTabGroup}" />
  <Style BasedOn="{StaticResource RibbonToolBarControlGroupStyle}" TargetType="{x:Type Fluent:RibbonToolBarControlGroup}" />
  <Style BasedOn="{StaticResource FluentDefaultSystemMenuItemStyle}" TargetType="{x:Type Fluent:MenuItem}" />
  <Style BasedOn="{StaticResource MenuGroupSeparatorStyle}" TargetType="{x:Type Fluent:GroupSeparatorMenuItem}" />
  <ControlTemplate x:Key="ApplicationMenuSecondLevelItemTemplate" TargetType="{x:Type Fluent:MenuItem}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style x:Key="{x:Type ScrollViewer}" BasedOn="{StaticResource MenuScrollViewer}" TargetType="{x:Type ScrollViewer}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Grid Width="Auto" Height="Auto" MinHeight="53" Background="Transparent">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="44" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Border x:Name="border" Grid.Column="0" Grid.ColumnSpan="3" Width="Auto" Margin="0" HorizontalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" CornerRadius="2" Visibility="Collapsed" />
      <TextBlock x:Name="textBlock" Grid.Column="1" Width="Auto" Height="Auto" Margin="9,5,3,3" VerticalAlignment="Top" FontWeight="Bold" Text="{TemplateBinding Header}" TextTrimming="CharacterEllipsis" d:LayoutOverrides="Width" />
      <TextBlock x:Name="textBlockDesc" Grid.Column="1" Width="Auto" Height="Auto" Margin="9,22,3,3" HorizontalAlignment="Stretch" VerticalAlignment="Top" Text="{TemplateBinding Description}" TextWrapping="Wrap" d:LayoutOverrides="Width" />
      <Rectangle x:Name="rectangle" Grid.ColumnSpan="1" Width="40" Height="40" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.Background}" RadiusX="1" RadiusY="1" Stroke="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.BorderBrush}" Visibility="Collapsed" />
      <Image x:Name="image" Margin="0,4,0,0" HorizontalAlignment="Center" VerticalAlignment="Top" SnapsToDevicePixels="True" Source="{DynamicResource MenuCheckedImage}" Stretch="None" Visibility="Collapsed" />
      <ContentPresenter x:Name="iconImage" Width="32" Height="32" Margin="3,4,2,2" HorizontalAlignment="Center" VerticalAlignment="Top" Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" SnapsToDevicePixels="True" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="rectangle" Property="Visibility" Value="Visible" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Icon" Value="{x:Null}" />
          <Condition Property="IsChecked" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="image" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsHighlighted" Value="True" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="image" Property="Opacity" Value="0.5" />
        <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
        <Setter TargetName="image" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="HeaderApplicationMenuSecondLevelItemTemplate" TargetType="{x:Type Fluent:MenuItem}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style x:Key="{x:Type ScrollViewer}" BasedOn="{StaticResource MenuScrollViewer}" TargetType="{x:Type ScrollViewer}" />
        <Style x:Key="{x:Type Fluent:MenuItem}" BasedOn="{StaticResource FluentDefaultSystemMenuItemStyle}" TargetType="{x:Type Fluent:MenuItem}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Grid Width="Auto" Height="Auto" MinHeight="53" Background="Transparent">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="44" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Border x:Name="border" Grid.Column="0" Grid.ColumnSpan="3" Width="Auto" Margin="0" HorizontalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" CornerRadius="2" Visibility="Collapsed" />
      <TextBlock x:Name="textBlock" Grid.Column="1" Width="Auto" Height="Auto" Margin="9,5,3,3" VerticalAlignment="Top" FontWeight="Bold" Text="{TemplateBinding Header}" TextTrimming="CharacterEllipsis" d:LayoutOverrides="Width" />
      <TextBlock x:Name="textBlockDesc" Grid.Column="1" Width="Auto" Height="Auto" Margin="9,22,3,3" HorizontalAlignment="Stretch" VerticalAlignment="Top" Text="{TemplateBinding Description}" TextWrapping="Wrap" d:LayoutOverrides="Width" />
      <Rectangle x:Name="rectangle" Grid.ColumnSpan="1" Width="40" Height="40" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.Background}" RadiusX="1" RadiusY="1" Stroke="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.BorderBrush}" Visibility="Collapsed" />
      <Image x:Name="image" Margin="0,4,0,0" HorizontalAlignment="Center" VerticalAlignment="Top" SnapsToDevicePixels="True" Source="{DynamicResource MenuCheckedImage}" Stretch="None" Visibility="Collapsed" />
      <ContentPresenter x:Name="iconImage" Width="32" Height="32" Margin="3,4,2,2" HorizontalAlignment="Center" VerticalAlignment="Top" Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" SnapsToDevicePixels="True" />
      <Path x:Name="path" Grid.Column="3" Width="4" Height="7" Margin="1,0,9,0" HorizontalAlignment="Right" Data="M0,0L1,1 0,2z" Fill="{DynamicResource Fluent.Ribbon.MenuItem.SubMenu.Arrow.Fill}" Stretch="Fill" Stroke="{x:Null}" />
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0,0,0,0" VerticalAlignment="Top" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsSubmenuOpen}" Placement="Right" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
        <Grid Name="DropDown" Margin="0" VerticalAlignment="Stretch" SnapsToDevicePixels="True">
          <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="4" />
          </Grid.RowDefinitions>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="4" />
          </Grid.ColumnDefinitions>
          <Rectangle Grid.Row="1" Grid.Column="1" Width="4" Height="4" Margin="-1,-1,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" StrokeThickness="0">
            <Rectangle.Fill>
              <RadialGradientBrush Center="0.017,0.002" GradientOrigin="0.017,0.002" RadiusX="0.984" RadiusY="1">
                <GradientStop Offset="0" Color="#3F000000" />
                <GradientStop Offset="1" Color="Transparent" />
              </RadialGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Rectangle Grid.Row="0" Grid.Column="1" Width="4" Height="4" Margin="-1,3,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" StrokeThickness="0">
            <Rectangle.Fill>
              <RadialGradientBrush Center="0.032,1.01" GradientOrigin="0.032,1.01" RadiusX="0.984" RadiusY="1">
                <GradientStop Offset="0" Color="#3F000000" />
                <GradientStop Offset="1" Color="Transparent" />
              </RadialGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Rectangle Grid.Row="1" Grid.Column="0" Width="4" Height="4" Margin="3,-1,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" StrokeThickness="0">
            <Rectangle.Fill>
              <RadialGradientBrush Center="0.996,0.027" GradientOrigin="0.996,0.027" RadiusX="0.984" RadiusY="1">
                <GradientStop Offset="0" Color="#3F000000" />
                <GradientStop Offset="1" Color="Transparent" />
              </RadialGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Rectangle Grid.Row="1" Grid.Column="0" Width="Auto" Height="4" Margin="7,-1,1,0" HorizontalAlignment="Stretch" VerticalAlignment="Top" StrokeThickness="0">
            <Rectangle.Fill>
              <LinearGradientBrush MappingMode="RelativeToBoundingBox" StartPoint="0.5,0" EndPoint="0.5,1">
                <GradientStop Offset="0" Color="#3F000000" />
                <GradientStop Offset="1" Color="Transparent" />
              </LinearGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Rectangle Grid.Row="0" Grid.Column="1" Width="4" Height="Auto" Margin="-1,7,0,1" HorizontalAlignment="Left" VerticalAlignment="Stretch" StrokeThickness="0">
            <Rectangle.Fill>
              <LinearGradientBrush MappingMode="RelativeToBoundingBox" StartPoint="0,0.5" EndPoint="1,0.5">
                <GradientStop Offset="0" Color="#3F000000" />
                <GradientStop Offset="1" Color="Transparent" />
              </LinearGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Border x:Name="DropDownBorder" Grid.ColumnSpan="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" CornerRadius="2,2,1,1" SnapsToDevicePixels="True" d:LayoutOverrides="Width, Height">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
              <Border Width="Auto" Height="Auto" VerticalAlignment="Stretch" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" CornerRadius="1" />
              <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Path Grid.RowSpan="2" Width="1" Height="Auto" Margin="24,0,0,0" HorizontalAlignment="Left" Data="M0,0L0,1" Fill="{x:Null}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" Visibility="Visible" />
                <ScrollViewer x:Name="PART_ScrollViewer" Margin="1" SnapsToDevicePixels="True" VerticalScrollBarVisibility="Auto">
                  <StackPanel x:Name="PART_MenuPanel" MaxWidth="{Binding ActualWidth, ElementName=PART_ScrollViewer}" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Orientation="Vertical" />
                </ScrollViewer>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="rectangle" Property="Visibility" Value="Visible" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Icon" Value="{x:Null}" />
          <Condition Property="IsChecked" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="image" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsHighlighted" Value="True" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="image" Property="Opacity" Value="0.5" />
        <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
        <Setter TargetName="image" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="SplitedApplicationMenuSecondLevelItemTemplate" TargetType="{x:Type Fluent:MenuItem}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style x:Key="{x:Type ScrollViewer}" BasedOn="{StaticResource MenuScrollViewer}" TargetType="{x:Type ScrollViewer}" />
        <Style x:Key="{x:Type Fluent:MenuItem}" BasedOn="{StaticResource FluentDefaultSystemMenuItemStyle}" TargetType="{x:Type Fluent:MenuItem}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Grid Width="Auto" Height="Auto" MinHeight="53" Background="Transparent">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="44" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Rectangle Grid.Column="2" Width="1" Margin="0,4,23,4" HorizontalAlignment="Right" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" />
      <Grid Grid.Column="0" Grid.ColumnSpan="3" Width="Auto" Margin="0" HorizontalAlignment="Stretch">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="0.905*" />
          <ColumnDefinition x:Name="columnDefinition" Width="23" />
        </Grid.ColumnDefinitions>
        <Border x:Name="PART_ButtonBorder" Margin="0,0,-1,0" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" CornerRadius="2" Visibility="Collapsed" />
        <Border x:Name="Submenu_Border" Grid.Column="1" Width="Auto" Margin="0" HorizontalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" CornerRadius="2" Visibility="Collapsed" />
      </Grid>
      <TextBlock x:Name="textBlock" Grid.Column="1" Width="Auto" Height="Auto" Margin="9,5,3,3" VerticalAlignment="Top" FontWeight="Bold" Text="{TemplateBinding Header}" TextTrimming="CharacterEllipsis" d:LayoutOverrides="Width" />
      <TextBlock x:Name="textBlockDesc" Grid.Column="1" Width="Auto" Height="Auto" Margin="9,22,3,3" HorizontalAlignment="Stretch" VerticalAlignment="Top" Text="{TemplateBinding Description}" TextWrapping="Wrap" d:LayoutOverrides="Width" />
      <Rectangle x:Name="rectangle" Grid.ColumnSpan="1" Width="40" Height="40" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.Background}" RadiusX="1" RadiusY="1" Stroke="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.BorderBrush}" Visibility="Collapsed" />
      <Image x:Name="image" Margin="0,4,0,0" HorizontalAlignment="Center" VerticalAlignment="Top" SnapsToDevicePixels="True" Source="{DynamicResource MenuCheckedImage}" Stretch="None" Visibility="Collapsed" />
      <ContentPresenter x:Name="iconImage" Width="32" Height="32" Margin="3,4,2,2" HorizontalAlignment="Center" VerticalAlignment="Top" Content="{Binding Icon, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}, RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="True" />
      <Path x:Name="path" Grid.Column="3" Width="4" Height="7" Margin="1,0,9,0" HorizontalAlignment="Right" Data="M0,0L1,1 0,2z" Fill="{DynamicResource Fluent.Ribbon.MenuItem.SubMenu.Arrow.Fill}" Stretch="Fill" Stroke="{x:Null}" />
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0,0,-4,0" VerticalAlignment="Top" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsSubmenuOpen}" Placement="Right" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
        <Grid x:Name="DropDown" Margin="0" VerticalAlignment="Stretch" SnapsToDevicePixels="True">
          <Border x:Name="DropDownBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" CornerRadius="1" SnapsToDevicePixels="True" d:LayoutOverrides="Width, Height">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
              <Border Width="Auto" Height="Auto" VerticalAlignment="Stretch" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" CornerRadius="1" />
              <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Path Grid.RowSpan="2" Width="1" Height="Auto" Margin="24,0,0,0" HorizontalAlignment="Left" Data="M0,0L0,1" Fill="{x:Null}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" Visibility="Visible" />
                <ScrollViewer x:Name="PART_ScrollViewer" Margin="1" SnapsToDevicePixels="True" Style="{DynamicResource MenuScrollViewer}">
                  <StackPanel x:Name="PART_MenuPanel" MaxWidth="{Binding ActualWidth, ElementName=PART_ScrollViewer}" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Orientation="Vertical" />
                </ScrollViewer>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="rectangle" Property="Visibility" Value="Visible" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Icon" Value="{x:Null}" />
          <Condition Property="IsChecked" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="image" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsHighlighted" Value="True" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ButtonBorder" Property="Visibility" Value="Visible" />
        <Setter TargetName="Submenu_Border" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="IsSubmenuOpen" Value="True">
        <Setter TargetName="Submenu_Border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="image" Property="Opacity" Value="0.5" />
        <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
        <Setter TargetName="image" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ApplicationMenuSecondLevelStyle" TargetType="{x:Type Fluent:MenuItem}">
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="ResizeMode" Value="None" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Template" Value="{DynamicResource ApplicationMenuSecondLevelItemTemplate}" />
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Fluent:MenuItem.IsSplited" Value="True" />
          <Condition Property="HasItems" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Template" Value="{DynamicResource SplitedApplicationMenuSecondLevelItemTemplate}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Fluent:MenuItem.IsSplited" Value="False" />
          <Condition Property="HasItems" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Template" Value="{DynamicResource HeaderApplicationMenuSecondLevelItemTemplate}" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="ApplicationMenuItemTemplate" TargetType="{x:Type Fluent:MenuItem}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style x:Key="{x:Type ScrollViewer}" BasedOn="{StaticResource MenuScrollViewer}" TargetType="{x:Type ScrollViewer}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Grid Width="Auto" Height="44" Background="Transparent">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="44" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Border x:Name="border" Grid.Column="0" Grid.ColumnSpan="3" Width="Auto" Margin="0" HorizontalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" CornerRadius="2" Visibility="Collapsed" />
      <TextBlock x:Name="textBlock" Grid.Column="1" Width="Auto" Height="Auto" Margin="9,3,3,3" VerticalAlignment="Center" Text="{TemplateBinding Header}" TextTrimming="CharacterEllipsis" d:LayoutOverrides="Width" />
      <TextBlock x:Name="textBlockDesc" Grid.Column="2" Width="Auto" Height="Auto" Margin="0,3,3,3" HorizontalAlignment="Right" VerticalAlignment="Center" Text="{TemplateBinding Description}" TextWrapping="NoWrap" d:LayoutOverrides="Width" />
      <Rectangle x:Name="rectangle" Grid.ColumnSpan="1" Width="40" Height="40" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.Background}" RadiusX="1" RadiusY="1" Stroke="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.BorderBrush}" Visibility="Collapsed" />
      <Image x:Name="image" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True" Source="{DynamicResource MenuCheckedImage}" Stretch="None" Visibility="Collapsed" />
      <ContentPresenter x:Name="iconImage" Width="32" Height="32" Margin="3,2,2,2" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" SnapsToDevicePixels="True" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="rectangle" Property="Visibility" Value="Visible" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Icon" Value="{x:Null}" />
          <Condition Property="IsChecked" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="image" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsHighlighted" Value="True" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="image" Property="Opacity" Value="0.5" />
        <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
        <Setter TargetName="image" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="HeaderApplicationMenuItemTemplate" TargetType="{x:Type Fluent:MenuItem}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style x:Key="{x:Type ScrollViewer}" BasedOn="{StaticResource MenuScrollViewer}" TargetType="{x:Type ScrollViewer}" />
        <Style x:Key="{x:Type Fluent:MenuItem}" BasedOn="{StaticResource ApplicationMenuSecondLevelStyle}" TargetType="{x:Type Fluent:MenuItem}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Grid Width="Auto" Height="44" Background="Transparent">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="44" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Border x:Name="border" Grid.Column="0" Grid.ColumnSpan="3" Width="Auto" Margin="0" HorizontalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" CornerRadius="2" Visibility="Collapsed" />
      <TextBlock x:Name="textBlock" Grid.Column="1" Width="Auto" Height="Auto" Margin="9,3,3,3" VerticalAlignment="Center" Text="{TemplateBinding Header}" TextTrimming="CharacterEllipsis" d:LayoutOverrides="Width" />
      <Rectangle x:Name="rectangle" Grid.ColumnSpan="1" Width="40" Height="40" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.Background}" RadiusX="1" RadiusY="1" Stroke="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.BorderBrush}" Visibility="Collapsed" />
      <Image x:Name="image" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True" Source="{DynamicResource MenuCheckedImage}" Stretch="None" Visibility="Collapsed" />
      <ContentPresenter x:Name="iconImage" Width="32" Height="32" Margin="3,2,2,2" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" SnapsToDevicePixels="True" />
      <Path x:Name="path" Grid.Column="3" Width="4" Height="7" Margin="1,0,9,0" HorizontalAlignment="Right" Data="M0,0L1,1 0,2z" Fill="{DynamicResource Fluent.Ribbon.MenuItem.SubMenu.Arrow.Fill}" Stretch="Fill" Stroke="{x:Null}" />
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Width="{Binding RightPaneWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:ApplicationMenu}}}" Height="{Binding ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollViewer}}}" Margin="0,0,0,0" VerticalAlignment="Top" AllowsTransparency="True" CustomPopupPlacementCallback="{x:Static FluentHelpers:PopupHelper.SimplePlacementCallback}" Focusable="False" IsOpen="{TemplateBinding IsSubmenuOpen}" Placement="Custom" PlacementTarget="{Binding Converter={StaticResource ApplicationMenuRightScrollViewerExtractorConverter}, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:ApplicationMenu}}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
        <Grid Name="DropDown" Margin="0" VerticalAlignment="Stretch" SnapsToDevicePixels="True">
          <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="4" />
          </Grid.RowDefinitions>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="4" />
          </Grid.ColumnDefinitions>
          <Rectangle Grid.Row="1" Grid.Column="1" Width="4" Height="4" Margin="-1,-1,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" StrokeThickness="0">
            <Rectangle.Fill>
              <RadialGradientBrush Center="0.017,0.002" GradientOrigin="0.017,0.002" RadiusX="0.984" RadiusY="1">
                <GradientStop Offset="0" Color="#3F000000" />
                <GradientStop Offset="1" Color="Transparent" />
              </RadialGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Rectangle Grid.Row="0" Grid.Column="1" Width="4" Height="4" Margin="-1,3,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" StrokeThickness="0">
            <Rectangle.Fill>
              <RadialGradientBrush Center="0.032,1.01" GradientOrigin="0.032,1.01" RadiusX="0.984" RadiusY="1">
                <GradientStop Offset="0" Color="#3F000000" />
                <GradientStop Offset="1" Color="Transparent" />
              </RadialGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Rectangle Grid.Row="1" Grid.Column="0" Width="4" Height="4" Margin="3,-1,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" StrokeThickness="0">
            <Rectangle.Fill>
              <RadialGradientBrush Center="0.996,0.027" GradientOrigin="0.996,0.027" RadiusX="0.984" RadiusY="1">
                <GradientStop Offset="0" Color="#3F000000" />
                <GradientStop Offset="1" Color="Transparent" />
              </RadialGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Rectangle Grid.Row="1" Grid.Column="0" Width="Auto" Height="4" Margin="7,-1,1,0" HorizontalAlignment="Stretch" VerticalAlignment="Top" StrokeThickness="0">
            <Rectangle.Fill>
              <LinearGradientBrush MappingMode="RelativeToBoundingBox" StartPoint="0.5,0" EndPoint="0.5,1">
                <GradientStop Offset="0" Color="#3F000000" />
                <GradientStop Offset="1" Color="Transparent" />
              </LinearGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Rectangle Grid.Row="0" Grid.Column="1" Width="4" Height="Auto" Margin="-1,7,0,1" HorizontalAlignment="Left" VerticalAlignment="Stretch" StrokeThickness="0">
            <Rectangle.Fill>
              <LinearGradientBrush MappingMode="RelativeToBoundingBox" StartPoint="0,0.5" EndPoint="1,0.5">
                <GradientStop Offset="0" Color="#3F000000" />
                <GradientStop Offset="1" Color="Transparent" />
              </LinearGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Border x:Name="DropDownBorder" Grid.ColumnSpan="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" CornerRadius="2,2,1,1" SnapsToDevicePixels="True" d:LayoutOverrides="Width, Height">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
              <Border Width="Auto" Height="Auto" VerticalAlignment="Stretch" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" CornerRadius="1" />
              <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ScrollViewer x:Name="PART_ScrollViewer" Margin="1" HorizontalScrollBarVisibility="Disabled" SnapsToDevicePixels="True" VerticalScrollBarVisibility="Auto">
                  <StackPanel x:Name="PART_MenuPanel" MaxWidth="{Binding ActualWidth, ElementName=PART_ScrollViewer}" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Orientation="Vertical" />
                </ScrollViewer>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="rectangle" Property="Visibility" Value="Visible" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Icon" Value="{x:Null}" />
          <Condition Property="IsChecked" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="image" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsHighlighted" Value="True" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="image" Property="Opacity" Value="0.5" />
        <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
        <Setter TargetName="image" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="SplitedApplicationMenuItemTemplate" TargetType="{x:Type Fluent:MenuItem}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style x:Key="{x:Type ScrollViewer}" BasedOn="{StaticResource MenuScrollViewer}" TargetType="{x:Type ScrollViewer}" />
        <Style BasedOn="{StaticResource ApplicationMenuSecondLevelStyle}" TargetType="{x:Type Fluent:MenuItem}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Grid Width="Auto" Height="44" Background="Transparent">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="44" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <Rectangle Grid.Column="2" Width="1" Margin="0,4,23,4" HorizontalAlignment="Right" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" />
      <Grid Grid.Column="0" Grid.ColumnSpan="3" Width="Auto" Margin="0" HorizontalAlignment="Stretch">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="0.905*" />
          <ColumnDefinition x:Name="columnDefinition" Width="23" />
        </Grid.ColumnDefinitions>
        <Border x:Name="PART_ButtonBorder" Margin="0,0,-1,0" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" CornerRadius="2" Visibility="Collapsed" />
        <Border x:Name="Submenu_Border" Grid.Column="1" Width="Auto" Margin="0" HorizontalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" BorderThickness="1" CornerRadius="2" Visibility="Collapsed" />
      </Grid>
      <TextBlock x:Name="textBlock" Grid.Column="1" Width="Auto" Height="Auto" Margin="9,3,3,3" VerticalAlignment="Center" Text="{TemplateBinding Header}" TextTrimming="CharacterEllipsis" d:LayoutOverrides="Width" />
      <Rectangle x:Name="rectangle" Grid.ColumnSpan="1" Width="40" Height="40" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.Background}" RadiusX="1" RadiusY="1" Stroke="{DynamicResource Fluent.Ribbon.Brushes.ApplicationMenuItem.CheckBox.BorderBrush}" Visibility="Collapsed" />
      <Image x:Name="image" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True" Source="{DynamicResource MenuCheckedImage}" Stretch="None" Visibility="Collapsed" />
      <ContentPresenter x:Name="iconImage" Width="32" Height="32" Margin="3,2,2,2" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding Icon, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}, RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="True" />
      <Path x:Name="path" Grid.Column="3" Width="4" Height="7" Margin="1,0,9,0" HorizontalAlignment="Right" Data="M0,0L1,1 0,2z" Fill="{DynamicResource Fluent.Ribbon.MenuItem.SubMenu.Arrow.Fill}" Stretch="Fill" Stroke="{x:Null}" />
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Width="{Binding RightPaneWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:ApplicationMenu}}}" Height="{Binding ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollViewer}}}" Margin="0,0,0,0" VerticalAlignment="Top" AllowsTransparency="True" CustomPopupPlacementCallback="{x:Static FluentHelpers:PopupHelper.SimplePlacementCallback}" Focusable="False" IsOpen="{TemplateBinding IsSubmenuOpen}" Placement="Custom" PlacementTarget="{Binding Converter={StaticResource ApplicationMenuRightScrollViewerExtractorConverter}, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:ApplicationMenu}}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
        <Grid x:Name="DropDown" Margin="0" VerticalAlignment="Stretch" SnapsToDevicePixels="True">
          <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="4" />
          </Grid.RowDefinitions>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="4" />
          </Grid.ColumnDefinitions>
          <Rectangle Grid.Row="1" Grid.Column="1" Width="4" Height="4" Margin="-1,-1,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" StrokeThickness="0">
            <Rectangle.Fill>
              <RadialGradientBrush Center="0.017,0.002" GradientOrigin="0.017,0.002" RadiusX="0.984" RadiusY="1">
                <GradientStop Offset="0" Color="#3F000000" />
                <GradientStop Offset="1" Color="Transparent" />
              </RadialGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Rectangle Grid.Row="0" Grid.Column="1" Width="4" Height="4" Margin="-1,3,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" StrokeThickness="0">
            <Rectangle.Fill>
              <RadialGradientBrush Center="0.032,1.01" GradientOrigin="0.032,1.01" RadiusX="0.984" RadiusY="1">
                <GradientStop Offset="0" Color="#3F000000" />
                <GradientStop Offset="1" Color="Transparent" />
              </RadialGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Rectangle Grid.Row="1" Grid.Column="0" Width="4" Height="4" Margin="3,-1,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" StrokeThickness="0">
            <Rectangle.Fill>
              <RadialGradientBrush Center="0.996,0.027" GradientOrigin="0.996,0.027" RadiusX="0.984" RadiusY="1">
                <GradientStop Offset="0" Color="#3F000000" />
                <GradientStop Offset="1" Color="Transparent" />
              </RadialGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Rectangle Grid.Row="1" Grid.Column="0" Width="Auto" Height="4" Margin="7,-1,1,0" HorizontalAlignment="Stretch" VerticalAlignment="Top" StrokeThickness="0">
            <Rectangle.Fill>
              <LinearGradientBrush MappingMode="RelativeToBoundingBox" StartPoint="0.5,0" EndPoint="0.5,1">
                <GradientStop Offset="0" Color="#3F000000" />
                <GradientStop Offset="1" Color="Transparent" />
              </LinearGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Rectangle Grid.Row="0" Grid.Column="1" Width="4" Height="Auto" Margin="-1,7,0,1" HorizontalAlignment="Left" VerticalAlignment="Stretch" StrokeThickness="0">
            <Rectangle.Fill>
              <LinearGradientBrush MappingMode="RelativeToBoundingBox" StartPoint="0,0.5" EndPoint="1,0.5">
                <GradientStop Offset="0" Color="#3F000000" />
                <GradientStop Offset="1" Color="Transparent" />
              </LinearGradientBrush>
            </Rectangle.Fill>
          </Rectangle>
          <Border x:Name="DropDownBorder" Grid.ColumnSpan="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" CornerRadius="1" SnapsToDevicePixels="True" d:LayoutOverrides="Width, Height">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
              <Border Width="Auto" Height="Auto" VerticalAlignment="Stretch" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" CornerRadius="1" />
              <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ScrollViewer x:Name="PART_ScrollViewer" Margin="1" SnapsToDevicePixels="True" Style="{DynamicResource MenuScrollViewer}">
                  <StackPanel x:Name="PART_MenuPanel" MaxWidth="{Binding ActualWidth, ElementName=PART_ScrollViewer}" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" Orientation="Vertical" />
                </ScrollViewer>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="rectangle" Property="Visibility" Value="Visible" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Icon" Value="{x:Null}" />
          <Condition Property="IsChecked" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="image" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsHighlighted" Value="True" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ButtonBorder" Property="Visibility" Value="Visible" />
        <Setter TargetName="Submenu_Border" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="IsSubmenuOpen" Value="True">
        <Setter TargetName="Submenu_Border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="image" Property="Opacity" Value="0.5" />
        <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
        <Setter TargetName="image" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ApplicationMenuStyle" TargetType="{x:Type Fluent:MenuItem}">
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="ResizeMode" Value="None" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Template" Value="{DynamicResource ApplicationMenuItemTemplate}" />
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Fluent:MenuItem.IsSplited" Value="True" />
          <Condition Property="HasItems" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Template" Value="{DynamicResource SplitedApplicationMenuItemTemplate}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="Fluent:MenuItem.IsSplited" Value="False" />
          <Condition Property="HasItems" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Template" Value="{DynamicResource HeaderApplicationMenuItemTemplate}" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="ApplicationMenuButtonControlTemplate" TargetType="{x:Type Fluent:ApplicationMenu}">
    <ControlTemplate.Resources>
      <Style BasedOn="{StaticResource ApplicationMenuStyle}" TargetType="{x:Type Fluent:MenuItem}" />
    </ControlTemplate.Resources>
    <Grid Margin="0">
      <ContentControl x:Name="buttonContent" Width="{Binding ActualWidth, ElementName=PART_ButtonBorder}" Height="{Binding ActualHeight, ElementName=PART_ButtonBorder}" Margin="0,0,0,0">
        <Border x:Name="PART_ButtonBorder" Height="23" MinWidth="60" Background="{TemplateBinding Background}">
          <Grid>
            <Rectangle x:Name="rectangle" />
            <ContentPresenter x:Name="contentPresenter" Margin="10,0,10,0" HorizontalAlignment="Center" VerticalAlignment="Center" ContentSource="Header" />
          </Grid>
        </Border>
      </ContentControl>
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" MaxHeight="{TemplateBinding MaxDropDownHeight}" Margin="0,0,-4,0" VerticalAlignment="Top" AllowsTransparency="True" CustomPopupPlacementCallback="{x:Static FluentHelpers:PopupHelper.SimplePlacementCallback}" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Custom" PlacementTarget="{Binding ElementName=buttonContent}" VerticalOffset="{Binding ElementName=buttonContent, Path=ActualHeight}">
        <Grid Name="DropDown" Margin="0" VerticalAlignment="Top" SnapsToDevicePixels="True">
          <Border x:Name="PART_DropDownBorder" MinWidth="{TemplateBinding ActualWidth}" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" SnapsToDevicePixels="True" d:LayoutOverrides="Width, Height">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top">
              <Grid HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" MinHeight="17" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" MinWidth="100" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <ScrollViewer Grid.Row="0" Grid.Column="0" IsTabStop="False" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Auto" Style="{DynamicResource MenuScrollViewer}">
                  <StackPanel x:Name="PART_MenuPanel" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" Orientation="Vertical" ScrollViewer.VerticalScrollBarVisibility="Auto" />
                </ScrollViewer>
                <Border Grid.Row="0" Grid.Column="1" Width="{TemplateBinding RightPaneWidth}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" BorderThickness="1,0,0,0">
                  <ScrollViewer x:Name="PART_ScrollViewer" Margin="1" IsTabStop="False" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Auto" SnapsToDevicePixels="True" Style="{DynamicResource MenuScrollViewer}">
                    <ContentPresenter x:Name="PART_RightContentPresenter" ContentSource="RightPaneContent" />
                  </ScrollViewer>
                </Border>
                <Border Grid.Row="1" Grid.ColumnSpan="2" Margin="0" Background="{DynamicResource Fluent.Ribbon.Brushes.Ribbon.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" BorderThickness="0,1,0,0">
                  <ContentPresenter ContentSource="FooterPaneContent" />
                </Border>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="PART_ButtonBorder" Property="Opacity" Value="0.5" />
        <Setter TargetName="contentPresenter" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="Header" Value="{x:Null}">
        <Setter TargetName="contentPresenter" Property="Content">
          <Setter.Value>
            <Image HorizontalAlignment="Center" VerticalAlignment="Center" Source="pack://application:,,,/Fluent;component\Themes\Images\ApplicationMenu.png" Stretch="None" />
          </Setter.Value>
        </Setter>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style TargetType="{x:Type Fluent:ApplicationMenu}">
    <Setter Property="Template" Value="{DynamicResource ApplicationMenuButtonControlTemplate}" />
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.AccentBaseColorBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.IdealForegroundColorBrush}" />
  </Style>
  <Style x:Key="RibbonTabControlStyle" TargetType="{x:Type Fluent:RibbonTabControl}">
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.Foreground}" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Template" Value="{DynamicResource RibbonTabControlControlTemplate}" />
  </Style>
  <ControlTemplate x:Key="RibbonDropDownButtonControlTemplate" TargetType="{x:Type Fluent:DropDownButton}">
    <ControlTemplate.Resources>
      <Style BasedOn="{StaticResource MenuSeparatorStyle}" TargetType="{x:Type Separator}" />
    </ControlTemplate.Resources>
    <Grid>
      <Border x:Name="PART_ButtonBorder" Height="Auto" HorizontalAlignment="Left" VerticalAlignment="Stretch" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" d:LayoutOverrides="Width, Height">
        <Grid Height="Auto">
          <StackPanel x:Name="stackPanel" Width="Auto" Orientation="Vertical" d:LayoutOverrides="Width, Height">
            <ContentPresenter x:Name="iconImage" Width="32" Height="32" Margin="3,2,3,1" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" SnapsToDevicePixels="True" />
            <Fluent:TwoLineLabel x:Name="controlLabel" Margin="2,0,2,2" HorizontalAlignment="Center" VerticalAlignment="Center" HasGlyph="{TemplateBinding HasTriangle}" Style="{DynamicResource TwoLineLabelStyle}" Text="{TemplateBinding Header}" />
          </StackPanel>
        </Grid>
      </Border>
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0,0,-4,0" VerticalAlignment="Top" AllowsTransparency="True" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
        <Grid Name="DropDown" Margin="0" VerticalAlignment="Top" SnapsToDevicePixels="True">
          <Border x:Name="PART_DropDownBorder" MinWidth="{TemplateBinding ActualWidth}" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource GrayBrush2}" BorderThickness="1" CornerRadius="1" SnapsToDevicePixels="True" d:LayoutOverrides="Width, Height">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top">
              <Border Width="Auto" Height="Auto" VerticalAlignment="Top" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" CornerRadius="1" />
              <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ScrollViewer x:Name="PART_ScrollViewer" MaxHeight="{TemplateBinding MaxDropDownHeight}" Margin="1" HorizontalScrollBarVisibility="Hidden" IsTabStop="False" SnapsToDevicePixels="True" Style="{DynamicResource MenuScrollViewer}" VerticalScrollBarVisibility="Auto">
                  <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Local" Orientation="Vertical" />
                </ScrollViewer>
                <Border x:Name="resizeBorder" Grid.Row="1" Height="11" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgoundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0,1,0,0" CornerRadius="0,0,1,1">
                  <Grid>
                    <Thumb x:Name="PART_ResizeVerticalThumb" Width="Auto" Height="10" Margin="0,0,0,-90" HorizontalAlignment="Stretch" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                    <Thumb x:Name="PART_ResizeBothThumb" Width="10" Height="10" Margin="0,0,0,-90" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                  </Grid>
                </Border>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ResizeMode" Value="None">
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Both">
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Vertical">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="iconImage" Property="Content" Value="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" />
        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
        <Setter TargetName="controlLabel" Property="Text" Value="" />
        <Setter TargetName="iconImage" Property="Width" Value="16" />
        <Setter TargetName="iconImage" Property="Height" Value="16" />
        <Setter TargetName="iconImage" Property="Margin" Value="2,0,0,0" />
        <Setter TargetName="controlLabel" Property="Margin" Value="-2,0,2,1" />
        <Setter TargetName="controlLabel" Property="Width" Value="10" />
        <Setter TargetName="controlLabel" Property="VerticalAlignment" Value="Center" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="iconImage" Property="Content" Value="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" />
        <Setter TargetName="stackPanel" Property="Width" Value="Auto" />
        <Setter TargetName="iconImage" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
        <Setter TargetName="controlLabel" Property="Margin" Value="2,0,2,1" />
        <Setter TargetName="PART_ButtonBorder" Property="VerticalAlignment" Value="Stretch" />
        <Setter TargetName="iconImage" Property="Width" Value="16" />
        <Setter TargetName="iconImage" Property="Height" Value="16" />
        <Setter TargetName="iconImage" Property="Margin" Value="2,0,2,0" />
        <Setter TargetName="controlLabel" Property="VerticalAlignment" Value="Center" />
      </Trigger>
      <Trigger Property="IsDropDownOpen" Value="True">
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsDropDownOpen" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="DatePickerCalendarStyle" TargetType="{x:Type Calendar}" BasedOn="{StaticResource {x:Type Calendar}}">
    <Setter Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.AccentBaseColorBrush}" />
  </Style>
  <Style TargetType="{x:Type DatePicker}">
    <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
    <Setter Property="IsTodayHighlighted" Value="True" />
    <Setter Property="SelectedDateFormat" Value="Short" />
    <Setter Property="Padding" Value="2" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <!--Set CalendarStyle to DatePickerCalendarStyle.-->
    <Setter Property="CalendarStyle" Value="{DynamicResource DatePickerCalendarStyle}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type DatePicker}">
          <Border x:Name="PART_Border" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" BorderBrush="{DynamicResource GrayBrush2}" Background="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Background}">
            <Grid x:Name="PART_Root" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Button x:Name="PART_Button" Grid.Column="1" Foreground="{TemplateBinding Foreground}" Focusable="False" HorizontalAlignment="Left" Margin="3,0,3,0" Grid.Row="0" Style="{StaticResource DropDownButtonStyle}" VerticalAlignment="Top" />
              <TextBox x:Name="PART_TextBox" Grid.Column="0" Foreground="{TemplateBinding Foreground}" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="Stretch" Grid.Row="0" Text="{Binding Path=SelectedDate, RelativeSource={RelativeSource AncestorType={x:Type DatePicker}}, StringFormat={}{0:d}}" VerticalContentAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Background}" BorderThickness="0" />
              <Grid x:Name="PART_DisabledVisual" Grid.ColumnSpan="2" Grid.Column="0" IsHitTestVisible="False" Opacity="0" Grid.Row="0">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Popup x:Name="PART_Popup" AllowsTransparency="True" Placement="Bottom" PlacementTarget="{Binding ElementName=PART_TextBox}" StaysOpen="False" />
              </Grid>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="PART_Border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.BorderBrush}" />
              <Setter TargetName="PART_Border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.Background}" />
              <Setter TargetName="PART_TextBox" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.Background}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <ControlTemplate x:Key="RibbonSplitButtonControlTemplate" TargetType="{x:Type Fluent:SplitButton}">
    <ControlTemplate.Resources>
      <Style BasedOn="{StaticResource MenuSeparatorStyle}" TargetType="{x:Type Separator}" />
    </ControlTemplate.Resources>
    <Grid>
      <Border Name="PART_ButtonBorder" VerticalAlignment="Stretch" Background="Transparent" BorderBrush="Transparent" BorderThickness="1">
        <StackPanel Name="stackPanel" KeyboardNavigation.TabNavigation="Local" Orientation="Vertical">
          <Fluent:ToggleButton x:Name="PART_Button" Width="Auto" Height="Auto" Margin="0,0,0,0" CanAddToQuickAccessToolBar="{TemplateBinding CanAddButtonToQuickAccessToolBar}" Command="{TemplateBinding Command}" CommandParameter="{TemplateBinding CommandParameter}" CommandTarget="{TemplateBinding CommandTarget}" GroupName="{Binding GroupName, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Header="{TemplateBinding Header}" Icon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsDefinitive="{TemplateBinding IsDefinitive}" IsEnabled="{TemplateBinding IsButtonEnabled}" LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" Style="{DynamicResource InnerButtonStyle}" ToolTip="{TemplateBinding ToolTip}" />
          <Border Name="downBorder" Margin="0,0,0,0" Background="Transparent" BorderBrush="Transparent" BorderThickness="0,0,0,0">
            <Grid>
              <Fluent:TwoLineLabel x:Name="controlLabel" Margin="2,1,2,2" HorizontalAlignment="Center" VerticalAlignment="Center" HasGlyph="{TemplateBinding HasTriangle}" Style="{DynamicResource TwoLineLabelStyle}" Text="{TemplateBinding Header}" />
            </Grid>
          </Border>
        </StackPanel>
      </Border>
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0,0,-4,0" VerticalAlignment="Top" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
        <Grid Name="DropDown" Margin="0" VerticalAlignment="Top" IsEnabled="{TemplateBinding IsEnabled}" SnapsToDevicePixels="True">
          <Border x:Name="PART_DropDownBorder" MinWidth="{TemplateBinding ActualWidth}" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" CornerRadius="1" SnapsToDevicePixels="True" d:LayoutOverrides="Width, Height">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top">
              <Border Width="Auto" Height="Auto" VerticalAlignment="Top" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" />
              <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ScrollViewer x:Name="PART_ScrollViewer" MaxHeight="{TemplateBinding MaxDropDownHeight}" Margin="1" HorizontalScrollBarVisibility="Hidden" SnapsToDevicePixels="True" Style="{DynamicResource MenuScrollViewer}" VerticalScrollBarVisibility="Auto">
                  <StackPanel x:Name="PART_MenuPanel" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" Orientation="Vertical" />
                </ScrollViewer>
                <Border x:Name="resizeBorder" Grid.Row="1" Height="11" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgoundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0,1,0,0" CornerRadius="0,0,1,1">
                  <Grid>
                    <Thumb x:Name="PART_ResizeVerticalThumb" Width="Auto" Height="10" Margin="0,0,0,-90" HorizontalAlignment="Stretch" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                    <Thumb x:Name="PART_ResizeBothThumb" Width="10" Height="10" Margin="0,0,0,-90" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                  </Grid>
                </Border>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ResizeMode" Value="None">
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Both">
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Vertical">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="PART_Button" Property="Size" Value="Small" />
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="controlLabel" Property="Width" Value="10" />
        <Setter TargetName="controlLabel" Property="Margin" Value="0,-19,0,0" />
        <Setter TargetName="controlLabel" Property="Text" Value="" />
        <Setter TargetName="downBorder" Property="Padding" Value="1,0,0,0" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="PART_Button" Property="Size" Value="Middle" />
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="controlLabel" Property="Width" Value="10" />
        <Setter TargetName="controlLabel" Property="Margin" Value="0,-19,0,0" />
        <Setter TargetName="controlLabel" Property="Text" Value="" />
      </Trigger>
      <Trigger Property="IsButtonEnabled" Value="False">
        <Setter TargetName="PART_Button" Property="IsEnabled" Value="False" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="PART_Button" Property="IsEnabled" Value="False" />
        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
      </Trigger>
      <Trigger Property="IsDropDownOpen" Value="True">
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Button" Property="IsMouseOver" Value="True" />
          <Condition Property="IsDropDownOpen" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="downBorder" Property="IsMouseOver" Value="True" />
          <Condition Property="IsDropDownOpen" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
        <Setter TargetName="downBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
        <Setter TargetName="downBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="ScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
      </Trigger>
    </Style.Triggers>
    <Setter Property="Template" Value="{DynamicResource ScrollViewerControlTemplate}" />
  </Style>
  <Style x:Key="ToolbarDropDownButtonStyle" TargetType="{x:Type Fluent:DropDownButton}">
    <Setter Property="Template" Value="{DynamicResource ToolbarDropDownButtonControlTemplate}" />
    <Setter Property="Height" Value="22" />
    <Setter Property="Width" Value="13" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
  </Style>
  <ControlTemplate x:Key="QuickAccessToolbarControlTemplate" TargetType="{x:Type Fluent:QuickAccessToolBar}">
    <DockPanel x:Name="PART_RootPanel" KeyboardNavigation.TabNavigation="Local" WindowChrome.IsHitTestVisibleInChrome="True">
      <ContentControl x:Name="menuContentControl" HorizontalAlignment="Right" DockPanel.Dock="Right" Focusable="True" WindowChrome.IsHitTestVisibleInChrome="True">
        <Fluent:DropDownButton x:Name="PART_MenuDownButton" Width="13" Height="22" HorizontalAlignment="Right" VerticalAlignment="Stretch" CanAddToQuickAccessToolBar="False" DockPanel.Dock="Right" Icon="pack://application:,,,/Fluent;Component/Themes/Images/QuickAccessToolBarDropDown.png" IsEnabled="{TemplateBinding IsEnabled}" KeyboardNavigation.TabIndex="3" Size="Small" Style="{DynamicResource ToolbarDropDownButtonStyle}" ToolTip="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.QuickAccessToolBarDropDownButtonTooltip, Mode=OneWay}" Visibility="{Binding IsMenuDropDownVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
          <Fluent:GroupSeparatorMenuItem Header="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.QuickAccessToolBarMenuHeader, Mode=OneWay}" Style="{DynamicResource MenuGroupSeparatorStyle}" />
          <StackPanel x:Name="PART_MenuPanel" />
          <Separator x:Name="menuSeparator" Style="{DynamicResource MenuSeparatorStyle}" />
          <Fluent:MenuItem x:Name="PART_ShowBelow" CanAddToQuickAccessToolBar="False" Header="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.QuickAccessToolBarMenuShowBelow, Mode=OneWay}" />
          <Fluent:MenuItem x:Name="PART_ShowAbove" CanAddToQuickAccessToolBar="False" Header="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.QuickAccessToolBarMenuShowAbove, Mode=OneWay}" Visibility="Collapsed" />
        </Fluent:DropDownButton>
      </ContentControl>
      <Fluent:DropDownButton x:Name="PART_ToolbarDownButton" Width="13" Height="22" HorizontalAlignment="Right" VerticalAlignment="Stretch" Fluent:KeyTip.Keys="00" DockPanel.Dock="Right" WindowChrome.IsHitTestVisibleInChrome="True" Icon="pack://application:,,,/Fluent;Component/Themes/Images/QuickAccessToolBarExtender.png" IsEnabled="{TemplateBinding IsEnabled}" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local" Size="Small" Style="{DynamicResource ToolbarDropDownButtonStyle}" ToolTip="{Binding Source={x:Static Fluent:RibbonLocalization.Current}, Path=Localization.QuickAccessToolBarMoreControlsButtonTooltip, Mode=OneWay}" Visibility="Collapsed">
        <Fluent:DropDownButton.ContextMenu>
          <ContextMenu />
        </Fluent:DropDownButton.ContextMenu>
        <StackPanel Width="Auto" Height="26" Margin="-1" Background="{TemplateBinding Background}" Orientation="Horizontal">
          <StackPanel x:Name="PART_ToolBarOverflowPanel" Width="Auto" Height="Auto" Margin="1,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center" Orientation="Horizontal" />
          <Label x:Name="popupContentControl" Width="13" Height="22" Margin="1,0" Padding="0" HorizontalAlignment="Left" VerticalAlignment="Center" Background="{x:Null}" Focusable="False" />
        </StackPanel>
      </Fluent:DropDownButton>
      <StackPanel x:Name="PART_ToolBarPanel" Width="Auto" Height="Auto" VerticalAlignment="Stretch" KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local" Orientation="Horizontal" />
    </DockPanel>
    <ControlTemplate.Triggers>
      <Trigger Property="CanQuickAccessLocationChanging" Value="False">
        <Setter TargetName="PART_ShowBelow" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ShowAbove" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="menuSeparator" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="ShowAboveRibbon" Value="False">
        <Setter TargetName="PART_ShowBelow" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ShowAbove" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="HasOverflowItems" Value="True">
        <Setter TargetName="PART_ToolbarDownButton" Property="Visibility" Value="Visible" />
        <Setter TargetName="popupContentControl" Property="Content" Value="{Binding ElementName=PART_MenuDownButton, Mode=OneWay}" />
        <Setter TargetName="menuContentControl" Property="Content" Value="{x:Null}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="FluentPopupMenuControlTemplate" TargetType="{x:Type Fluent:ContextMenu}">
    <ControlTemplate.Resources>
      <Style BasedOn="{StaticResource MenuSeparatorStyle}" TargetType="{x:Type Separator}" />
      <Style BasedOn="{StaticResource MenuGroupSeparatorStyle}" TargetType="{x:Type Fluent:GroupSeparatorMenuItem}" />
    </ControlTemplate.Resources>
    <Grid Height="Auto" HorizontalAlignment="Left" VerticalAlignment="Top">
      <Border HorizontalAlignment="Left" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="0" CornerRadius="4" SnapsToDevicePixels="True" d:LayoutOverrides="Width, Height">
        <Grid Width="Auto" Height="Auto" HorizontalAlignment="Left" VerticalAlignment="Top">
          <Grid HorizontalAlignment="Left" VerticalAlignment="Top">
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ScrollViewer x:Name="PART_ScrollViewer" Margin="1" SnapsToDevicePixels="True" Style="{DynamicResource MenuScrollViewer}" VerticalScrollBarVisibility="Auto">
              <StackPanel x:Name="PART_ItemsHost" Width="Auto" Height="Auto" Margin="0" HorizontalAlignment="Left" VerticalAlignment="Top" IsItemsHost="True" Orientation="Vertical" d:LayoutOverrides="Width, Height" />
            </ScrollViewer>
            <Border x:Name="resizeBorder" Grid.Row="1" Height="11" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgoundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0,1,0,0" CornerRadius="0,0,1,1">
              <Grid>
                <Thumb x:Name="PART_ResizeVerticalThumb" Width="Auto" Height="10" Margin="0,0,0,-90" HorizontalAlignment="Stretch" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                <Thumb x:Name="PART_ResizeBothThumb" Width="10" Height="10" Margin="0,0,0,-90" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
              </Grid>
            </Border>
          </Grid>
        </Grid>
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="FlowDirection" Value="RightToLeft">
        <Setter TargetName="PART_ResizeBothThumb" Property="Cursor" Value="SizeNESW" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="None">
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Both">
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Vertical">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="PopupMenuControlTemplate" TargetType="{x:Type ContextMenu}">
    <ControlTemplate.Resources>
      <Style BasedOn="{StaticResource MenuSeparatorStyle}" TargetType="{x:Type Separator}" />
      <Style BasedOn="{StaticResource MenuGroupSeparatorStyle}" TargetType="{x:Type Fluent:GroupSeparatorMenuItem}" />
    </ControlTemplate.Resources>
    <Grid Height="Auto" HorizontalAlignment="Left" VerticalAlignment="Top">
      <Border HorizontalAlignment="Left" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" CornerRadius="1" SnapsToDevicePixels="True" d:LayoutOverrides="Width, Height">
        <Grid Width="Auto" Height="Auto" HorizontalAlignment="Left" VerticalAlignment="Top">
          <Border Width="Auto" Height="Auto" VerticalAlignment="Stretch" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" CornerRadius="1" />
          <Grid HorizontalAlignment="Left" VerticalAlignment="Top">
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ScrollViewer x:Name="PART_ScrollViewer" Margin="1" ScrollViewer.VerticalScrollBarVisibility="Auto" SnapsToDevicePixels="True" Style="{DynamicResource MenuScrollViewer}">
              <StackPanel x:Name="PART_ItemsHost" Grid.RowSpan="1" Width="Auto" Height="Auto" Margin="0" HorizontalAlignment="Left" VerticalAlignment="Top" IsItemsHost="True" d:LayoutOverrides="Width, Height" />
            </ScrollViewer>
          </Grid>
        </Grid>
      </Border>
    </Grid>
  </ControlTemplate>
  <ControlTemplate x:Key="GalleryControlTemplate" TargetType="{x:Type Fluent:Gallery}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style x:Key="{x:Type ScrollViewer}" BasedOn="{StaticResource ScrollViewerStyle}" TargetType="{x:Type ScrollViewer}" />
        <Style x:Key="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarWhite}" TargetType="{x:Type ScrollBar}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Border x:Name="layoutRoot" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
      <Grid Width="Auto">
        <Grid.RowDefinitions>
          <RowDefinition Height="Auto" />
          <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Border x:Name="border" Height="13" Background="{DynamicResource Fluent.Ribbon.Brushes.Gallery.Header.Background}" BorderBrush="{x:Null}" BorderThickness="0">
          <Fluent:DropDownButton x:Name="PART_DropDownButton" Height="Auto" HorizontalAlignment="Left" VerticalAlignment="Top" Header="{TemplateBinding SelectedFilterTitle}" Style="{DynamicResource GalleryDropDownButtonStyle}" />
        </Border>
        <ScrollViewer x:Name="scrollViewer" Grid.Row="1" Grid.RowSpan="1" Margin="1" Focusable="False">
          <Fluent:GalleryPanel Background="{DynamicResource WhiteBrush}" Filter="{TemplateBinding SelectedFilterGroups}" GroupBy="{TemplateBinding GroupBy}" GroupByAdvanced="{TemplateBinding GroupByAdvanced}" IsItemsHost="True" ItemContainerGenerator="{Binding ItemContainerGenerator, RelativeSource={RelativeSource TemplatedParent}}" ItemHeight="{TemplateBinding ItemHeight}" ItemWidth="{TemplateBinding ItemWidth}" MaxItemsInRow="{TemplateBinding MaxItemsInRow}" MinItemsInRow="{TemplateBinding MinItemsInRow}" Orientation="{TemplateBinding Orientation}" />
        </ScrollViewer>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="HasFilter" Value="False">
        <Setter TargetName="border" Property="Visibility" Value="Collapsed" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="GalleryStyle" TargetType="{x:Type Fluent:Gallery}">
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
    <Setter Property="Template" Value="{DynamicResource GalleryControlTemplate}" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="BorderThickness" Value="0,0,0,1" />
    <Style.Triggers>
      <Trigger Property="IsLastItem" Value="True">
        <Setter Property="BorderThickness" Value="0" />
      </Trigger>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <StackPanel Orientation="Vertical" />
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="Orientation" Value="Horizontal">
        <Setter Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <WrapPanel Orientation="Horizontal" />
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="ComboBoxBackstageControlTemplate" TargetType="{x:Type Fluent:ComboBox}">
    <ControlTemplate.Resources>
      <Style x:Key="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarWhite}" TargetType="{x:Type ScrollBar}" />
      <Style x:Key="{x:Type Fluent:ToggleButton}" BasedOn="{StaticResource ToggleButtonBackstageStyle}" TargetType="{x:Type Fluent:ToggleButton}" />
      <Style x:Key="{x:Type ScrollViewer}" BasedOn="{StaticResource ScrollViewerStyle}" TargetType="{x:Type ScrollViewer}" />
      <Style x:Key="{x:Type ComboBoxItem}" BasedOn="{StaticResource MetroComboBoxItemBackstageStyle}" TargetType="{x:Type ComboBoxItem}" />
    </ControlTemplate.Resources>
    <Grid>
      <Border x:Name="PART_ContentBorder" Height="Auto" HorizontalAlignment="Stretch">
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="22" />
          </Grid.ColumnDefinitions>
          <Fluent:ToggleButton x:Name="ToggleButton" Grid.Column="0" Grid.ColumnSpan="2" Width="{Binding ElementName=PART_ContentBorder, Path=ActualWidth}" Height="Auto" Margin="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" CanAddToQuickAccessToolBar="False" ClickMode="Press" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsDefinitive="False" Size="Small" />
          <ContentPresenter x:Name="PART_ContentSite" Margin="3" HorizontalAlignment="Left" VerticalAlignment="Top" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False" />
          <Image x:Name="PART_SelectedImage" Width="Auto" Height="Auto" Margin="0" HorizontalAlignment="Left" VerticalAlignment="Top" IsHitTestVisible="False" Stretch="None" Visibility="Collapsed" />
          <TextBox x:Name="PART_EditableTextBox" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Background}" BorderThickness="0,0,0,0" Focusable="True" IsReadOnly="{TemplateBinding IsReadOnly}" TextWrapping="NoWrap" Visibility="Collapsed" />
          <Path x:Name="path" Grid.Column="1" Width="7" Height="4" Margin="0,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0L1,1 2,0z" Fill="{DynamicResource BlackBrush}" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="0" />
        </Grid>
      </Border>
      <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0,0,-4,0" VerticalAlignment="Top" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PlacementTarget="{Binding ElementName=PART_ContentBorder}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
        <Popup.Resources>
          <ResourceDictionary>
            <Style x:Key="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarWhite}" TargetType="{x:Type ScrollBar}" />
          </ResourceDictionary>
        </Popup.Resources>
        <Grid Name="DropDown" Margin="0" VerticalAlignment="Top" SnapsToDevicePixels="True">
          <Border x:Name="PART_DropDownBorder" MinWidth="{Binding ActualWidth, ElementName=PART_ContentBorder}" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" CornerRadius="1" SnapsToDevicePixels="True">
            <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top" KeyboardNavigation.DirectionalNavigation="Cycle">
              <Border Width="Auto" Height="Auto" VerticalAlignment="Stretch" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" CornerRadius="1" />
              <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Rectangle Grid.RowSpan="2" Width="1" Height="Auto" Margin="24,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Stretch" Fill="{x:Null}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" Visibility="Visible" />
                <Grid x:Name="PART_MenuPanel" MaxHeight="{TemplateBinding MaxDropDownHeight}" VerticalAlignment="Top">
                  <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                  </Grid.RowDefinitions>
                  <ScrollViewer x:Name="PART_ScrollViewer" Grid.Row="0" Margin="1" VerticalAlignment="Stretch" Background="{DynamicResource WhiteBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="0,0,0,1" Focusable="False" KeyboardNavigation.DirectionalNavigation="None" SnapsToDevicePixels="True">
                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                  </ScrollViewer>
                  <ContentPresenter x:Name="menuPresenter" Grid.Row="1" VerticalAlignment="Top" ContentSource="Menu" KeyboardNavigation.DirectionalNavigation="None" />
                </Grid>
                <Border x:Name="resizeBorder" Grid.Row="2" Height="11" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgoundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0,1,0,0" CornerRadius="0,0,1,1">
                  <Grid>
                    <Thumb x:Name="PART_ResizeVerticalThumb" Width="Auto" Height="10" Margin="0,0,0,-90" HorizontalAlignment="Stretch" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                    <Thumb x:Name="PART_ResizeBothThumb" Width="10" Height="10" Margin="0,0,0,-90" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                  </Grid>
                </Border>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ResizeMode" Value="None">
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Both">
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Vertical">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="path" Property="Opacity" Value="0.5" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <ControlTemplate x:Key="ComboboxControlTemplate" TargetType="{x:Type Fluent:ComboBox}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style x:Key="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarWhite}" TargetType="{x:Type ScrollBar}" />
        <Style x:Key="{x:Type ScrollViewer}" BasedOn="{StaticResource ScrollViewerStyle}" TargetType="{x:Type ScrollViewer}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Border Width="Auto" Height="22" Background="Transparent">
      <Grid Width="Auto" Height="Auto" Background="Transparent">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition />
        </Grid.ColumnDefinitions>
        <StackPanel x:Name="stackPanel" Grid.ColumnSpan="1" Margin="0,0,4,0" HorizontalAlignment="Stretch" Orientation="Horizontal">
          <ContentPresenter x:Name="iconImage" Width="16" Height="16" Margin="3,0,0,0" VerticalAlignment="Center" Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" />
          <TextBlock x:Name="textBlock" Margin="5,0,0,0" VerticalAlignment="Center" Text="{TemplateBinding Header}" TextWrapping="Wrap" />
        </StackPanel>
        <Border x:Name="PART_ContentBorder" Grid.Column="1" Grid.ColumnSpan="1" Width="{TemplateBinding InputWidth}" Height="Auto" HorizontalAlignment="Right" Background="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Background}" BorderBrush="{DynamicResource GrayBrush2}" BorderThickness="1,1,1,1" d:LayoutOverrides="GridBox">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="13" />
            </Grid.ColumnDefinitions>
            <Fluent:ToggleButton x:Name="ToggleButton" Grid.ColumnSpan="2" Height="Auto" Margin="0" VerticalAlignment="Stretch" BorderThickness="0" CanAddToQuickAccessToolBar="False" ClickMode="Press" Focusable="false" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsDefinitive="False" Style="{DynamicResource RibbonComboButtonStyle}" />
            <ContentPresenter x:Name="PART_ContentSite" Margin="3,0,3,0" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False" />
            <Image x:Name="PART_SelectedImage" Width="Auto" Height="Auto" Margin="0" HorizontalAlignment="Left" VerticalAlignment="Top" IsHitTestVisible="False" Stretch="None" Visibility="Collapsed" />
            <TextBox x:Name="PART_EditableTextBox" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Background}" BorderThickness="0,0,0,0" Focusable="True" Foreground="{TemplateBinding Foreground}" IsReadOnly="{TemplateBinding IsReadOnly}" TextWrapping="NoWrap" Visibility="Hidden" />
          </Grid>
        </Border>
        <Popup x:Name="PART_Popup" Grid.ColumnSpan="2" Margin="0,0,-4,0" VerticalAlignment="Top" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PlacementTarget="{Binding ElementName=PART_ContentBorder}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
          <Popup.Resources>
            <ResourceDictionary>
              <Style x:Key="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarWhite}" TargetType="{x:Type ScrollBar}" />
            </ResourceDictionary>
          </Popup.Resources>
          <Grid Name="DropDown" Margin="0" VerticalAlignment="Top" SnapsToDevicePixels="True">
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="4" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="4" />
            </Grid.ColumnDefinitions>
            <Rectangle Grid.Row="1" Grid.Column="1" Width="4" Height="4" Margin="-1,-1,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" StrokeThickness="0">
              <Rectangle.Fill>
                <RadialGradientBrush Center="0.017,0.002" GradientOrigin="0.017,0.002" RadiusX="0.984" RadiusY="1">
                  <GradientStop Offset="0" Color="#3F000000" />
                  <GradientStop Offset="1" Color="Transparent" />
                </RadialGradientBrush>
              </Rectangle.Fill>
            </Rectangle>
            <Rectangle Grid.Row="0" Grid.Column="1" Width="4" Height="4" Margin="-1,3,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" StrokeThickness="0">
              <Rectangle.Fill>
                <RadialGradientBrush Center="0.032,1.01" GradientOrigin="0.032,1.01" RadiusX="0.984" RadiusY="1">
                  <GradientStop Offset="0" Color="#3F000000" />
                  <GradientStop Offset="1" Color="Transparent" />
                </RadialGradientBrush>
              </Rectangle.Fill>
            </Rectangle>
            <Rectangle Grid.Row="1" Grid.Column="0" Width="4" Height="4" Margin="3,-1,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" StrokeThickness="0">
              <Rectangle.Fill>
                <RadialGradientBrush Center="0.996,0.027" GradientOrigin="0.996,0.027" RadiusX="0.984" RadiusY="1">
                  <GradientStop Offset="0" Color="#3F000000" />
                  <GradientStop Offset="1" Color="Transparent" />
                </RadialGradientBrush>
              </Rectangle.Fill>
            </Rectangle>
            <Rectangle Grid.Row="1" Grid.Column="0" Width="Auto" Height="4" Margin="7,-1,1,0" HorizontalAlignment="Stretch" VerticalAlignment="Top" StrokeThickness="0">
              <Rectangle.Fill>
                <LinearGradientBrush MappingMode="RelativeToBoundingBox" StartPoint="0.5,0" EndPoint="0.5,1">
                  <GradientStop Offset="0" Color="#3F000000" />
                  <GradientStop Offset="1" Color="Transparent" />
                </LinearGradientBrush>
              </Rectangle.Fill>
            </Rectangle>
            <Rectangle Grid.Row="0" Grid.Column="1" Width="4" Height="Auto" Margin="-1,7,0,1" HorizontalAlignment="Left" VerticalAlignment="Stretch" StrokeThickness="0">
              <Rectangle.Fill>
                <LinearGradientBrush MappingMode="RelativeToBoundingBox" StartPoint="0,0.5" EndPoint="1,0.5">
                  <GradientStop Offset="0" Color="#3F000000" />
                  <GradientStop Offset="1" Color="Transparent" />
                </LinearGradientBrush>
              </Rectangle.Fill>
            </Rectangle>
            <Border x:Name="PART_DropDownBorder" Grid.ColumnSpan="1" MinWidth="{Binding ActualWidth, ElementName=PART_ContentBorder}" Margin="0" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}" BorderThickness="1" CornerRadius="1" SnapsToDevicePixels="True" d:LayoutOverrides="Width, Height">
              <Grid Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Top" KeyboardNavigation.DirectionalNavigation="Cycle">
                <Border Width="Auto" Height="Auto" VerticalAlignment="Stretch" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}" BorderThickness="1" CornerRadius="1" />
                <Grid Margin="1" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                  <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                  </Grid.RowDefinitions>
                  <Rectangle Grid.RowSpan="3" Width="1" Height="Auto" Margin="24,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Stretch" Fill="{x:Null}" Stretch="Fill" Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}" Visibility="Visible" />
                  <ContentControl x:Name="upResizeContent" />
                  <Grid x:Name="PART_MenuPanel" Grid.Row="1" MaxHeight="{TemplateBinding MaxDropDownHeight}" VerticalAlignment="Top">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="*" />
                      <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <ScrollViewer x:Name="PART_ScrollViewer" Margin="1" VerticalAlignment="Stretch" Background="{DynamicResource WhiteBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}" BorderThickness="0,0,0,1" Focusable="False" KeyboardNavigation.DirectionalNavigation="None" SnapsToDevicePixels="True">
                      <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </ScrollViewer>
                    <ContentPresenter x:Name="menuPresenter" Grid.Row="1" VerticalAlignment="Top" ContentSource="Menu" KeyboardNavigation.DirectionalNavigation="None" />
                  </Grid>
                  <ContentControl x:Name="downResizeContent" Grid.Row="2">
                    <Border x:Name="resizeBorder" Height="11" HorizontalAlignment="Stretch" VerticalAlignment="Top" Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgoundBrush}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}" BorderThickness="0,1,0,0" CornerRadius="0,0,1,1" RenderTransformOrigin="0.5, 0.5">
                      <Grid>
                        <Thumb x:Name="PART_ResizeVerticalThumb" Width="Auto" Height="10" Margin="0,0,0,-90" HorizontalAlignment="Stretch" VerticalAlignment="Top" Cursor="SizeNS" Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                        <Thumb x:Name="PART_ResizeBothThumb" Width="10" Height="10" Margin="0,0,0,-90" HorizontalAlignment="Right" VerticalAlignment="Top" Cursor="SizeNWSE" Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                      </Grid>
                    </Border>
                  </ContentControl>
                </Grid>
              </Grid>
            </Border>
          </Grid>
        </Popup>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="Menu" Value="{x:Null}">
        <Setter TargetName="PART_ScrollViewer" Property="BorderThickness" Value="0" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="None">
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Both">
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Vertical">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="Icon" Value="{x:Null}">
        <Setter TargetName="iconImage" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="textBlock" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ContentBorder" Property="HorizontalAlignment" Value="Stretch" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="stackPanel" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ContentBorder" Property="HorizontalAlignment" Value="Stretch" />
      </Trigger>
      <Trigger Property="InputWidth" Value="NaN">
        <Setter TargetName="PART_ContentBorder" Property="HorizontalAlignment" Value="Stretch" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="PART_EditableTextBox" Property="IsEnabled" Value="False" />
        <Setter TargetName="PART_ContentBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.Background}" />
        <Setter TargetName="PART_ContentBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.BorderBrush}" />
        <Setter TargetName="PART_EditableTextBox" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Disabled.Background}" />
        <Setter TargetName="iconImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="textBlock" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_ContentBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.BorderBrush}" />
        <Setter TargetName="PART_EditableTextBox" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
        <Setter TargetName="PART_ContentBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
      </Trigger>
      <Trigger Property="IsKeyboardFocusWithin" Value="True">
        <Setter TargetName="PART_ContentBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.BorderBrush}" />
        <Setter TargetName="PART_EditableTextBox" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
        <Setter TargetName="PART_ContentBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.TextBox.MouseOver.Background}" />
      </Trigger>
      <Trigger Property="HasItems" Value="false">
        <Setter TargetName="PART_DropDownBorder" Property="MinHeight" Value="95" />
      </Trigger>
      <Trigger Property="IsGrouping" Value="true">
        <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
      </Trigger>
      <Trigger Property="IsEditable" Value="true">
        <Setter Property="IsTabStop" Value="false" />
        <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
        <Setter TargetName="PART_ContentSite" Property="Visibility" Value="Hidden" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style TargetType="{x:Type Fluent:ComboBox}">
    <Setter Property="Template" Value="{DynamicResource ComboboxControlTemplate}" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" />
    <Setter Property="IsEditable" Value="True" />
    <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
    <Style.Triggers>
      <Trigger Property="ItemContainerStyleSelector" Value="{x:Null}">
        <Setter Property="ItemContainerStyle" Value="{DynamicResource ComboBoxItemStyle}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ZoomSliderStyle" TargetType="{x:Type Slider}">
    <Setter Property="Template" Value="{DynamicResource ZoomSliderControlTemplate}" />
    <Setter Property="Width" Value="133" />
    <Setter Property="Height" Value="16" />
    <Setter Property="Maximum" Value="500" />
    <Setter Property="Minimum" Value="10" />
    <Setter Property="SmallChange" Value="1" />
    <Setter Property="LargeChange" Value="10" />
    <Setter Property="Value" Value="100" />
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
  </Style>
  <Style BasedOn="{StaticResource GalleryStyle}" TargetType="{x:Type Fluent:Gallery}" />
  <Style BasedOn="{StaticResource RibbonTabControlStyle}" TargetType="{x:Type Fluent:RibbonTabControl}" />
  <ControlTemplate x:Key="RibbonGroupBoxControlTemplate" TargetType="{x:Type Fluent:RibbonGroupBox}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style BasedOn="{StaticResource GroupBoxSeparator}" TargetType="Separator" />
        <Style x:Key="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarWhite}" TargetType="{x:Type ScrollBar}" />
        <Style x:Key="{x:Type ScrollViewer}" BasedOn="{StaticResource ScrollViewerStyle}" TargetType="{x:Type ScrollViewer}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Grid x:Name="grid2" HorizontalAlignment="Stretch">
      <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" />
      <Grid>
        <ContentControl x:Name="border1" Focusable="False">
          <Grid x:Name="PART_ParentPanel" Grid.RowSpan="2" Height="Auto" Margin="0,1,0,2">
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="17" />
            </Grid.RowDefinitions>
            <WrapPanel x:Name="PART_UpPanel" Width="Auto" Height="Auto" Margin="4,0,4,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Stretch" IsItemsHost="True" Orientation="Vertical" />
            <Grid x:Name="PART_DownGrid" Grid.Row="1" Height="17" MaxWidth="{Binding ActualWidth, ElementName=PART_ParentPanel}" Margin="0,-2,2,2" VerticalAlignment="Bottom">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <TextBlock Grid.Row="1" Margin="2,0" HorizontalAlignment="Stretch" VerticalAlignment="Center" Foreground="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.Header.Foreground}" Text="{TemplateBinding Header}" TextAlignment="Center" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" />
              <Fluent:Button x:Name="PART_DialogLauncherButton" Grid.Column="1" Width="15" Height="14" Margin="0,0,1,1" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Background="Transparent" BorderBrush="Transparent" Command="{Binding LauncherCommand, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{Binding LauncherCommandParameter, RelativeSource={RelativeSource TemplatedParent}}" CommandTarget="{Binding LauncherCommandTarget, RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" Header="{TemplateBinding LauncherText}" Icon="{TemplateBinding LauncherIcon}" IsEnabled="{Binding IsLauncherEnabled, RelativeSource={RelativeSource TemplatedParent}}" IsTabStop="False" Template="{DynamicResource DialogLauncherButtonControlTemplate}" ToolTip="{Binding LauncherToolTip, RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid>
          </Grid>
        </ContentControl>
        <Grid x:Name="grid1" Grid.RowSpan="2" Width="Auto" Height="Auto" Margin="0" Visibility="Collapsed">
          <Fluent:TwoLineLabel Margin="5,38,5,0" HorizontalAlignment="Center" VerticalAlignment="Top" HasGlyph="True" HasTwoLines="True" Style="{DynamicResource TwoLineLabelStyle}" Text="{TemplateBinding Header}" />
          <Border Width="31" Height="31" Margin="5,3,8,0" HorizontalAlignment="Center" VerticalAlignment="Top" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.Collapsed.BorderBrush}" BorderThickness="1" CornerRadius="3">
            <ContentPresenter x:Name="iconImage" Width="16" Height="16" Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" SnapsToDevicePixels="True" />
          </Border>
          <Popup x:Name="PART_Popup" Width="Auto" Height="Auto" AllowsTransparency="True" IsOpen="{TemplateBinding IsDropDownOpen}" PlacementTarget="{Binding ElementName=grid1, Mode=OneWay}" StaysOpen="True">
            <Grid Width="Auto" Height="Auto" Margin="0,20">
              <Border x:Name="border" Height="Auto" Background="{DynamicResource Fluent.Ribbon.Brushes.Ribbon.Background}" BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.BorderBrush}" BorderThickness="1" CornerRadius="1" d:LayoutOverrides="Width">
                <ContentControl x:Name="popupContent" />
              </Border>
            </Grid>
          </Popup>
        </Grid>
        <Rectangle x:Name="separator" Grid.RowSpan="2" Width="1" Height="Auto" Margin="0,4" HorizontalAlignment="Right" VerticalAlignment="Stretch" Fill="{DynamicResource Fluent.Ribbon.Brushes.GroupSeparator.Background}" Visibility="{Binding IsSeparatorVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" />
      </Grid>
      <Image x:Name="PART_SnappedImage" Visibility="Collapsed" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="State" Value="Collapsed">
        <Setter TargetName="grid1" Property="Visibility" Value="Visible" />
        <Setter TargetName="border1" Property="UIElement.Visibility" Value="Collapsed" />
        <Setter TargetName="grid2" Property="HorizontalAlignment" Value="Left" />
        <Setter TargetName="border1" Property="Content" Value="{x:Null}" />
        <Setter TargetName="popupContent" Property="Content" Value="{Binding ElementName=PART_ParentPanel}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="State" Value="Collapsed" />
          <Condition Property="IsMouseOver" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.Collapsed.MouseOver.Background}" />
      </MultiTrigger>
      <Trigger Property="IsDropDownOpen" Value="True">
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.DropDownOpen.Background}" />
      </Trigger>
      <Trigger Property="IsLauncherVisible" Value="False">
        <Setter TargetName="PART_DialogLauncherButton" Property="Visibility" Value="Collapsed" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="RibbonDropDownButtonStyle" TargetType="{x:Type Fluent:DropDownButton}">
    <Setter Property="Template" Value="{DynamicResource RibbonDropDownButtonControlTemplate}" />
    <Setter Property="Height" Value="68" />
    <Setter Property="Width" Value="Auto" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="SnapsToDevicePixels" Value="False" />
    <Style.Triggers>
      <Trigger Property="Size" Value="Large">
        <Setter Property="Height" Value="68" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter Property="Height" Value="22" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter Property="Height" Value="22" />
        <Setter Property="Width" Value="32" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="RibbonSplitButtonStyle" TargetType="{x:Type Fluent:SplitButton}">
    <Setter Property="Template" Value="{DynamicResource RibbonSplitButtonControlTemplate}" />
    <Setter Property="Height" Value="68" />
    <Setter Property="Width" Value="Auto" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="SnapsToDevicePixels" Value="False" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="Fluent:KeyTip.AutoPlacement" Value="False" />
    <Style.Triggers>
      <Trigger Property="Size" Value="Large">
        <Setter Property="Height" Value="68" />
        <Setter Property="Fluent:KeyTip.HorizontalAlignment" Value="Center" />
        <Setter Property="Fluent:KeyTip.VerticalAlignment" Value="Bottom" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter Property="Height" Value="22" />
        <Setter Property="Fluent:KeyTip.HorizontalAlignment" Value="Right" />
        <Setter Property="Fluent:KeyTip.VerticalAlignment" Value="Center" />
        <Setter Property="Fluent:KeyTip.Margin" Value="0,0,-5,0" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter Property="Height" Value="22" />
        <Setter Property="Width" Value="32" />
        <Setter Property="Fluent:KeyTip.HorizontalAlignment" Value="Right" />
        <Setter Property="Fluent:KeyTip.VerticalAlignment" Value="Center" />
        <Setter Property="Fluent:KeyTip.Margin" Value="0,0,-5,0" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="QuickAccessToolbarStyle" TargetType="{x:Type Fluent:QuickAccessToolBar}">
    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource AncestorType=Window}}" />
    <Setter Property="Template" Value="{DynamicResource QuickAccessToolbarControlTemplate}" />
    <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
  </Style>
  <Style TargetType="{x:Type Fluent:ContextMenu}">
    <Setter Property="Template" Value="{DynamicResource FluentPopupMenuControlTemplate}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="MinWidth" Value="0" />
    <Setter Property="MinHeight" Value="0" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />
  </Style>
  <Style x:Key="FluentRibbonDefaultContextMenuStyle" TargetType="{x:Type ContextMenu}">
    <Setter Property="Template" Value="{DynamicResource PopupMenuControlTemplate}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="MinWidth" Value="0" />
    <Setter Property="MinHeight" Value="0" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />
  </Style>
  <Style x:Key="ComboBoxBackstageStyle" TargetType="{x:Type Fluent:ComboBox}">
    <Setter Property="Template" Value="{DynamicResource ComboBoxBackstageControlTemplate}" />
    <Setter Property="Height" Value="42" />
    <Setter Property="Width" Value="229" />
    <Setter Property="IsReadOnly" Value="True" />
    <Setter Property="IsEditable" Value="False" />
  </Style>
  <ControlTemplate x:Key="BackstageControlTemplate" TargetType="{x:Type Fluent:BackstageTabControl}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style x:Key="{x:Type Fluent:Button}" BasedOn="{StaticResource BackstageButtonStyle}" TargetType="{x:Type Fluent:Button}" />
        <Style x:Key="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarWhite}" TargetType="{x:Type ScrollBar}" />
        <Style x:Key="{x:Type Fluent:DropDownButton}" BasedOn="{StaticResource DropDownButtonBackstageStyle}" TargetType="{x:Type Fluent:DropDownButton}" />
        <Style x:Key="{x:Type Fluent:ComboBox}" BasedOn="{StaticResource ComboBoxBackstageStyle}" TargetType="{x:Type Fluent:ComboBox}" />
        <Style BasedOn="{StaticResource BackstageSeparatorTabItemStyle}" TargetType="{x:Type Fluent:SeparatorTabItem}" />
        <Storyboard x:Key="OnIsOpenTrueStoryboard">
          <ThicknessAnimationUsingKeyFrames Storyboard.TargetName="grid" Storyboard.TargetProperty="(FrameworkElement.Margin)">
            <EasingThicknessKeyFrame KeyTime="0" Value="-125,0,0,0" />
            <EasingThicknessKeyFrame KeyTime="0:0:0.5" Value="0">
              <EasingThicknessKeyFrame.EasingFunction>
                <CubicEase EasingMode="EaseOut" />
              </EasingThicknessKeyFrame.EasingFunction>
            </EasingThicknessKeyFrame>
          </ThicknessAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="OnIsOpenFalseStoryboard">
          <ThicknessAnimationUsingKeyFrames Storyboard.TargetName="grid" Storyboard.TargetProperty="(FrameworkElement.Margin)">
            <EasingThicknessKeyFrame KeyTime="0" Value="0" />
            <EasingThicknessKeyFrame KeyTime="0:0:0.3" Value="-125,0,0,0">
              <EasingThicknessKeyFrame.EasingFunction>
                <CubicEase EasingMode="EaseOut" />
              </EasingThicknessKeyFrame.EasingFunction>
            </EasingThicknessKeyFrame>
          </ThicknessAnimationUsingKeyFrames>
        </Storyboard>
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Grid x:Name="grid">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding ItemsPanelMinWidth}" />
        <ColumnDefinition Width="*" />
      </Grid.ColumnDefinitions>
      <Grid x:Name="PART_ItemsPanelGrid" VerticalAlignment="Stretch" Background="{TemplateBinding ItemsPanelBackground}">
        <Fluent:WindowSteeringHelperControl Height="{Binding SelectedContentMargin.Top, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Top" IsEnabled="{TemplateBinding IsWindowSteeringHelperEnabled}" />
        <Button x:Name="backbutton" Margin="0,16,0,0" Padding="22,7,0,7" VerticalAlignment="Top" Command="{x:Static Fluent:RibbonCommands.OpenBackstage}" Style="{DynamicResource BackstageBackButtonStyle}" Visibility="{Binding Path=IsBackButtonVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}" />
        <ItemsPresenter Height="Auto" Margin="0,77,0,0" />
      </Grid>
      <Grid x:Name="PART_SelectedContentGrid" Grid.Column="1" Height="Auto" Margin="{TemplateBinding SelectedContentMargin}" Background="{TemplateBinding Background}">
        <Grid.Resources>
          <ResourceDictionary>
            <Style x:Key="{x:Type Fluent:Button}" BasedOn="{StaticResource BackstageButtonStyle}" TargetType="{x:Type Fluent:Button}" />
          </ResourceDictionary>
        </Grid.Resources>
        <ContentPresenter x:Name="PART_SelectedContentHost" Grid.Column="1" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" ContentSource="SelectedContent" />
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding ParentBackstage.IsOpen, RelativeSource={RelativeSource Self}}" Value="True" />
          <Condition Binding="{Binding ParentBackstage.IsOpenAnimationEnabled, RelativeSource={RelativeSource Self}}" Value="True" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.EnterActions>
          <BeginStoryboard x:Name="IsOpenBeginStoryboard" Storyboard="{StaticResource OnIsOpenTrueStoryboard}" />
        </MultiDataTrigger.EnterActions>
        <MultiDataTrigger.ExitActions>
          <RemoveStoryboard BeginStoryboardName="IsOpenBeginStoryboard" />
        </MultiDataTrigger.ExitActions>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding ParentBackstage.IsOpen, RelativeSource={RelativeSource Self}}" Value="False" />
          <Condition Binding="{Binding ParentBackstage.IsOpenAnimationEnabled, RelativeSource={RelativeSource Self}}" Value="True" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.EnterActions>
          <BeginStoryboard x:Name="IsClosedBeginStoryboard" Storyboard="{StaticResource OnIsOpenFalseStoryboard}" />
        </MultiDataTrigger.EnterActions>
        <MultiDataTrigger.ExitActions>
          <RemoveStoryboard BeginStoryboardName="IsClosedBeginStoryboard" />
        </MultiDataTrigger.ExitActions>
      </MultiDataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="BackstageStyle" TargetType="{x:Type Fluent:BackstageTabControl}">
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Template" Value="{DynamicResource BackstageControlTemplate}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" />
    <Setter Property="Background" Value="{DynamicResource WhiteBrush}" />
    <Setter Property="Fluent:RibbonProperties.AppTheme" Value="{DynamicResource Fluent.Ribbon.AppTheme}" />
    <Setter Property="SelectedContentMargin">
      <Setter.Value>
        <MultiBinding Converter="{x:Static Converters:StaticConverters.ThicknessConverter}">
          <Binding Source="0" />
          <Binding FallbackValue="0" Path="TitleBar.ActualHeight" RelativeSource="{RelativeSource FindAncestor,&#xD;&#xA;                                            AncestorType={x:Type Fluent:IRibbonWindow}}" />
          <Binding Source="0" />
          <Binding Source="0" />
        </MultiBinding>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Fluent:RibbonProperties.AppTheme" Value="BaseLight">
        <Setter Property="ItemsPanelBackground" Value="{Binding ParentBackstage.Background, RelativeSource={RelativeSource Self}, FallbackValue=Red}" />
      </Trigger>
      <Trigger Property="Fluent:RibbonProperties.AppTheme" Value="BaseDark">
        <Setter Property="ItemsPanelBackground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.Content.Background}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <ControlTemplate x:Key="StartScreenTabControlTemplate" TargetType="{x:Type Fluent:StartScreenTabControl}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style x:Key="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarWhite}" TargetType="{x:Type ScrollBar}" />
        <Style x:Key="{x:Type Fluent:DropDownButton}" BasedOn="{StaticResource DropDownButtonBackstageStyle}" TargetType="{x:Type Fluent:DropDownButton}" />
        <Style x:Key="{x:Type Fluent:ComboBox}" BasedOn="{StaticResource ComboBoxBackstageStyle}" TargetType="{x:Type Fluent:ComboBox}" />
        <Style BasedOn="{StaticResource BackstageSeparatorTabItemStyle}" TargetType="{x:Type Fluent:SeparatorTabItem}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Grid x:Name="grid">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding ItemsPanelMinWidth}" />
        <ColumnDefinition Width="*" />
      </Grid.ColumnDefinitions>
      <Grid x:Name="PART_LeftContentGrid" Margin="{TemplateBinding LeftContentMargin}" VerticalAlignment="Stretch" Background="{TemplateBinding ItemsPanelBackground}">
        <Border Padding="15,25">
          <ContentPresenter Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{TemplateBinding LeftContent}" />
        </Border>
        <Fluent:WindowSteeringHelperControl Height="{Binding SelectedContentMargin.Top, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Top" IsEnabled="{TemplateBinding IsWindowSteeringHelperEnabled}" />
      </Grid>
      <Grid x:Name="PART_SelectedContentGrid" Grid.Column="1" Height="Auto" Margin="{TemplateBinding SelectedContentMargin}" Background="{DynamicResource WhiteBrush}">
        <Border Padding="33,16" Background="{DynamicResource WhiteBrush}">
          <ContentPresenter x:Name="PART_SelectedContentHost" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{TemplateBinding RightContent}" />
        </Border>
      </Grid>
    </Grid>
  </ControlTemplate>
  <ControlTemplate x:Key="RibbonControlTemplate" TargetType="{x:Type Fluent:Ribbon}">
    <ControlTemplate.Resources>
      <Style BasedOn="{StaticResource MenuSeparatorStyle}" TargetType="{x:Type Separator}" />
      <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" BasedOn="{StaticResource MenuSeparatorStyle}" TargetType="{x:Type Separator}" />
      <Style BasedOn="{StaticResource FluentRibbonDefaultContextMenuStyle}" TargetType="{x:Type ContextMenu}" />
    </ControlTemplate.Resources>
    <Border Background="Transparent">
      <Grid x:Name="PART_LayoutRoot" Width="Auto" Height="Auto">
        <Grid.RowDefinitions>
          <RowDefinition Height="*" />
          <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Fluent:RibbonTabControl x:Name="PART_RibbonTabControl" ContentHeight="{TemplateBinding ContentHeight}" ContextMenu="{Binding ContextMenu, ElementName=PART_LayoutRoot}" IsMouseWheelScrollingEnabled="{TemplateBinding IsMouseWheelScrollingEnabled}" Menu="{TemplateBinding Menu}" />
        <ContentControl x:Name="quickAccessToolBarHolder" Grid.Row="1" Height="{TemplateBinding QuickAccessToolBarHeight}" HorizontalAlignment="Left">
          <Fluent:QuickAccessToolBar x:Name="PART_QuickAccessToolBar" HorizontalAlignment="Left" Focusable="False" IsMenuDropDownVisible="{TemplateBinding IsQuickAccessToolBarMenuDropDownVisible}" ShowAboveRibbon="{Binding ShowQuickAccessToolBarAboveRibbon, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
        </ContentControl>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsQuickAccessToolBarVisible" Value="False">
        <Setter TargetName="quickAccessToolBarHolder" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_QuickAccessToolBar" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="IsCollapsed" Value="True">
        <Setter TargetName="PART_RibbonTabControl" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="quickAccessToolBarHolder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="QuickAccessToolBar" Value="{x:Null}">
        <Setter TargetName="quickAccessToolBarHolder" Property="Content" Value="{x:Null}" />
        <Setter TargetName="quickAccessToolBarHolder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="ShowQuickAccessToolBarAboveRibbon" Value="True">
        <Setter TargetName="quickAccessToolBarHolder" Property="Content" Value="{x:Null}" />
        <Setter TargetName="quickAccessToolBarHolder" Property="Visibility" Value="Collapsed" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="RibbonStyle" TargetType="{x:Type Fluent:Ribbon}">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Ribbon.Background}" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Template" Value="{DynamicResource RibbonControlTemplate}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Fluent:FrameworkHelper.UseLayoutRounding" Value="True" />
    <Setter Property="TitleBar" Value="{Binding TitleBar, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Fluent:IRibbonWindow}}, FallbackValue={x:Null}}" />
    <Setter Property="QuickAccessToolBarHeight" Value="{Binding TitleBar.ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:IRibbonWindow}}, FallbackValue=23}" />
  </Style>
  <Style BasedOn="{StaticResource BackstageStyle}" TargetType="{x:Type Fluent:BackstageTabControl}" />
  <Style BasedOn="{StaticResource RibbonDropDownButtonStyle}" TargetType="{x:Type Fluent:DropDownButton}" />
  <Style BasedOn="{StaticResource RibbonSplitButtonStyle}" TargetType="{x:Type Fluent:SplitButton}" />
  <Style BasedOn="{StaticResource RibbonStyle}" TargetType="{x:Type Fluent:Ribbon}" />
  <Style BasedOn="{StaticResource QuickAccessToolbarStyle}" TargetType="{x:Type Fluent:QuickAccessToolBar}" />
  <Style x:Key="RibbonGroupBoxStyle" TargetType="{x:Type Fluent:RibbonGroupBox}">
    <Setter Property="Template" Value="{DynamicResource RibbonGroupBoxControlTemplate}" />
    <Setter Property="Width" Value="Auto" />
    <Setter Property="Height" Value="Auto" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="Fluent:KeyTip.Margin" Value="0,15,0,0" />
    <Style.Triggers>
      <Trigger Property="State" Value="QuickAccess">
        <Setter Property="Template" Value="{DynamicResource RibbonGroupBoxDropDownButtonControlTemplate}" />
        <Setter Property="Height" Value="22" />
        <Setter Property="Width" Value="22" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="False" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="StartScreenTabControlStyle" BasedOn="{StaticResource {x:Type Fluent:BackstageTabControl}}" TargetType="{x:Type Fluent:StartScreenTabControl}">
    <Setter Property="Template" Value="{DynamicResource StartScreenTabControlTemplate}" />
    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Fluent:StartScreen}}, FallbackValue=Red}" />
    <Setter Property="Margin" Value="0" />
  </Style>
  <Style BasedOn="{StaticResource StartScreenTabControlStyle}" TargetType="{x:Type Fluent:StartScreenTabControl}" />
  <Style BasedOn="{StaticResource RibbonGroupBoxStyle}" TargetType="{x:Type Fluent:RibbonGroupBox}" />
</ResourceDictionary>