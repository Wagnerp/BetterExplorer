<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:Converters="clr-namespace:Fluent.Converters"
  xmlns:Fluent="clr-namespace:Fluent"
  xmlns:System="clr-namespace:System;assembly=mscorlib">
  <Style x:Key="ButtonBackstageStyle" TargetType="{x:Type Fluent:Button}">
    <Setter Property="Template" Value="{DynamicResource ButtonBackstageControlTemplate}" />
    <Setter Property="Height" Value="85" />
    <Setter Property="Width" Value="85" />
  </Style>

  <ControlTemplate x:Key="ButtonBackstageControlTemplate" TargetType="{x:Type Fluent:Button}">
    <Grid x:Name="grid">
      <Border
        x:Name="border"
        Margin="0"
        Background="Transparent"
        BorderBrush="{DynamicResource GrayBrush6}"
        BorderThickness="1">
        <StackPanel x:Name="stackPanel" Margin="2">
          <ContentPresenter
            x:Name="iconImage"
            Width="32"
            Height="32"
            Margin="9,9,9,0"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Content="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}"
            SnapsToDevicePixels="True" />
          <Fluent:TwoLineLabel
            x:Name="twoLineLabel"
            Margin="7,7,7,5"
            VerticalAlignment="Center"
            Text="{TemplateBinding Header}" />
        </StackPanel>
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="twoLineLabel" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="iconImage" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="stackPanel" Property="HorizontalAlignment" Value="Center" />
        <Setter TargetName="stackPanel" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="twoLineLabel" Property="Margin" Value="2" />
        <Setter TargetName="grid" Property="Width" Value="Auto" />
        <Setter TargetName="grid" Property="Height" Value="Auto" />
        <Setter TargetName="twoLineLabel" Property="HorizontalAlignment" Value="Center" />
        <Setter TargetName="twoLineLabel" Property="HasTwoLines" Value="False" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="stackPanel" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="twoLineLabel" Property="Margin" Value="7,0" />
        <Setter TargetName="iconImage" Property="Margin" Value="9,2,9,0" />
        <Setter TargetName="grid" Property="Width" Value="Auto" />
        <Setter TargetName="grid" Property="Height" Value="Auto" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Control.Disabled.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="ToggleButtonBackstageStyle" TargetType="{x:Type Fluent:ToggleButton}">
    <Setter Property="Template" Value="{DynamicResource ToggleButtonBackstageControlTemplate}" />
    <Setter Property="Height" Value="81" />
    <Setter Property="Width" Value="85" />
  </Style>

  <ControlTemplate x:Key="ToggleButtonBackstageControlTemplate" TargetType="{x:Type Fluent:ToggleButton}">
    <Border
      x:Name="border"
      Margin="0"
      HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
      VerticalAlignment="{TemplateBinding VerticalAlignment}"
      BorderBrush="{DynamicResource GrayBrush6}"
      BorderThickness="1">
      <StackPanel x:Name="stackPanel">
        <ContentPresenter
          x:Name="iconImage"
          Width="32"
          Height="32"
          Margin="9,9,9,0"
          HorizontalAlignment="Center"
          VerticalAlignment="Center"
          Content="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}"
          SnapsToDevicePixels="True" />
        <Fluent:TwoLineLabel
          x:Name="twoLineLabel"
          Margin="7,7,7,5"
          VerticalAlignment="Center"
          Text="{TemplateBinding Header}" />
      </StackPanel>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="twoLineLabel" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="iconImage" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="stackPanel" Property="HorizontalAlignment" Value="Center" />
        <Setter TargetName="stackPanel" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="twoLineLabel" Property="Margin" Value="2" />
        <Setter TargetName="twoLineLabel" Property="HorizontalAlignment" Value="Center" />
        <Setter TargetName="twoLineLabel" Property="HasTwoLines" Value="False" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="stackPanel" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="twoLineLabel" Property="Margin" Value="7,0" />
        <Setter TargetName="iconImage" Property="Margin" Value="9,2,9,0" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.HighlightBrush}" />
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="DropDownButtonBackstageStyle" TargetType="{x:Type Fluent:DropDownButton}">
    <Setter Property="Template" Value="{DynamicResource DropDownButtonBackstageControlTemplate}" />
    <Setter Property="Height" Value="81" />
    <Setter Property="Width" Value="85" />
  </Style>

  <ControlTemplate x:Key="DropDownButtonBackstageControlTemplate" TargetType="{x:Type Fluent:DropDownButton}">
    <Grid>
      <Border
        x:Name="PART_ButtonBorder"
        Margin="0"
        BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}"
        BorderThickness="1">
        <StackPanel x:Name="stackPanel" Margin="0">
          <ContentPresenter
            x:Name="iconImage"
            Width="32"
            Height="32"
            Margin="7,7,7,0"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Content="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}"
            SnapsToDevicePixels="True" />
          <Fluent:TwoLineLabel
            x:Name="twoLineLabel"
            Margin="5,5,5,3"
            VerticalAlignment="Center"
            HasGlyph="True"
            Text="{TemplateBinding Header}" />
        </StackPanel>
      </Border>
      <Popup
        x:Name="PART_Popup"
        Grid.ColumnSpan="2"
        Margin="0,0,-4,0"
        VerticalAlignment="Top"
        AllowsTransparency="True"
        Focusable="False"
        IsOpen="{TemplateBinding IsDropDownOpen}"
        Placement="Bottom"
        PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
        <Grid
          Name="DropDown"
          Margin="0"
          VerticalAlignment="Top"
          SnapsToDevicePixels="True">
          <Border
            x:Name="PART_DropDownBorder"
            MinWidth="{TemplateBinding ActualWidth}"
            HorizontalAlignment="Stretch"
            VerticalAlignment="Top"
            Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}"
            BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}"
            BorderThickness="1"
            CornerRadius="1"
            SnapsToDevicePixels="True">
            <Grid
              Width="Auto"
              Height="Auto"
              HorizontalAlignment="Stretch"
              VerticalAlignment="Top">
              <Border
                Width="Auto"
                Height="Auto"
                VerticalAlignment="Top"
                BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}"
                BorderThickness="1"
                CornerRadius="1" />
              <Grid
                Margin="1"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Top">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Rectangle
                  Grid.RowSpan="2"
                  Width="1"
                  Height="Auto"
                  Margin="24,0,0,0"
                  HorizontalAlignment="Left"
                  VerticalAlignment="Stretch"
                  Fill="{x:Null}"
                  Stretch="Fill"
                  Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}"
                  Visibility="Visible" />
                <ScrollViewer
                  MaxHeight="{TemplateBinding MaxDropDownHeight}"
                  Margin="1"
                  ScrollViewer.HorizontalScrollBarVisibility="Hidden"
                  ScrollViewer.VerticalScrollBarVisibility="Auto"
                  SnapsToDevicePixels="True">
                  <StackPanel
                    x:Name="PART_MenuPanel"
                    IsItemsHost="True"
                    KeyboardNavigation.DirectionalNavigation="Cycle"
                    Orientation="Vertical" />
                </ScrollViewer>
                <Border
                  x:Name="resizeBorder"
                  Grid.Row="1"
                  Height="11"
                  HorizontalAlignment="Stretch"
                  VerticalAlignment="Top"
                  Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgoundBrush}"
                  BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}"
                  BorderThickness="0,1,0,0"
                  CornerRadius="0,0,1,1">
                  <Grid>
                    <Thumb
                      x:Name="PART_ResizeVerticalThumb"
                      Width="Auto"
                      Height="10"
                      Margin="0,0,0,-90"
                      HorizontalAlignment="Stretch"
                      VerticalAlignment="Top"
                      Cursor="SizeNS"
                      Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                    <Thumb
                      x:Name="PART_ResizeBothThumb"
                      Width="10"
                      Height="10"
                      Margin="0,0,0,-90"
                      HorizontalAlignment="Right"
                      VerticalAlignment="Top"
                      Cursor="SizeNWSE"
                      Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                  </Grid>
                </Border>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ResizeMode" Value="None">
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Both">
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Vertical">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="twoLineLabel" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Control.Disabled.BorderBrush}" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
      </Trigger>
      <Trigger Property="IsDropDownOpen" Value="True">
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="ComboBoxItemBackstageControlTemplate" TargetType="{x:Type ComboBoxItem}">
    <Grid HorizontalAlignment="Stretch" Background="Transparent">
      <Border x:Name="hoverBorder" Background="Transparent">
        <ContentPresenter
          x:Name="contentPresenter"
          Margin="1"
          Opacity="1" />
      </Border>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="contentPresenter" Property="Opacity" Value="0.5" />
      </Trigger>
      <Trigger Property="IsSelected" Value="True">
        <Setter TargetName="hoverBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="hoverBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="MetroComboBoxItemBackstageStyle" TargetType="{x:Type ComboBoxItem}">
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="MinHeight" Value="40" />
    <Setter Property="Template" Value="{DynamicResource ComboBoxItemBackstageControlTemplate}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" />
  </Style>

  <Style x:Key="ComboBoxBackstageStyle" TargetType="{x:Type Fluent:ComboBox}">
    <Setter Property="Template" Value="{DynamicResource ComboBoxBackstageControlTemplate}" />
    <Setter Property="Height" Value="42" />
    <Setter Property="Width" Value="229" />
    <Setter Property="IsReadOnly" Value="True" />
    <Setter Property="IsEditable" Value="False" />
  </Style>

  <ControlTemplate x:Key="ComboBoxBackstageControlTemplate" TargetType="{x:Type Fluent:ComboBox}">
    <ControlTemplate.Resources>
      <Style
        x:Key="{x:Type ScrollBar}"
        BasedOn="{StaticResource ScrollBarWhite}"
        TargetType="{x:Type ScrollBar}" />
      <Style
        x:Key="{x:Type Fluent:ToggleButton}"
        BasedOn="{StaticResource ToggleButtonBackstageStyle}"
        TargetType="{x:Type Fluent:ToggleButton}" />
      <Style
        x:Key="{x:Type ScrollViewer}"
        BasedOn="{StaticResource ScrollViewerStyle}"
        TargetType="{x:Type ScrollViewer}" />
      <Style
        x:Key="{x:Type ComboBoxItem}"
        BasedOn="{StaticResource MetroComboBoxItemBackstageStyle}"
        TargetType="{x:Type ComboBoxItem}" />
    </ControlTemplate.Resources>
    <Grid>
      <Border
        x:Name="PART_ContentBorder"
        Height="Auto"
        HorizontalAlignment="Stretch">
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="22" />
          </Grid.ColumnDefinitions>
          <Fluent:ToggleButton
            x:Name="ToggleButton"
            Grid.Column="0"
            Grid.ColumnSpan="2"
            Width="{Binding ElementName=PART_ContentBorder, Path=ActualWidth}"
            Height="Auto"
            Margin="0"
            HorizontalAlignment="Stretch"
            VerticalAlignment="Stretch"
            CanAddToQuickAccessToolBar="False"
            ClickMode="Press"
            Focusable="false"
            IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
            IsDefinitive="False"
            Size="Small" />
          <ContentPresenter
            x:Name="PART_ContentSite"
            Margin="3"
            HorizontalAlignment="Left"
            VerticalAlignment="Top"
            Content="{TemplateBinding SelectionBoxItem}"
            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
            IsHitTestVisible="False" />
          <Image
            x:Name="PART_SelectedImage"
            Width="Auto"
            Height="Auto"
            Margin="0"
            HorizontalAlignment="Left"
            VerticalAlignment="Top"
            IsHitTestVisible="False"
            Stretch="None"
            Visibility="Collapsed" />
          <TextBox
            x:Name="PART_EditableTextBox"
            HorizontalAlignment="Stretch"
            VerticalAlignment="Stretch"
            Background="{DynamicResource Fluent.Ribbon.Brushes.TextBox.Background}"
            BorderThickness="0,0,0,0"
            Focusable="True"
            IsReadOnly="{TemplateBinding IsReadOnly}"
            TextWrapping="NoWrap"
            Visibility="Collapsed" />
          <Path
            x:Name="path"
            Grid.Column="1"
            Width="7"
            Height="4"
            Margin="0,0,0,0"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Data="M0,0L1,1 2,0z"
            Fill="{DynamicResource BlackBrush}"
            Stretch="Fill"
            Stroke="{x:Null}"
            StrokeThickness="0" />
        </Grid>
      </Border>
      <Popup
        x:Name="PART_Popup"
        Grid.ColumnSpan="2"
        Margin="0,0,-4,0"
        VerticalAlignment="Top"
        AllowsTransparency="True"
        Focusable="False"
        IsOpen="{TemplateBinding IsDropDownOpen}"
        Placement="Bottom"
        PlacementTarget="{Binding ElementName=PART_ContentBorder}"
        PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
        <Popup.Resources>
          <ResourceDictionary>
            <Style
              x:Key="{x:Type ScrollBar}"
              BasedOn="{StaticResource ScrollBarWhite}"
              TargetType="{x:Type ScrollBar}" />
          </ResourceDictionary>
        </Popup.Resources>
        <Grid
          Name="DropDown"
          Margin="0"
          VerticalAlignment="Top"
          SnapsToDevicePixels="True">
          <Border
            x:Name="PART_DropDownBorder"
            MinWidth="{Binding ActualWidth, ElementName=PART_ContentBorder}"
            HorizontalAlignment="Stretch"
            VerticalAlignment="Top"
            Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}"
            BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}"
            BorderThickness="1"
            CornerRadius="1"
            SnapsToDevicePixels="True">
            <Grid
              Width="Auto"
              Height="Auto"
              HorizontalAlignment="Stretch"
              VerticalAlignment="Top"
              KeyboardNavigation.DirectionalNavigation="Cycle">
              <Border
                Width="Auto"
                Height="Auto"
                VerticalAlignment="Stretch"
                BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}"
                BorderThickness="1"
                CornerRadius="1" />
              <Grid
                Margin="1"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Top">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Rectangle
                  Grid.RowSpan="2"
                  Width="1"
                  Height="Auto"
                  Margin="24,0,0,0"
                  HorizontalAlignment="Left"
                  VerticalAlignment="Stretch"
                  Fill="{x:Null}"
                  Stretch="Fill"
                  Stroke="{DynamicResource Fluent.Ribbon.Brushes.Separator.BorderBrush}"
                  Visibility="Visible" />
                <Grid
                  x:Name="PART_MenuPanel"
                  MaxHeight="{TemplateBinding MaxDropDownHeight}"
                  VerticalAlignment="Top">
                  <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                  </Grid.RowDefinitions>
                  <ScrollViewer
                    x:Name="PART_ScrollViewer"
                    Grid.Row="0"
                    Margin="1"
                    VerticalAlignment="Stretch"
                    Background="{DynamicResource WhiteBrush}"
                    BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.Control.BorderBrush}"
                    BorderThickness="0,0,0,1"
                    Focusable="False"
                    KeyboardNavigation.DirectionalNavigation="None"
                    SnapsToDevicePixels="True">
                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                  </ScrollViewer>

                  <ContentPresenter
                    x:Name="menuPresenter"
                    Grid.Row="1"
                    VerticalAlignment="Top"
                    ContentSource="Menu"
                    KeyboardNavigation.DirectionalNavigation="None" />

                </Grid>
                <Border
                  x:Name="resizeBorder"
                  Grid.Row="2"
                  Height="11"
                  HorizontalAlignment="Stretch"
                  VerticalAlignment="Top"
                  Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgoundBrush}"
                  BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}"
                  BorderThickness="0,1,0,0"
                  CornerRadius="0,0,1,1">
                  <Grid>
                    <Thumb
                      x:Name="PART_ResizeVerticalThumb"
                      Width="Auto"
                      Height="10"
                      Margin="0,0,0,-90"
                      HorizontalAlignment="Stretch"
                      VerticalAlignment="Top"
                      Cursor="SizeNS"
                      Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                    <Thumb
                      x:Name="PART_ResizeBothThumb"
                      Width="10"
                      Height="10"
                      Margin="0,0,0,-90"
                      HorizontalAlignment="Right"
                      VerticalAlignment="Top"
                      Cursor="SizeNWSE"
                      Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                  </Grid>
                </Border>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ResizeMode" Value="None">
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Both">
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Vertical">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="path" Property="Opacity" Value="0.5" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <!--  Inner Backstage TabControl Style  -->
  <Style x:Key="InnerBackstageSeparatorTabItemStyle" TargetType="{x:Type Fluent:SeparatorTabItem}">
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.AccentBaseColorBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:SeparatorTabItem}">
          <Grid Margin="0,0,10,0">
            <TextBlock
              Margin="0,5"
              VerticalAlignment="Center"
              FontFamily="Segoe UI Light, Lucida Sans Unicode, Verdana"
              FontSize="17"
              Text="{TemplateBinding Header}"
              TextWrapping="Wrap" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="InnerBackstageTabControlItem" TargetType="{x:Type TabItem}">
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.IdealForegroundColorBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
          <Grid Margin="0,3" Background="Transparent">
            <Border
              x:Name="border"
              Margin="0"
              Background="Transparent"
              BorderBrush="Transparent"
              BorderThickness="1">
              <ContentPresenter Margin="5,5,50,5" ContentSource="Header" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Selector.IsSelected" Value="True">
              <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="Selector.IsSelected" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="InnerBackstageTabControlStyle" TargetType="{x:Type TabControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabControl}">
          <ControlTemplate.Resources>
            <Style BasedOn="{StaticResource InnerBackstageSeparatorTabItemStyle}" TargetType="{x:Type Fluent:SeparatorTabItem}" />
            <Style BasedOn="{StaticResource InnerBackstageTabControlItem}" TargetType="{x:Type TabItem}" />
          </ControlTemplate.Resources>
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Border
              Margin="0"
              HorizontalAlignment="Stretch"
              VerticalAlignment="Stretch"
              BorderBrush="{DynamicResource GrayBrush7}"
              BorderThickness="0,0,1,0" />
            <StackPanel
              Grid.Column="0"
              Margin="0"
              HorizontalAlignment="Left"
              VerticalAlignment="Top"
              IsItemsHost="True" />
            <ContentPresenter
              x:Name="PART_SelectedContentHost"
              Grid.Column="1"
              Margin="0"
              VerticalAlignment="Stretch"
              ContentSource="SelectedContent" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>