<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:Converters="clr-namespace:Fluent.Converters"
  xmlns:Fluent="clr-namespace:Fluent"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  mc:Ignorable="d">
  <Style x:Key="GroupBoxSeparator" TargetType="Separator">
    <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Separator.Background}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Separator">
          <Border
            Width="1"
            Height="55"
            Margin="2,5,2,10"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Background="{TemplateBinding Background}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="RibbonGroupBoxStyle" TargetType="{x:Type Fluent:RibbonGroupBox}">
    <Setter Property="Template" Value="{DynamicResource RibbonGroupBoxControlTemplate}" />
    <Setter Property="Width" Value="Auto" />
    <Setter Property="Height" Value="Auto" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="Fluent:KeyTip.Margin" Value="0,15,0,0" />
    <Style.Triggers>
      <Trigger Property="State" Value="QuickAccess">
        <Setter Property="Template" Value="{DynamicResource RibbonGroupBoxDropDownButtonControlTemplate}" />
        <Setter Property="Height" Value="22" />
        <Setter Property="Width" Value="22" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="False" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <ControlTemplate x:Key="RibbonGroupBoxDropDownButtonControlTemplate" TargetType="{x:Type Fluent:RibbonGroupBox}">
    <Grid Width="22">
      <Border
        x:Name="PART_ButtonBorder"
        Height="Auto"
        HorizontalAlignment="Left"
        VerticalAlignment="Stretch"
        Background="{TemplateBinding Background}"
        BorderBrush="{TemplateBinding BorderBrush}"
        BorderThickness="1"
        CornerRadius="2"
        d:LayoutOverrides="Width, Height">
        <Grid Height="Auto">
          <StackPanel
            x:Name="stackPanel"
            Width="Auto"
            Orientation="Vertical"
            d:LayoutOverrides="Width, Height">
            <ContentPresenter
              x:Name="iconImage"
              Width="16"
              Height="16"
              Margin="1,1,0,0"
              HorizontalAlignment="Center"
              VerticalAlignment="Center"
              Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}"
              SnapsToDevicePixels="True" />
            <Fluent:TwoLineLabel
              x:Name="controlLabel"
              Margin="2,-2,2,2"
              HorizontalAlignment="Center"
              VerticalAlignment="Center"
              Style="{DynamicResource TwoLineLabelStyle}"
              Text="{TemplateBinding Header}"
              Visibility="Collapsed" />
          </StackPanel>
        </Grid>
      </Border>
      <Popup
        x:Name="PART_Popup"
        Grid.ColumnSpan="2"
        Margin="0,0,-4,0"
        VerticalAlignment="Top"
        AllowsTransparency="True"
        Focusable="False"
        IsOpen="{TemplateBinding IsDropDownOpen}"
        Placement="Bottom"
        PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
        <Grid
          Width="Auto"
          Height="Auto"
          Margin="0,20">
          <Border
            x:Name="border"
            Height="Auto"
            Background="{DynamicResource Fluent.Ribbon.Brushes.Ribbon.Background}"
            BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.BorderBrush}"
            BorderThickness="1"
            CornerRadius="1"
            d:LayoutOverrides="Width">
            <Grid
              x:Name="PART_ParentPanel"
              Grid.RowSpan="2"
              Height="85"
              Margin="0,1,0,2">
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="17" />
              </Grid.RowDefinitions>
              <Grid
                x:Name="PART_DownGrid"
                Grid.Row="1"
                Height="17"
                MaxWidth="{Binding ActualWidth, ElementName=PART_UpPanel}"
                Margin="0,-2,2,2"
                VerticalAlignment="Bottom">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <TextBlock
                  Grid.Row="1"
                  Margin="2,0"
                  HorizontalAlignment="Stretch"
                  VerticalAlignment="Center"
                  Foreground="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.Header.Foreground}"
                  Text="{TemplateBinding Header}"
                  TextAlignment="Center"
                  TextTrimming="CharacterEllipsis"
                  TextWrapping="NoWrap" />
                <Fluent:Button
                  x:Name="PART_DialogLauncherButton"
                  Grid.Column="1"
                  Width="15"
                  Height="14"
                  Margin="0,0,1,1"
                  HorizontalAlignment="Stretch"
                  VerticalAlignment="Bottom"
                  Background="Transparent"
                  BorderBrush="Transparent"
                  Command="{Binding LauncherCommand, RelativeSource={RelativeSource TemplatedParent}}"
                  CommandParameter="{Binding LauncherCommandParameter, RelativeSource={RelativeSource TemplatedParent}}"
                  CommandTarget="{Binding LauncherCommandTarget, RelativeSource={RelativeSource TemplatedParent}}"
                  Focusable="False"
                  Header="{TemplateBinding LauncherText}"
                  Icon="{TemplateBinding LauncherIcon}"
                  IsEnabled="{Binding IsLauncherEnabled, RelativeSource={RelativeSource TemplatedParent}}"
                  IsTabStop="False"
                  Template="{DynamicResource DialogLauncherButtonControlTemplate}"
                  ToolTip="{Binding LauncherToolTip, RelativeSource={RelativeSource TemplatedParent}}" />
              </Grid>
              <WrapPanel
                x:Name="PART_UpPanel"
                Width="Auto"
                Height="Auto"
                Margin="2,0,4,0"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="Stretch"
                IsItemsHost="True"
                Orientation="Vertical" />
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="State" Value="Collapsed">
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="iconImage" Property="Content" Value="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}" />
        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
        <Setter TargetName="controlLabel" Property="Text" Value="" />
        <Setter TargetName="iconImage" Property="Width" Value="16" />
        <Setter TargetName="iconImage" Property="Height" Value="16" />
        <Setter TargetName="iconImage" Property="Margin" Value="1,0,0,0" />
        <Setter TargetName="controlLabel" Property="Margin" Value="-2,-1,2,1" />
        <Setter TargetName="controlLabel" Property="Width" Value="10" />
        <Setter TargetName="controlLabel" Property="VerticalAlignment" Value="Center" />
      </Trigger>
      <Trigger Property="IsDropDownOpen" Value="True">
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsDropDownOpen" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="RibbonGroupBoxControlTemplate" TargetType="{x:Type Fluent:RibbonGroupBox}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style BasedOn="{StaticResource GroupBoxSeparator}" TargetType="Separator" />
        <Style
          x:Key="{x:Type ScrollBar}"
          BasedOn="{StaticResource ScrollBarWhite}"
          TargetType="{x:Type ScrollBar}" />
        <Style
          x:Key="{x:Type ScrollViewer}"
          BasedOn="{StaticResource ScrollViewerStyle}"
          TargetType="{x:Type ScrollViewer}" />
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Grid x:Name="grid2" HorizontalAlignment="Stretch">
      <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" />

      <Grid>
        <ContentControl x:Name="border1" Focusable="False">
          <Grid
            x:Name="PART_ParentPanel"
            Grid.RowSpan="2"
            Height="Auto"
            Margin="0,1,0,2">
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="17" />
            </Grid.RowDefinitions>

            <WrapPanel
              x:Name="PART_UpPanel"
              Width="Auto"
              Height="Auto"
              Margin="4,0,4,0"
              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
              VerticalAlignment="Stretch"
              IsItemsHost="True"
              Orientation="Vertical" />

            <Grid
              x:Name="PART_DownGrid"
              Grid.Row="1"
              Height="17"
              MaxWidth="{Binding ActualWidth, ElementName=PART_ParentPanel}"
              Margin="0,-2,2,2"
              VerticalAlignment="Bottom">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <TextBlock
                Grid.Row="1"
                Margin="2,0"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Center"
                Foreground="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.Header.Foreground}"
                Text="{TemplateBinding Header}"
                TextAlignment="Center"
                TextTrimming="CharacterEllipsis"
                TextWrapping="NoWrap" />
              <Fluent:Button
                x:Name="PART_DialogLauncherButton"
                Grid.Column="1"
                Width="15"
                Height="14"
                Margin="0,0,1,1"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Bottom"
                Background="Transparent"
                BorderBrush="Transparent"
                Command="{Binding LauncherCommand, RelativeSource={RelativeSource TemplatedParent}}"
                CommandParameter="{Binding LauncherCommandParameter, RelativeSource={RelativeSource TemplatedParent}}"
                CommandTarget="{Binding LauncherCommandTarget, RelativeSource={RelativeSource TemplatedParent}}"
                Focusable="False"
                Header="{TemplateBinding LauncherText}"
                Icon="{TemplateBinding LauncherIcon}"
                IsEnabled="{Binding IsLauncherEnabled, RelativeSource={RelativeSource TemplatedParent}}"
                IsTabStop="False"
                Template="{DynamicResource DialogLauncherButtonControlTemplate}"
                ToolTip="{Binding LauncherToolTip, RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid>
          </Grid>
        </ContentControl>
        <Grid
          x:Name="grid1"
          Grid.RowSpan="2"
          Width="Auto"
          Height="Auto"
          Margin="0"
          Visibility="Collapsed">
          <Fluent:TwoLineLabel
            Margin="5,38,5,0"
            HorizontalAlignment="Center"
            VerticalAlignment="Top"
            HasGlyph="True"
            HasTwoLines="True"
            Style="{DynamicResource TwoLineLabelStyle}"
            Text="{TemplateBinding Header}" />
          <Border
            Width="31"
            Height="31"
            Margin="5,3,8,0"
            HorizontalAlignment="Center"
            VerticalAlignment="Top"
            BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.Collapsed.BorderBrush}"
            BorderThickness="1"
            CornerRadius="3">
            <ContentPresenter
              x:Name="iconImage"
              Width="16"
              Height="16"
              Content="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}"
              SnapsToDevicePixels="True" />
          </Border>
          <Popup
            x:Name="PART_Popup"
            Width="Auto"
            Height="Auto"
            AllowsTransparency="True"
            IsOpen="{TemplateBinding IsDropDownOpen}"
            PlacementTarget="{Binding ElementName=grid1, Mode=OneWay}"
            StaysOpen="True">
            <Grid
              Width="Auto"
              Height="Auto"
              Margin="0,20">
              <Border
                x:Name="border"
                Height="Auto"
                Background="{DynamicResource Fluent.Ribbon.Brushes.Ribbon.Background}"
                BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabItem.BorderBrush}"
                BorderThickness="1"
                CornerRadius="1"
                d:LayoutOverrides="Width">
                <ContentControl x:Name="popupContent" />
              </Border>
            </Grid>
          </Popup>
        </Grid>

        <Rectangle
          x:Name="separator"
          Grid.RowSpan="2"
          Width="1"
          Height="Auto"
          Margin="0,4"
          HorizontalAlignment="Right"
          VerticalAlignment="Stretch"
          Fill="{DynamicResource Fluent.Ribbon.Brushes.GroupSeparator.Background}"
          Visibility="{Binding IsSeparatorVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" />
      </Grid>

      <Image x:Name="PART_SnappedImage" Visibility="Collapsed" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="State" Value="Collapsed">
        <Setter TargetName="grid1" Property="Visibility" Value="Visible" />
        <Setter TargetName="border1" Property="UIElement.Visibility" Value="Collapsed" />
        <Setter TargetName="grid2" Property="HorizontalAlignment" Value="Left" />
        <Setter TargetName="border1" Property="Content" Value="{x:Null}" />
        <Setter TargetName="popupContent" Property="Content" Value="{Binding ElementName=PART_ParentPanel}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="State" Value="Collapsed" />
          <Condition Property="IsMouseOver" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.Collapsed.MouseOver.Background}" />
      </MultiTrigger>
      <Trigger Property="IsDropDownOpen" Value="True">
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonGroupBox.DropDownOpen.Background}" />
      </Trigger>
      <Trigger Property="IsLauncherVisible" Value="False">
        <Setter TargetName="PART_DialogLauncherButton" Property="Visibility" Value="Collapsed" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="DialogLauncherButtonControlTemplate" TargetType="{x:Type Fluent:Button}">
    <Border
      x:Name="outerBorder"
      Background="{TemplateBinding Background}"
      BorderBrush="{TemplateBinding BorderBrush}"
      BorderThickness="1"
      CornerRadius="1,0,0,0">
      <Image
        x:Name="image"
        Height="Auto"
        HorizontalAlignment="Center"
        VerticalAlignment="Center"
        SnapsToDevicePixels="True"
        Source="pack://application:,,,/Fluent;Component\Themes\Images\DialogLauncher.png"
        Stretch="None" />
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="FlowDirection" Value="RightToLeft">
        <Setter TargetName="image" Property="RenderTransform">
          <Setter.Value>
            <ScaleTransform ScaleX="-1" />
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="outerBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
        <Setter TargetName="outerBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsPressed" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="outerBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="outerBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
</ResourceDictionary>