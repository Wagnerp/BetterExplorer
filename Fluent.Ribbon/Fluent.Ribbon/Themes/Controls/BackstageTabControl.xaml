<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:Converters="clr-namespace:Fluent.Converters"
  xmlns:Fluent="clr-namespace:Fluent">
  <ControlTemplate x:Key="BackstageButtonControlTemplate" TargetType="{x:Type Fluent:Button}">
    <Grid Background="Transparent">
      <Border
        x:Name="border"
        Background="{TemplateBinding Background}"
        Visibility="Collapsed" />
      <StackPanel
        Margin="25,0,15,0"
        HorizontalAlignment="Left"
        VerticalAlignment="Center"
        Orientation="Horizontal">
        <TextBlock
          x:Name="controlLabel"
          HorizontalAlignment="Left"
          VerticalAlignment="Center"
          Text="{TemplateBinding Header}"
          TextTrimming="CharacterEllipsis"
          TextWrapping="NoWrap" />
      </StackPanel>
    </Grid>
    <ControlTemplate.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Visibility" Value="Visible" />
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="BackstageButtonStyle" TargetType="{x:Type Fluent:Button}">
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" />
    <Setter Property="Height" Value="38" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="Template" Value="{DynamicResource BackstageButtonControlTemplate}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.IdealForegroundColorBrush}" />
    <Setter Property="Fluent:RibbonProperties.AppTheme" Value="{DynamicResource Fluent.Ribbon.AppTheme}" />
    <Style.Triggers>
      <Trigger Property="Fluent:RibbonProperties.AppTheme" Value="BaseLight">
        <Setter Property="Background">
          <Setter.Value>
            <SolidColorBrush Opacity="0.2" Color="{DynamicResource BlackColor}" />
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="Fluent:RibbonProperties.AppTheme" Value="BaseDark">
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.AccentBaseColorBrush}" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <ControlTemplate x:Key="BackstageBackButtonTemplate" TargetType="Button">
    <Grid
      x:Name="ContentGrid"
      Fluent:FrameworkHelper.UseLayoutRounding="False"
      Background="Transparent">
      <ContentControl Margin="{TemplateBinding Padding}" HorizontalAlignment="Left">
        <Grid>
          <Path
            x:Name="arrowpath"
            Width="16"
            Height="12"
            Data="F1 M 36,22L 36,26L 19.75,26L 27,33L 20.5,33L 11,24L 20.5,15L 27,15L 19.75,22L 36,22 Z "
            Fill="{TemplateBinding Foreground}"
            Stretch="Uniform" />

          <Ellipse
            x:Name="backellipse"
            Width="34"
            Height="34"
            Stroke="{TemplateBinding Foreground}"
            StrokeThickness="2" />

          <Path
            Width="Auto"
            Margin="0"
            HorizontalAlignment="Stretch"
            Data="M0,0 C0,35 0,35 0,35 C0,35 35,35 35,35 L35,0 z"
            Fill="Transparent"
            Stretch="None" />
        </Grid>
      </ContentControl>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="ContentGrid" Property="Background" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="arrowpath" Property="Opacity" Value="0.5" />
        <Setter TargetName="backellipse" Property="Opacity" Value="0.5" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="BackstageBackButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Height" Value="48" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Template" Value="{DynamicResource BackstageBackButtonTemplate}" />
    <Setter Property="Fluent:RibbonProperties.AppTheme" Value="{DynamicResource Fluent.Ribbon.AppTheme}" />
    <Style.Triggers>
      <Trigger Property="Fluent:RibbonProperties.AppTheme" Value="BaseLight">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteBrush}" />
      </Trigger>
      <Trigger Property="Fluent:RibbonProperties.AppTheme" Value="BaseDark">
        <Setter Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.AccentBaseColorBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="BackstageSeparatorTabItemStyle" TargetType="{x:Type Fluent:SeparatorTabItem}">
    <Setter Property="Margin" Value="25,10,20,10" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Fluent:SeparatorTabItem}">
          <StackPanel>
            <TextBlock
              x:Name="header"
              Margin="10,5"
              VerticalAlignment="Center"
              FontSize="14"
              FontWeight="SemiBold"
              Foreground="{DynamicResource Fluent.Ribbon.Brushes.IdealForegroundColorBrush}"
              Text="{TemplateBinding Header}"
              TextWrapping="Wrap"
              Visibility="Visible" />
            <Line
              Height="1"
              MinWidth="75"
              Stretch="Uniform"
              Stroke="{DynamicResource HighTransparentWhiteBrush}"
              X2="1" />
          </StackPanel>
          <ControlTemplate.Triggers>
            <Trigger Property="HasHeader" Value="False">
              <Setter TargetName="header" Property="Visibility" Value="Collapsed" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ControlTemplate x:Key="BackstageControlTemplate" TargetType="{x:Type Fluent:BackstageTabControl}">
    <ControlTemplate.Resources>
      <ResourceDictionary>
        <Style
          x:Key="{x:Type Fluent:Button}"
          BasedOn="{StaticResource BackstageButtonStyle}"
          TargetType="{x:Type Fluent:Button}" />
        <Style
          x:Key="{x:Type ScrollBar}"
          BasedOn="{StaticResource ScrollBarWhite}"
          TargetType="{x:Type ScrollBar}" />
        <Style
          x:Key="{x:Type Fluent:DropDownButton}"
          BasedOn="{StaticResource DropDownButtonBackstageStyle}"
          TargetType="{x:Type Fluent:DropDownButton}" />
        <Style
          x:Key="{x:Type Fluent:ComboBox}"
          BasedOn="{StaticResource ComboBoxBackstageStyle}"
          TargetType="{x:Type Fluent:ComboBox}" />
        <Style BasedOn="{StaticResource BackstageSeparatorTabItemStyle}" TargetType="{x:Type Fluent:SeparatorTabItem}" />
        <Storyboard x:Key="OnIsOpenTrueStoryboard">
          <ThicknessAnimationUsingKeyFrames Storyboard.TargetName="grid" Storyboard.TargetProperty="(FrameworkElement.Margin)">
            <EasingThicknessKeyFrame KeyTime="0" Value="-125,0,0,0" />
            <EasingThicknessKeyFrame KeyTime="0:0:0.5" Value="0">
              <EasingThicknessKeyFrame.EasingFunction>
                <CubicEase EasingMode="EaseOut" />
              </EasingThicknessKeyFrame.EasingFunction>
            </EasingThicknessKeyFrame>
          </ThicknessAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="OnIsOpenFalseStoryboard">
          <ThicknessAnimationUsingKeyFrames Storyboard.TargetName="grid" Storyboard.TargetProperty="(FrameworkElement.Margin)">
            <EasingThicknessKeyFrame KeyTime="0" Value="0" />
            <EasingThicknessKeyFrame KeyTime="0:0:0.3" Value="-125,0,0,0">
              <EasingThicknessKeyFrame.EasingFunction>
                <CubicEase EasingMode="EaseOut" />
              </EasingThicknessKeyFrame.EasingFunction>
            </EasingThicknessKeyFrame>
          </ThicknessAnimationUsingKeyFrames>
        </Storyboard>
      </ResourceDictionary>
    </ControlTemplate.Resources>
    <Grid x:Name="grid">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding ItemsPanelMinWidth}" />
        <ColumnDefinition Width="*" />
      </Grid.ColumnDefinitions>

      <Grid
        x:Name="PART_ItemsPanelGrid"
        VerticalAlignment="Stretch"
        Background="{TemplateBinding ItemsPanelBackground}">
        <Fluent:WindowSteeringHelperControl
          Height="{Binding SelectedContentMargin.Top, RelativeSource={RelativeSource TemplatedParent}}"
          VerticalAlignment="Top"
          IsEnabled="{TemplateBinding IsWindowSteeringHelperEnabled}" />

        <Button
          x:Name="backbutton"
          Margin="0,16,0,0"
          Padding="22,7,0,7"
          VerticalAlignment="Top"
          Command="{x:Static Fluent:RibbonCommands.OpenBackstage}"
          Style="{DynamicResource BackstageBackButtonStyle}"
          Visibility="{Binding Path=IsBackButtonVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibilityConverter}}" />

        <ItemsPresenter Height="Auto" Margin="0,77,0,0" />
      </Grid>

      <Grid
        x:Name="PART_SelectedContentGrid"
        Grid.Column="1"
        Height="Auto"
        Margin="{TemplateBinding SelectedContentMargin}"
        Background="{TemplateBinding Background}">
        <Grid.Resources>
          <ResourceDictionary>
            <Style
              x:Key="{x:Type Fluent:Button}"
              BasedOn="{StaticResource BackstageButtonStyle}"
              TargetType="{x:Type Fluent:Button}" />
          </ResourceDictionary>
        </Grid.Resources>

        <ContentPresenter
          x:Name="PART_SelectedContentHost"
          Grid.Column="1"
          Height="Auto"
          HorizontalAlignment="Stretch"
          VerticalAlignment="Stretch"
          ContentSource="SelectedContent" />
      </Grid>
    </Grid>
    <ControlTemplate.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding ParentBackstage.IsOpen, RelativeSource={RelativeSource Self}}" Value="True" />
          <Condition Binding="{Binding ParentBackstage.IsOpenAnimationEnabled, RelativeSource={RelativeSource Self}}" Value="True" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.EnterActions>
          <BeginStoryboard x:Name="IsOpenBeginStoryboard" Storyboard="{StaticResource OnIsOpenTrueStoryboard}" />
        </MultiDataTrigger.EnterActions>
        <MultiDataTrigger.ExitActions>
          <RemoveStoryboard BeginStoryboardName="IsOpenBeginStoryboard" />
        </MultiDataTrigger.ExitActions>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding ParentBackstage.IsOpen, RelativeSource={RelativeSource Self}}" Value="False" />
          <Condition Binding="{Binding ParentBackstage.IsOpenAnimationEnabled, RelativeSource={RelativeSource Self}}" Value="True" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.EnterActions>
          <BeginStoryboard x:Name="IsClosedBeginStoryboard" Storyboard="{StaticResource OnIsOpenFalseStoryboard}" />
        </MultiDataTrigger.EnterActions>
        <MultiDataTrigger.ExitActions>
          <RemoveStoryboard BeginStoryboardName="IsClosedBeginStoryboard" />
        </MultiDataTrigger.ExitActions>
      </MultiDataTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="BackstageStyle" TargetType="{x:Type Fluent:BackstageTabControl}">
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="Template" Value="{DynamicResource BackstageControlTemplate}" />
    <Setter Property="FocusVisualStyle" Value="{DynamicResource ControlStyleEmptyFocus}" />
    <Setter Property="Background" Value="{DynamicResource WhiteBrush}" />
    <Setter Property="Fluent:RibbonProperties.AppTheme" Value="{DynamicResource Fluent.Ribbon.AppTheme}" />
    <Setter Property="SelectedContentMargin">
      <Setter.Value>
        <MultiBinding Converter="{x:Static Converters:StaticConverters.ThicknessConverter}">
          <Binding Source="0" />
          <Binding
            FallbackValue="0"
            Path="TitleBar.ActualHeight"
            RelativeSource="{RelativeSource FindAncestor,
                                            AncestorType={x:Type Fluent:IRibbonWindow}}" />
          <Binding Source="0" />
          <Binding Source="0" />
        </MultiBinding>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Fluent:RibbonProperties.AppTheme" Value="BaseLight">
        <Setter Property="ItemsPanelBackground" Value="{Binding ParentBackstage.Background, RelativeSource={RelativeSource Self}, FallbackValue=Red}" />
      </Trigger>
      <Trigger Property="Fluent:RibbonProperties.AppTheme" Value="BaseDark">
        <Setter Property="ItemsPanelBackground" Value="{DynamicResource Fluent.Ribbon.Brushes.RibbonTabControl.Content.Background}" />
      </Trigger>
    </Style.Triggers>
  </Style>
</ResourceDictionary>