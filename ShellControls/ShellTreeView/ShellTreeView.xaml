<UserControl x:Class="ShellControls.ShellTreeView.ShellTreeView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:BExplorer.Shell"
             xmlns:system="clr-namespace:System;assembly=mscorlib"
             xmlns:shell="clr-namespace:BExplorer.Shell;assembly=ShellLibrary"
             xmlns:shellTreeView="clr-namespace:ShellControls.ShellTreeView"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800" Unloaded="ShellTreeView_OnUnloaded">
  <UserControl.Resources>
    <!--<Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border
            Name="Border"
            Margin="0"
            Background="{DynamicResource Fluent.Ribbon.Brushes.ScrollButton.Default.Background}"
            BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.ScrollButton.Default.BorderBrush}"
            BorderThickness="1">
            <Path
              x:Name="path"
              Width="Auto"
              Height="Auto"
              HorizontalAlignment="Center"
              VerticalAlignment="Center"
              Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}"
              Fill="{TemplateBinding Foreground}" />
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="IsPressed" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.BorderBrush}" />
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Background}" />
            </MultiTrigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="path" Property="Opacity" Value="0.5" />
              <Setter TargetName="Border" Property="Background" Value="Transparent" />
              <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="IsTabStop" Value="false" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border Background="Transparent" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="IsTabStop" Value="false" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border
            x:Name="border"
            Background="{DynamicResource Fluent.Ribbon.Brushes.ScrollThumb.Default.Background}"
            BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.ScrollThumb.Default.BorderBrush}"
            BorderThickness="1" />
          <ControlTemplate.Triggers>
            <Trigger Property="IsDragging" Value="True">
              <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="VerticalScrollBarLineButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Border
            Name="Border"
            Margin="0"
            Background="{DynamicResource GrayBrush11}"
            BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.ScrollButton.Default.BorderBrush}"
            BorderThickness="0">
            <Path
              x:Name="path"
              Width="Auto"
              Height="Auto"
              HorizontalAlignment="Center"
              VerticalAlignment="Center"
              Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}"
              Fill="{TemplateBinding Foreground}" Stroke="{TemplateBinding Foreground}" />
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True" />
                <Condition Property="IsPressed" Value="False" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
            </MultiTrigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
              <Setter TargetName="Border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter TargetName="path" Property="Opacity" Value="0.5" />
              <Setter TargetName="Border" Property="Background" Value="Transparent" />
              <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="VerticalScrollBarThumb" TargetType="{x:Type Thumb}">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="IsTabStop" Value="false" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border
            x:Name="border"
            Background="{DynamicResource GrayBrush8}"
            BorderBrush="{DynamicResource GrayBrush8}"
            BorderThickness="1" />
          <ControlTemplate.Triggers>
            <Trigger Property="IsDragging" Value="True">
              <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="border" Property="Background" Value="{DynamicResource GrayBrush7}" />
              <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource GrayBrush7}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition MaxHeight="18" />
        <RowDefinition Height="0.00001*" />
        <RowDefinition MaxHeight="18" />
      </Grid.RowDefinitions>
      <Border
        Grid.RowSpan="3"
        Background="{DynamicResource GrayBrush11}"
        CornerRadius="0" />
      <RepeatButton
        x:Name="repeatButton"
        Grid.Row="0"
        Height="17"
        Margin="1,1,1,0"
        VerticalAlignment="Top"
        Background="{DynamicResource WhiteBrush}"
        Command="ScrollBar.LineUpCommand"
        Content="M 0 4 L 4 0 M 4 0 L 8 4"
        Style="{DynamicResource VerticalScrollBarLineButton}" />
      <Track
        Name="PART_Track"
        Grid.Row="1"
        IsDirectionReversed="true"
        ViewportSize="{TemplateBinding ViewportSize}">
        <Track.Resources>
          --><!--
            Set the Thumb's minimum height to 50.
            The Thumb's minimum height is half the
            value of VerticalScrollBarButtonHeightKey.
          --><!--
          <system:Double x:Key="{x:Static SystemParameters.VerticalScrollBarButtonHeightKey}">
            36
          </system:Double>
        </Track.Resources>
        <Track.DecreaseRepeatButton>
          <RepeatButton Command="ScrollBar.PageUpCommand" Style="{DynamicResource ScrollBarPageButton}" />
        </Track.DecreaseRepeatButton>
        <Track.Thumb>
          <Thumb
            Margin="1,0,1,0"
            RenderTransformOrigin="0.5,0.5"
            Style="{DynamicResource VerticalScrollBarThumb}" />
        </Track.Thumb>
        <Track.IncreaseRepeatButton>
          <RepeatButton Command="ScrollBar.PageDownCommand" Style="{DynamicResource ScrollBarPageButton}" />
        </Track.IncreaseRepeatButton>
      </Track>
      <RepeatButton
        x:Name="repeatButton1"
        Grid.Row="3"
        Height="17"
        Margin="1,0,1,1"
        Background="{DynamicResource WhiteBrush}"
        Command="ScrollBar.LineDownCommand"
        Content="M 0 0 L 4 4 M 4 4 L 8 0"
        Style="{DynamicResource VerticalScrollBarLineButton}" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="repeatButton" Property="Background" Value="{x:Null}" />
        <Setter TargetName="repeatButton1" Property="Background" Value="{x:Null}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition MaxWidth="18" />
        <ColumnDefinition Width="0.00001*" />
        <ColumnDefinition MaxWidth="18" />
      </Grid.ColumnDefinitions>
      <Border
        Grid.ColumnSpan="3"
        Margin="0"
        Background="{DynamicResource Fluent.Ribbon.Brushes.ScrollBar.Background}"
        CornerRadius="0" />
      <RepeatButton
        x:Name="repeatButton"
        Grid.Column="0"
        Width="17"
        Margin="1,1,0,1"
        Background="{DynamicResource WhiteBrush}"
        Command="ScrollBar.LineLeftCommand"
        Content="M 4 0 L 4 8 L 0 4 Z"
        Style="{DynamicResource ScrollBarLineButton}" />
      <Track
        Name="PART_Track"
        Grid.Column="1"
        Margin="0,1,0,1"
        IsDirectionReversed="False"
        ViewportSize="{TemplateBinding ViewportSize}">
        <Track.Resources>
          --><!--
            Set the Thumb's minimum height to 50.
            The Thumb's minimum height is half the
            value of VerticalScrollBarButtonHeightKey.
          --><!--
          <system:Double x:Key="{x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}">
            36
          </system:Double>
        </Track.Resources>
        <Track.DecreaseRepeatButton>
          <RepeatButton Command="ScrollBar.PageLeftCommand" Style="{DynamicResource ScrollBarPageButton}" />
        </Track.DecreaseRepeatButton>
        <Track.Thumb>
          <Thumb Margin="0,0,0,0" Style="{DynamicResource ScrollBarThumb}" />
        </Track.Thumb>
        <Track.IncreaseRepeatButton>
          <RepeatButton Command="ScrollBar.PageRightCommand" Style="{DynamicResource ScrollBarPageButton}" />
        </Track.IncreaseRepeatButton>
      </Track>
      <RepeatButton
        x:Name="repeatButton1"
        Grid.Column="3"
        Width="17"
        Margin="0,1,1,1"
        Background="{DynamicResource WhiteBrush}"
        Command="ScrollBar.LineRightCommand"
        Content="M 0 0 L 4 4 L 0 8 Z"
        Style="{DynamicResource ScrollBarLineButton}" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="repeatButton" Property="Background" Value="{x:Null}" />
        <Setter TargetName="repeatButton1" Property="Background" Value="{x:Null}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style TargetType="ScrollBar">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Horizontal">
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Template" Value="{DynamicResource HorizontalScrollBar}" />
        <Setter Property="Height" Value="16" />
      </Trigger>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Template" Value="{DynamicResource VerticalScrollBar}" />
        <Setter Property="Width" Value="16" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="ScrollBarWhite" TargetType="ScrollBar">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Foreground" Value="{DynamicResource BlackBrush}" />
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Horizontal">
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Template" Value="{DynamicResource HorizontalScrollBar}" />
        <Setter Property="Height" Value="16" />
      </Trigger>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Template" Value="{DynamicResource VerticalScrollBar}" />
        <Setter Property="Width" Value="16" />
      </Trigger>
    </Style.Triggers>
  </Style>-->
  </UserControl.Resources>
  <Grid>
    <TreeView x:Name="tvShellTreeViewInternal" Margin="0" TreeViewItem.PreviewMouseUp="TvShellTreeViewInternal_OnPreviewMouseUp"  ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto" ItemsSource="{Binding Roots}" Background="Transparent" RequestBringIntoView="TvShellTreeViewInternal_OnRequestBringIntoView" BorderThickness="0" >
      <TreeView.Resources>
        <shellTreeView:ObjectToSeparatorBooleanConverter x:Key="ObjectToSeparatorBoolean" />
        <HierarchicalDataTemplate DataType="{x:Type shellTreeView:FilesystemTreeViewItem}" ItemsSource="{Binding Items}">
          <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="16"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Image Name="icon" Grid.Column="0" Source="{Binding Icon}" Width="16" Height="16" Stretch="None" Margin="0"></Image>
            <Image Name="overlay" Grid.Column="0" Source="{Binding OverlayIcon}" Width="16" Height="16" Stretch="None" Margin="0"></Image>
            <TextBlock Grid.Column="1" Text="{Binding DisplayName}" VerticalAlignment="Center" Margin="3,0,0,0" Foreground="{DynamicResource BlackBrush}"></TextBlock>
          </Grid>
          <HierarchicalDataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsHidden, UpdateSourceTrigger=PropertyChanged}" Value="True">
              <Setter Property="Opacity" TargetName="icon" Value="0.6"/>
              <Setter Property="Opacity" TargetName="overlay" Value="0.6"/>
            </DataTrigger>
          </HierarchicalDataTemplate.Triggers>
        </HierarchicalDataTemplate>
      </TreeView.Resources>
      <TreeView.ItemContainerStyle>
        <!--<Style TargetType="{x:Type TreeViewItem}">
          <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
        </Style>-->
        <Style TargetType="TreeViewItem">
          <EventSetter Event="MouseEnter" Handler="OnTreeViewItem_Hover" HandledEventsToo="False"></EventSetter>
          <EventSetter Event="Expanded" Handler="TvShellTreeViewInternal_OnExpanded"></EventSetter>
          <EventSetter Event="Selected" Handler="EventSetter_OnHandler"></EventSetter>
          <!--<EventSetter Event="Selected" Handler="TvShellTreeViewInternal_OnSelected" HandledEventsToo="False"></EventSetter>-->
          <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
          <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
          <Setter Property="HorizontalContentAlignment" Value="Stretch" />
          <Setter Property="shell:TreeViewItemBehaviour.BringSelectedItemIntoView" Value="True" />
          <Setter Property="shell:TreeViewItemBehaviour.BringExpandedChildrenIntoView" Value="True" />
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type TreeViewItem}">

                <ControlTemplate.Resources>
                  <shell:LeftMarginMultiplierConverter Length="8" x:Key="lengthConverter" />
                </ControlTemplate.Resources>
                <StackPanel Margin="0,5,0,5">
                  <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Background="{TemplateBinding Background}" Grid.ColumnSpan="3" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True" Margin="1">
                    <Grid Margin="{Binding Converter={StaticResource lengthConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition MinWidth="19" Width="Auto"/>
                        <ColumnDefinition/>
                      </Grid.ColumnDefinitions>
                    <ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Checked="TvShellTreeViewInternal_OnExpanded">
                    <ToggleButton.Style>
                      <Style TargetType="{x:Type ToggleButton}">
                        <Setter Property="Focusable" Value="False"/>
                        <Setter Property="Width" Value="16"/>
                        <Setter Property="Height" Value="16"/>
                        <Setter Property="Template">
                          <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                              <Border Background="Transparent" Height="16" Padding="5" Width="16">
                                <Path x:Name="ExpandPath" Data="M0,0 L0,6 L6,0 z" Fill="{DynamicResource GrayBrush7}" Stroke="#FF818181">
                                  <Path.RenderTransform>
                                    <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                                  </Path.RenderTransform>
                                </Path>
                              </Border>
                              <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                  <Setter Property="RenderTransform" TargetName="ExpandPath">
                                    <Setter.Value>
                                      <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                    </Setter.Value>
                                  </Setter>
                                  <Setter Property="Fill" TargetName="ExpandPath" Value="#FF595959"/>
                                  <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF818181"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                  <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF27C7F7"/>
                                  <Setter Property="Fill" TargetName="ExpandPath" Value="#FFCCEEFB"/>
                                  
                                </Trigger>
                                <MultiTrigger>
                                  <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsChecked" Value="True"/>
                                  </MultiTrigger.Conditions>
                                  <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF1CC4F7"/>
                                  <Setter Property="Fill" TargetName="ExpandPath" Value="#FF82DFFB"/>
                                </MultiTrigger>
                              </ControlTemplate.Triggers>
                            </ControlTemplate>
                          </Setter.Value>
                        </Setter>
                      </Style>
                    </ToggleButton.Style>
                  </ToggleButton>
                    <ContentPresenter Grid.Column="1" x:Name="PART_Header" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Grid>
                  </Border>
                  <ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1"/>
                </StackPanel>
                <ControlTemplate.Triggers>
                  <DataTrigger Binding="{Binding Path=IsExpanded, UpdateSourceTrigger=PropertyChanged}" Value="False">
                    <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                  </DataTrigger>
                  <DataTrigger Binding="{Binding DataContext, Converter={StaticResource ObjectToSeparatorBoolean}}" Value="True">
                    <Setter Property="Visibility" TargetName="Bd" Value="Hidden"/>
                  </DataTrigger>
                  <DataTrigger Binding="{Binding Path=HasChildren, UpdateSourceTrigger=PropertyChanged}" Value="False">
                    <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                  </DataTrigger>
                  <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource SelectionBrush}"/>
                    <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource SelectionBorderBrush}"/>
                    <Setter Property="Foreground" Value="{DynamicResource BlackBrush}"/>
                  </Trigger>
                  <Trigger Property="shell:TreeViewHelper.IsMouseDirectlyOverItem" Value="True">
                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource SelectionBrush}"/>
                    <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource SelectionBrush}"/>
                    <Setter Property="Foreground" Value="{DynamicResource BlackBrush}"/>
                  </Trigger>
                 
                  <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </TreeView.ItemContainerStyle>
    </TreeView>
  </Grid>
</UserControl>
