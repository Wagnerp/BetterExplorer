<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:Converters="clr-namespace:Fluent.Converters"
  xmlns:Fluent="clr-namespace:Fluent"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  mc:Ignorable="d">
  <Style x:Key="RibbonSplitButtonStyle" TargetType="{x:Type Fluent:SplitButton}">
    <Setter Property="Template" Value="{DynamicResource RibbonSplitButtonControlTemplate}" />
    <Setter Property="Height" Value="68" />
    <Setter Property="Width" Value="Auto" />
    <Setter Property="Foreground" Value="{DynamicResource Fluent.Ribbon.Brushes.LabelTextBrush}" />
    <Setter Property="SnapsToDevicePixels" Value="False" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="Fluent:KeyTip.AutoPlacement" Value="False" />
    <Style.Triggers>
      <Trigger Property="Size" Value="Large">
        <Setter Property="Height" Value="68" />
        <Setter Property="Fluent:KeyTip.HorizontalAlignment" Value="Center" />
        <Setter Property="Fluent:KeyTip.VerticalAlignment" Value="Bottom" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter Property="Height" Value="22" />
        <Setter Property="Fluent:KeyTip.HorizontalAlignment" Value="Right" />
        <Setter Property="Fluent:KeyTip.VerticalAlignment" Value="Center" />
        <Setter Property="Fluent:KeyTip.Margin" Value="0,0,-5,0" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter Property="Height" Value="22" />
        <Setter Property="Width" Value="32" />
        <Setter Property="Fluent:KeyTip.HorizontalAlignment" Value="Right" />
        <Setter Property="Fluent:KeyTip.VerticalAlignment" Value="Center" />
        <Setter Property="Fluent:KeyTip.Margin" Value="0,0,-5,0" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <ControlTemplate x:Key="RibbonSplitButtonControlTemplate" TargetType="{x:Type Fluent:SplitButton}">
    <ControlTemplate.Resources>
      <Style BasedOn="{StaticResource MenuSeparatorStyle}" TargetType="{x:Type Separator}" />
    </ControlTemplate.Resources>
    <Grid>
      <Border
        Name="PART_ButtonBorder"
        VerticalAlignment="Stretch"
        Background="Transparent"
        BorderBrush="Transparent"
        BorderThickness="1">
        <StackPanel
          Name="stackPanel"
          KeyboardNavigation.TabNavigation="Local"
          Orientation="Vertical">
          <Fluent:ToggleButton
            x:Name="PART_Button"
            Width="Auto"
            Height="Auto"
            Margin="0,0,0,0"
            CanAddToQuickAccessToolBar="{TemplateBinding CanAddButtonToQuickAccessToolBar}"
            Command="{TemplateBinding Command}"
            CommandParameter="{TemplateBinding CommandParameter}"
            CommandTarget="{TemplateBinding CommandTarget}"
            GroupName="{Binding GroupName, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
            Header="{TemplateBinding Header}"
            Icon="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}"
            IsChecked="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
            IsDefinitive="{TemplateBinding IsDefinitive}"
            IsEnabled="{TemplateBinding IsButtonEnabled}"
            LargeIcon="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:StaticConverters.ObjectToImageConverter}}"
            Style="{DynamicResource InnerButtonStyle}"
            ToolTip="{TemplateBinding ToolTip}" />
          <Border
            Name="downBorder"
            Margin="0,0,0,0"
            Background="Transparent"
            BorderBrush="Transparent"
            BorderThickness="0,0,0,0">
            <Grid>
              <Fluent:TwoLineLabel
                x:Name="controlLabel"
                Margin="2,1,2,2"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                HasGlyph="{TemplateBinding HasTriangle}"
                Style="{DynamicResource TwoLineLabelStyle}"
                Text="{TemplateBinding Header}" />
            </Grid>
          </Border>
        </StackPanel>
      </Border>
      <Popup
        x:Name="PART_Popup"
        Grid.ColumnSpan="2"
        Margin="0,0,-4,0"
        VerticalAlignment="Top"
        AllowsTransparency="True"
        Focusable="False"
        IsOpen="{TemplateBinding IsDropDownOpen}"
        Placement="Bottom"
        PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
        <Grid
          Name="DropDown"
          Margin="0"
          VerticalAlignment="Top"
          IsEnabled="{TemplateBinding IsEnabled}"
          SnapsToDevicePixels="True">
          <Border
            x:Name="PART_DropDownBorder"
            MinWidth="{TemplateBinding ActualWidth}"
            HorizontalAlignment="Stretch"
            VerticalAlignment="Top"
            Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}"
            BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BorderBrush}"
            BorderThickness="1"
            CornerRadius="1"
            SnapsToDevicePixels="True"
            d:LayoutOverrides="Width, Height">
            <Grid
              Width="Auto"
              Height="Auto"
              HorizontalAlignment="Stretch"
              VerticalAlignment="Top">
              <Border
                Width="Auto"
                Height="Auto"
                VerticalAlignment="Top"
                BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.BackgroundBrush}"
                BorderThickness="1" />
              <Grid
                Margin="1"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Top">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ScrollViewer
                  x:Name="PART_ScrollViewer"
                  MaxHeight="{TemplateBinding MaxDropDownHeight}"
                  Margin="1"
                  HorizontalScrollBarVisibility="Hidden"
                  SnapsToDevicePixels="True"
                  Style="{DynamicResource MenuScrollViewer}"
                  VerticalScrollBarVisibility="Auto">
                  <StackPanel
                    x:Name="PART_MenuPanel"
                    IsItemsHost="True"
                    KeyboardNavigation.DirectionalNavigation="Cycle"
                    Orientation="Vertical" />
                </ScrollViewer>
                <Border
                  x:Name="resizeBorder"
                  Grid.Row="1"
                  Height="11"
                  HorizontalAlignment="Stretch"
                  VerticalAlignment="Top"
                  Background="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BackgoundBrush}"
                  BorderBrush="{DynamicResource Fluent.Ribbon.Brushes.DropDown.Resize.BorderBrush}"
                  BorderThickness="0,1,0,0"
                  CornerRadius="0,0,1,1">
                  <Grid>
                    <Thumb
                      x:Name="PART_ResizeVerticalThumb"
                      Width="Auto"
                      Height="10"
                      Margin="0,0,0,-90"
                      HorizontalAlignment="Stretch"
                      VerticalAlignment="Top"
                      Cursor="SizeNS"
                      Template="{DynamicResource ResizeVerticalThumbControlTemplate}" />
                    <Thumb
                      x:Name="PART_ResizeBothThumb"
                      Width="10"
                      Height="10"
                      Margin="0,0,0,-90"
                      HorizontalAlignment="Right"
                      VerticalAlignment="Top"
                      Cursor="SizeNWSE"
                      Template="{DynamicResource ResizeBothThumbControlTemplate}" />
                  </Grid>
                </Border>
              </Grid>
            </Grid>
          </Border>
        </Grid>
      </Popup>
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="ResizeMode" Value="None">
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Collapsed" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Both">
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="ResizeMode" Value="Vertical">
        <Setter TargetName="PART_ResizeBothThumb" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="PART_ResizeVerticalThumb" Property="Visibility" Value="Visible" />
        <Setter TargetName="resizeBorder" Property="Visibility" Value="Visible" />
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="PART_Button" Property="Size" Value="Small" />
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="controlLabel" Property="Width" Value="10" />
        <Setter TargetName="controlLabel" Property="Margin" Value="0,-19,0,0" />
        <Setter TargetName="controlLabel" Property="Text" Value="" />
        <Setter TargetName="downBorder" Property="Padding" Value="1,0,0,0" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="PART_Button" Property="Size" Value="Middle" />
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="controlLabel" Property="Width" Value="10" />
        <Setter TargetName="controlLabel" Property="Margin" Value="0,-19,0,0" />
        <Setter TargetName="controlLabel" Property="Text" Value="" />
      </Trigger>

      <Trigger Property="IsButtonEnabled" Value="False">
        <Setter TargetName="PART_Button" Property="IsEnabled" Value="False" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="PART_Button" Property="IsEnabled" Value="False" />
        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
      </Trigger>
      <Trigger Property="IsDropDownOpen" Value="True">
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
        <Setter TargetName="PART_ButtonBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="PART_Button" Property="IsMouseOver" Value="True" />
          <Condition Property="IsDropDownOpen" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="downBorder" Property="IsMouseOver" Value="True" />
          <Condition Property="IsDropDownOpen" Value="False" />
        </MultiTrigger.Conditions>
        <Setter TargetName="PART_ButtonBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
        <Setter TargetName="downBorder" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
        <Setter TargetName="downBorder" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <!--  Inner Button Style (Button in SplitButton)  -->
  <Style x:Key="InnerButtonStyle" TargetType="{x:Type Fluent:ToggleButton}">
    <Setter Property="Template" Value="{DynamicResource InnerButtonControlTemplate}" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="Fluent:KeyTip.AutoPlacement" Value="{Binding Path=(Fluent:KeyTip.AutoPlacement), RelativeSource={RelativeSource AncestorType={x:Type Fluent:SplitButton}}}" />
    <Style.Triggers>
      <Trigger Property="Size" Value="Large">
        <Setter Property="Fluent:KeyTip.HorizontalAlignment" Value="Center" />
        <Setter Property="Fluent:KeyTip.VerticalAlignment" Value="Top" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter Property="Fluent:KeyTip.HorizontalAlignment" Value="Left" />
        <Setter Property="Fluent:KeyTip.VerticalAlignment" Value="Center" />
        <Setter Property="Fluent:KeyTip.Margin" Value="-5,0,0,0" />
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter Property="Fluent:KeyTip.HorizontalAlignment" Value="Left" />
        <Setter Property="Fluent:KeyTip.VerticalAlignment" Value="Center" />
        <Setter Property="Fluent:KeyTip.Margin" Value="-5,0,0,0" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <ControlTemplate x:Key="InnerButtonControlTemplate" TargetType="{x:Type Fluent:ToggleButton}">
    <Border
      x:Name="border"
      Height="Auto"
      HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
      VerticalAlignment="{TemplateBinding VerticalAlignment}"
      Background="Transparent"
      BorderBrush="Transparent"
      BorderThickness="0"
      SnapsToDevicePixels="False">
      <Grid Height="Auto">
        <Rectangle
          x:Name="rectangle"
          StrokeThickness="0"
          Visibility="Collapsed" />
        <StackPanel
          x:Name="stackPanel"
          Width="Auto"
          HorizontalAlignment="Stretch"
          Orientation="Vertical"
          SnapsToDevicePixels="True"
          d:LayoutOverrides="Width, Height">
          <ContentPresenter
            x:Name="iconImage"
            Width="32"
            Height="32"
            Margin="0,1,0,0"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Content="{TemplateBinding LargeIcon}"
            SnapsToDevicePixels="True" />
          <Fluent:TwoLineLabel
            x:Name="controlLabel"
            Margin="2,0,2,2"
            HorizontalAlignment="Stretch"
            VerticalAlignment="Center"
            Style="{DynamicResource TwoLineLabelStyle}"
            Text="{TemplateBinding Header}"
            Visibility="Collapsed" />
        </StackPanel>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsPressed" Value="True">
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.BorderBrush}" />
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.Pressed.Background}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsPressed" Value="False" />
          <Condition Property="IsEnabled" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="border" Property="Background" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.Background}" />
        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Fluent.Ribbon.Brushes.Button.MouseOver.BorderBrush}" />
      </MultiTrigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="iconImage" Property="Opacity" Value="0.5" />
        <Setter TargetName="controlLabel" Property="Opacity" Value="0.5" />
        <Setter TargetName="iconImage" Property="Effect">
          <Setter.Value>
            <Fluent:GrayscaleEffect />
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="Size" Value="Small">
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="controlLabel" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
        <Setter TargetName="iconImage" Property="Width" Value="16" />
        <Setter TargetName="iconImage" Property="Height" Value="16" />
        <Setter TargetName="iconImage" Property="Margin" Value="1,0,2,0" />
        <Setter TargetName="iconImage" Property="Content" Value="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="controlLabel" Property="Margin" Value="2,0,2,1" />
      </Trigger>
      <Trigger Property="Size" Value="Middle">
        <Setter TargetName="stackPanel" Property="Orientation" Value="Horizontal" />
        <Setter TargetName="stackPanel" Property="Width" Value="Auto" />
        <Setter TargetName="iconImage" Property="VerticalAlignment" Value="Center" />
        <Setter TargetName="controlLabel" Property="HasTwoLines" Value="False" />
        <Setter TargetName="controlLabel" Property="Margin" Value="2,0,-1,1" />
        <Setter TargetName="border" Property="VerticalAlignment" Value="Stretch" />
        <Setter TargetName="iconImage" Property="Width" Value="16" />
        <Setter TargetName="iconImage" Property="Height" Value="16" />
        <Setter TargetName="iconImage" Property="Margin" Value="1,0,2,0" />
        <Setter TargetName="iconImage" Property="Content" Value="{Binding Icon, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter TargetName="controlLabel" Property="Visibility" Value="Visible" />
        <Setter TargetName="controlLabel" Property="VerticalAlignment" Value="Center" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
</ResourceDictionary>